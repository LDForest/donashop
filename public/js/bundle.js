(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],3:[function(require,module,exports){
'use strict';

var pug_has_own_property = Object.prototype.hasOwnProperty;

/**
 * Merge two attribute objects giving precedence
 * to values in object `b`. Classes are special-cased
 * allowing for arrays and merging/joining appropriately
 * resulting in a string.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api private
 */

exports.merge = pug_merge;
function pug_merge(a, b) {
  if (arguments.length === 1) {
    var attrs = a[0];
    for (var i = 1; i < a.length; i++) {
      attrs = pug_merge(attrs, a[i]);
    }
    return attrs;
  }

  for (var key in b) {
    if (key === 'class') {
      var valA = a[key] || [];
      a[key] = (Array.isArray(valA) ? valA : [valA]).concat(b[key] || []);
    } else if (key === 'style') {
      var valA = pug_style(a[key]);
      var valB = pug_style(b[key]);
      a[key] = valA + valB;
    } else {
      a[key] = b[key];
    }
  }

  return a;
};

/**
 * Process array, object, or string as a string of classes delimited by a space.
 *
 * If `val` is an array, all members of it and its subarrays are counted as
 * classes. If `escaping` is an array, then whether or not the item in `val` is
 * escaped depends on the corresponding item in `escaping`. If `escaping` is
 * not an array, no escaping is done.
 *
 * If `val` is an object, all the keys whose value is truthy are counted as
 * classes. No escaping is done.
 *
 * If `val` is a string, it is counted as a class. No escaping is done.
 *
 * @param {(Array.<string>|Object.<string, boolean>|string)} val
 * @param {?Array.<string>} escaping
 * @return {String}
 */
exports.classes = pug_classes;
function pug_classes_array(val, escaping) {
  var classString = '', className, padding = '', escapeEnabled = Array.isArray(escaping);
  for (var i = 0; i < val.length; i++) {
    className = pug_classes(val[i]);
    if (!className) continue;
    escapeEnabled && escaping[i] && (className = pug_escape(className));
    classString = classString + padding + className;
    padding = ' ';
  }
  return classString;
}
function pug_classes_object(val) {
  var classString = '', padding = '';
  for (var key in val) {
    if (key && val[key] && pug_has_own_property.call(val, key)) {
      classString = classString + padding + key;
      padding = ' ';
    }
  }
  return classString;
}
function pug_classes(val, escaping) {
  if (Array.isArray(val)) {
    return pug_classes_array(val, escaping);
  } else if (val && typeof val === 'object') {
    return pug_classes_object(val);
  } else {
    return val || '';
  }
}

/**
 * Convert object or string to a string of CSS styles delimited by a semicolon.
 *
 * @param {(Object.<string, string>|string)} val
 * @return {String}
 */

exports.style = pug_style;
function pug_style(val) {
  if (!val) return '';
  if (typeof val === 'object') {
    var out = '';
    for (var style in val) {
      /* istanbul ignore else */
      if (pug_has_own_property.call(val, style)) {
        out = out + style + ':' + val[style] + ';';
      }
    }
    return out;
  } else {
    val += '';
    if (val[val.length - 1] !== ';') 
      return val + ';';
    return val;
  }
};

/**
 * Render the given attribute.
 *
 * @param {String} key
 * @param {String} val
 * @param {Boolean} escaped
 * @param {Boolean} terse
 * @return {String}
 */
exports.attr = pug_attr;
function pug_attr(key, val, escaped, terse) {
  if (val === false || val == null || !val && (key === 'class' || key === 'style')) {
    return '';
  }
  if (val === true) {
    return ' ' + (terse ? key : key + '="' + key + '"');
  }
  if (typeof val.toJSON === 'function') {
    val = val.toJSON();
  }
  if (typeof val !== 'string') {
    val = JSON.stringify(val);
    if (!escaped && val.indexOf('"') !== -1) {
      return ' ' + key + '=\'' + val.replace(/'/g, '&#39;') + '\'';
    }
  }
  if (escaped) val = pug_escape(val);
  return ' ' + key + '="' + val + '"';
};

/**
 * Render the given attributes object.
 *
 * @param {Object} obj
 * @param {Object} terse whether to use HTML5 terse boolean attributes
 * @return {String}
 */
exports.attrs = pug_attrs;
function pug_attrs(obj, terse){
  var attrs = '';

  for (var key in obj) {
    if (pug_has_own_property.call(obj, key)) {
      var val = obj[key];

      if ('class' === key) {
        val = pug_classes(val);
        attrs = pug_attr(key, val, false, terse) + attrs;
        continue;
      }
      if ('style' === key) {
        val = pug_style(val);
      }
      attrs += pug_attr(key, val, false, terse);
    }
  }

  return attrs;
};

/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

var pug_match_html = /["&<>]/;
exports.escape = pug_escape;
function pug_escape(_html){
  var html = '' + _html;
  var regexResult = pug_match_html.exec(html);
  if (!regexResult) return _html;

  var result = '';
  var i, lastIndex, escape;
  for (i = regexResult.index, lastIndex = 0; i < html.length; i++) {
    switch (html.charCodeAt(i)) {
      case 34: escape = '&quot;'; break;
      case 38: escape = '&amp;'; break;
      case 60: escape = '&lt;'; break;
      case 62: escape = '&gt;'; break;
      default: continue;
    }
    if (lastIndex !== i) result += html.substring(lastIndex, i);
    lastIndex = i + 1;
    result += escape;
  }
  if (lastIndex !== i) return result + html.substring(lastIndex, i);
  else return result;
};

/**
 * Re-throw the given `err` in context to the
 * the pug in `filename` at the given `lineno`.
 *
 * @param {Error} err
 * @param {String} filename
 * @param {String} lineno
 * @param {String} str original source
 * @api private
 */

exports.rethrow = pug_rethrow;
function pug_rethrow(err, filename, lineno, str){
  if (!(err instanceof Error)) throw err;
  if ((typeof window != 'undefined' || !filename) && !str) {
    err.message += ' on line ' + lineno;
    throw err;
  }
  try {
    str = str || require('fs').readFileSync(filename, 'utf8')
  } catch (ex) {
    pug_rethrow(err, null, lineno)
  }
  var context = 3
    , lines = str.split('\n')
    , start = Math.max(lineno - context, 0)
    , end = Math.min(lines.length, lineno + context);

  // Error context
  var context = lines.slice(start, end).map(function(line, i){
    var curr = i + start + 1;
    return (curr == lineno ? '  > ' : '    ')
      + curr
      + '| '
      + line;
  }).join('\n');

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'Pug') + ':' + lineno
    + '\n' + context + '\n\n' + err.message;
  throw err;
};

},{"fs":1}],4:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

require('owl-carousel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var render = require('../../views/templates/products.pug');

var productsWrapper = (0, _jquery2.default)('.products');

(0, _jquery2.default)('.main-slider').owlCarousel({
	items: 1,
	animateOut: 'fadeOut',
	nav: true,
	loop: true,
	navText: ['<svg class="prev"><use xlink:href="#right-arrow"></svg>', '<svg class="next"><use xlink:href="#right-arrow"></svg>']
});

(0, _jquery2.default)('.event').owlCarousel({
	items: 1,
	nav: true,
	loop: true,
	dots: true,
	navText: ['<svg class="prev"><use xlink:href="#keyboard-arrow-button"></svg>', '<svg class="next"><use xlink:href="#keyboard-arrow-button"></svg>']
});

(0, _jquery2.default)('.popular-carousel').owlCarousel({
	items: 1,
	animateOut: 'fadeOut',
	nav: true,
	loop: true,
	dots: false,
	navText: ['<svg class="prev"><use xlink:href="#keyboard-arrow-button"></svg>', '<svg class="next"><use xlink:href="#keyboard-arrow-button"></svg>']
});

(0, _jquery2.default)('.search-link').on('click', function () {
	(0, _jquery2.default)('.search-click').fadeToggle(400);
});

(0, _jquery2.default)('#load').on('click', function (e) {
	e.preventDefault();
	var svg = (0, _jquery2.default)(this).find('svg');
	svg.toggleClass('loader_animate');

	_jquery2.default.ajax('/index-products').then(function (data) {
		var rendered = render({
			data: transformData(data, 4)
		});
		productsWrapper.append(rendered);
		svg.toggleClass('loader_animate');
	});
});

function transformData(data, amount) {
	var result = [];
	var rowsCount = Math.ceil(data.length / amount);

	for (var i = 0; i < rowsCount; i++) {
		var start = i * amount;
		var finish = (i + 1) * amount;
		result.push(data.slice(start, finish));
	}
	return result;
}

},{"../../views/templates/products.pug":7,"jquery":5,"owl-carousel":6}],5:[function(require,module,exports){
(function (global){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;var __browserify_shim_require__ = require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
  /*! jQuery v3.2.1 | (c) JS Foundation and other contributors | jquery.org/license */
  !function (a, b) {
    "use strict";
    "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && "object" == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {
      if (!a.document) throw new Error("jQuery requires a window with a document");return b(a);
    } : b(a);
  }("undefined" != typeof window ? window : this, function (a, b) {
    "use strict";
    var c = [],
        d = a.document,
        e = Object.getPrototypeOf,
        f = c.slice,
        g = c.concat,
        h = c.push,
        i = c.indexOf,
        j = {},
        k = j.toString,
        l = j.hasOwnProperty,
        m = l.toString,
        n = m.call(Object),
        o = {};function p(a, b) {
      b = b || d;var c = b.createElement("script");c.text = a, b.head.appendChild(c).parentNode.removeChild(c);
    }var q = "3.2.1",
        r = function r(a, b) {
      return new r.fn.init(a, b);
    },
        s = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        t = /^-ms-/,
        u = /-([a-z])/g,
        v = function v(a, b) {
      return b.toUpperCase();
    };r.fn = r.prototype = { jquery: q, constructor: r, length: 0, toArray: function toArray() {
        return f.call(this);
      }, get: function get(a) {
        return null == a ? f.call(this) : a < 0 ? this[a + this.length] : this[a];
      }, pushStack: function pushStack(a) {
        var b = r.merge(this.constructor(), a);return b.prevObject = this, b;
      }, each: function each(a) {
        return r.each(this, a);
      }, map: function map(a) {
        return this.pushStack(r.map(this, function (b, c) {
          return a.call(b, c, b);
        }));
      }, slice: function slice() {
        return this.pushStack(f.apply(this, arguments));
      }, first: function first() {
        return this.eq(0);
      }, last: function last() {
        return this.eq(-1);
      }, eq: function eq(a) {
        var b = this.length,
            c = +a + (a < 0 ? b : 0);return this.pushStack(c >= 0 && c < b ? [this[c]] : []);
      }, end: function end() {
        return this.prevObject || this.constructor();
      }, push: h, sort: c.sort, splice: c.splice }, r.extend = r.fn.extend = function () {
      var a,
          b,
          c,
          d,
          e,
          f,
          g = arguments[0] || {},
          h = 1,
          i = arguments.length,
          j = !1;for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == (typeof g === "undefined" ? "undefined" : _typeof(g)) || r.isFunction(g) || (g = {}), h === i && (g = this, h--); h < i; h++) {
        if (null != (a = arguments[h])) for (b in a) {
          c = g[b], d = a[b], g !== d && (j && d && (r.isPlainObject(d) || (e = Array.isArray(d))) ? (e ? (e = !1, f = c && Array.isArray(c) ? c : []) : f = c && r.isPlainObject(c) ? c : {}, g[b] = r.extend(j, f, d)) : void 0 !== d && (g[b] = d));
        }
      }return g;
    }, r.extend({ expando: "jQuery" + (q + Math.random()).replace(/\D/g, ""), isReady: !0, error: function error(a) {
        throw new Error(a);
      }, noop: function noop() {}, isFunction: function isFunction(a) {
        return "function" === r.type(a);
      }, isWindow: function isWindow(a) {
        return null != a && a === a.window;
      }, isNumeric: function isNumeric(a) {
        var b = r.type(a);return ("number" === b || "string" === b) && !isNaN(a - parseFloat(a));
      }, isPlainObject: function isPlainObject(a) {
        var b, c;return !(!a || "[object Object]" !== k.call(a)) && (!(b = e(a)) || (c = l.call(b, "constructor") && b.constructor, "function" == typeof c && m.call(c) === n));
      }, isEmptyObject: function isEmptyObject(a) {
        var b;for (b in a) {
          return !1;
        }return !0;
      }, type: function type(a) {
        return null == a ? a + "" : "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) || "function" == typeof a ? j[k.call(a)] || "object" : typeof a === "undefined" ? "undefined" : _typeof(a);
      }, globalEval: function globalEval(a) {
        p(a);
      }, camelCase: function camelCase(a) {
        return a.replace(t, "ms-").replace(u, v);
      }, each: function each(a, b) {
        var c,
            d = 0;if (w(a)) {
          for (c = a.length; d < c; d++) {
            if (b.call(a[d], d, a[d]) === !1) break;
          }
        } else for (d in a) {
          if (b.call(a[d], d, a[d]) === !1) break;
        }return a;
      }, trim: function trim(a) {
        return null == a ? "" : (a + "").replace(s, "");
      }, makeArray: function makeArray(a, b) {
        var c = b || [];return null != a && (w(Object(a)) ? r.merge(c, "string" == typeof a ? [a] : a) : h.call(c, a)), c;
      }, inArray: function inArray(a, b, c) {
        return null == b ? -1 : i.call(b, a, c);
      }, merge: function merge(a, b) {
        for (var c = +b.length, d = 0, e = a.length; d < c; d++) {
          a[e++] = b[d];
        }return a.length = e, a;
      }, grep: function grep(a, b, c) {
        for (var d, e = [], f = 0, g = a.length, h = !c; f < g; f++) {
          d = !b(a[f], f), d !== h && e.push(a[f]);
        }return e;
      }, map: function map(a, b, c) {
        var d,
            e,
            f = 0,
            h = [];if (w(a)) for (d = a.length; f < d; f++) {
          e = b(a[f], f, c), null != e && h.push(e);
        } else for (f in a) {
          e = b(a[f], f, c), null != e && h.push(e);
        }return g.apply([], h);
      }, guid: 1, proxy: function proxy(a, b) {
        var c, d, e;if ("string" == typeof b && (c = a[b], b = a, a = c), r.isFunction(a)) return d = f.call(arguments, 2), e = function e() {
          return a.apply(b || this, d.concat(f.call(arguments)));
        }, e.guid = a.guid = a.guid || r.guid++, e;
      }, now: Date.now, support: o }), "function" == typeof Symbol && (r.fn[Symbol.iterator] = c[Symbol.iterator]), r.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (a, b) {
      j["[object " + b + "]"] = b.toLowerCase();
    });function w(a) {
      var b = !!a && "length" in a && a.length,
          c = r.type(a);return "function" !== c && !r.isWindow(a) && ("array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a);
    }var x = function (a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o,
          p,
          q,
          r,
          s,
          t,
          u = "sizzle" + 1 * new Date(),
          v = a.document,
          w = 0,
          x = 0,
          y = ha(),
          z = ha(),
          A = ha(),
          B = function B(a, b) {
        return a === b && (l = !0), 0;
      },
          C = {}.hasOwnProperty,
          D = [],
          E = D.pop,
          F = D.push,
          G = D.push,
          H = D.slice,
          I = function I(a, b) {
        for (var c = 0, d = a.length; c < d; c++) {
          if (a[c] === b) return c;
        }return -1;
      },
          J = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
          K = "[\\x20\\t\\r\\n\\f]",
          L = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
          M = "\\[" + K + "*(" + L + ")(?:" + K + "*([*^$|!~]?=)" + K + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + L + "))|)" + K + "*\\]",
          N = ":(" + L + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + M + ")*)|.*)\\)|)",
          O = new RegExp(K + "+", "g"),
          P = new RegExp("^" + K + "+|((?:^|[^\\\\])(?:\\\\.)*)" + K + "+$", "g"),
          Q = new RegExp("^" + K + "*," + K + "*"),
          R = new RegExp("^" + K + "*([>+~]|" + K + ")" + K + "*"),
          S = new RegExp("=" + K + "*([^\\]'\"]*?)" + K + "*\\]", "g"),
          T = new RegExp(N),
          U = new RegExp("^" + L + "$"),
          V = { ID: new RegExp("^#(" + L + ")"), CLASS: new RegExp("^\\.(" + L + ")"), TAG: new RegExp("^(" + L + "|[*])"), ATTR: new RegExp("^" + M), PSEUDO: new RegExp("^" + N), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + K + "*(even|odd|(([+-]|)(\\d*)n|)" + K + "*(?:([+-]|)" + K + "*(\\d+)|))" + K + "*\\)|)", "i"), bool: new RegExp("^(?:" + J + ")$", "i"), needsContext: new RegExp("^" + K + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + K + "*((?:-\\d)?\\d*)" + K + "*\\)|)(?=[^-]|$)", "i") },
          W = /^(?:input|select|textarea|button)$/i,
          X = /^h\d$/i,
          Y = /^[^{]+\{\s*\[native \w/,
          Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
          $ = /[+~]/,
          _ = new RegExp("\\\\([\\da-f]{1,6}" + K + "?|(" + K + ")|.)", "ig"),
          aa = function aa(a, b, c) {
        var d = "0x" + b - 65536;return d !== d || c ? b : d < 0 ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
      },
          ba = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
          ca = function ca(a, b) {
        return b ? "\0" === a ? "\uFFFD" : a.slice(0, -1) + "\\" + a.charCodeAt(a.length - 1).toString(16) + " " : "\\" + a;
      },
          da = function da() {
        m();
      },
          ea = ta(function (a) {
        return a.disabled === !0 && ("form" in a || "label" in a);
      }, { dir: "parentNode", next: "legend" });try {
        G.apply(D = H.call(v.childNodes), v.childNodes), D[v.childNodes.length].nodeType;
      } catch (fa) {
        G = { apply: D.length ? function (a, b) {
            F.apply(a, H.call(b));
          } : function (a, b) {
            var c = a.length,
                d = 0;while (a[c++] = b[d++]) {}a.length = c - 1;
          } };
      }function ga(a, b, d, e) {
        var f,
            h,
            j,
            k,
            l,
            o,
            r,
            s = b && b.ownerDocument,
            w = b ? b.nodeType : 9;if (d = d || [], "string" != typeof a || !a || 1 !== w && 9 !== w && 11 !== w) return d;if (!e && ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, p)) {
          if (11 !== w && (l = Z.exec(a))) if (f = l[1]) {
            if (9 === w) {
              if (!(j = b.getElementById(f))) return d;if (j.id === f) return d.push(j), d;
            } else if (s && (j = s.getElementById(f)) && t(b, j) && j.id === f) return d.push(j), d;
          } else {
            if (l[2]) return G.apply(d, b.getElementsByTagName(a)), d;if ((f = l[3]) && c.getElementsByClassName && b.getElementsByClassName) return G.apply(d, b.getElementsByClassName(f)), d;
          }if (c.qsa && !A[a + " "] && (!q || !q.test(a))) {
            if (1 !== w) s = b, r = a;else if ("object" !== b.nodeName.toLowerCase()) {
              (k = b.getAttribute("id")) ? k = k.replace(ba, ca) : b.setAttribute("id", k = u), o = g(a), h = o.length;while (h--) {
                o[h] = "#" + k + " " + sa(o[h]);
              }r = o.join(","), s = $.test(a) && qa(b.parentNode) || b;
            }if (r) try {
              return G.apply(d, s.querySelectorAll(r)), d;
            } catch (x) {} finally {
              k === u && b.removeAttribute("id");
            }
          }
        }return i(a.replace(P, "$1"), b, d, e);
      }function ha() {
        var a = [];function b(c, e) {
          return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;
        }return b;
      }function ia(a) {
        return a[u] = !0, a;
      }function ja(a) {
        var b = n.createElement("fieldset");try {
          return !!a(b);
        } catch (c) {
          return !1;
        } finally {
          b.parentNode && b.parentNode.removeChild(b), b = null;
        }
      }function ka(a, b) {
        var c = a.split("|"),
            e = c.length;while (e--) {
          d.attrHandle[c[e]] = b;
        }
      }function la(a, b) {
        var c = b && a,
            d = c && 1 === a.nodeType && 1 === b.nodeType && a.sourceIndex - b.sourceIndex;if (d) return d;if (c) while (c = c.nextSibling) {
          if (c === b) return -1;
        }return a ? 1 : -1;
      }function ma(a) {
        return function (b) {
          var c = b.nodeName.toLowerCase();return "input" === c && b.type === a;
        };
      }function na(a) {
        return function (b) {
          var c = b.nodeName.toLowerCase();return ("input" === c || "button" === c) && b.type === a;
        };
      }function oa(a) {
        return function (b) {
          return "form" in b ? b.parentNode && b.disabled === !1 ? "label" in b ? "label" in b.parentNode ? b.parentNode.disabled === a : b.disabled === a : b.isDisabled === a || b.isDisabled !== !a && ea(b) === a : b.disabled === a : "label" in b && b.disabled === a;
        };
      }function pa(a) {
        return ia(function (b) {
          return b = +b, ia(function (c, d) {
            var e,
                f = a([], c.length, b),
                g = f.length;while (g--) {
              c[e = f[g]] && (c[e] = !(d[e] = c[e]));
            }
          });
        });
      }function qa(a) {
        return a && "undefined" != typeof a.getElementsByTagName && a;
      }c = ga.support = {}, f = ga.isXML = function (a) {
        var b = a && (a.ownerDocument || a).documentElement;return !!b && "HTML" !== b.nodeName;
      }, m = ga.setDocument = function (a) {
        var b,
            e,
            g = a ? a.ownerDocument || a : v;return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = n.documentElement, p = !f(n), v !== n && (e = n.defaultView) && e.top !== e && (e.addEventListener ? e.addEventListener("unload", da, !1) : e.attachEvent && e.attachEvent("onunload", da)), c.attributes = ja(function (a) {
          return a.className = "i", !a.getAttribute("className");
        }), c.getElementsByTagName = ja(function (a) {
          return a.appendChild(n.createComment("")), !a.getElementsByTagName("*").length;
        }), c.getElementsByClassName = Y.test(n.getElementsByClassName), c.getById = ja(function (a) {
          return o.appendChild(a).id = u, !n.getElementsByName || !n.getElementsByName(u).length;
        }), c.getById ? (d.filter.ID = function (a) {
          var b = a.replace(_, aa);return function (a) {
            return a.getAttribute("id") === b;
          };
        }, d.find.ID = function (a, b) {
          if ("undefined" != typeof b.getElementById && p) {
            var c = b.getElementById(a);return c ? [c] : [];
          }
        }) : (d.filter.ID = function (a) {
          var b = a.replace(_, aa);return function (a) {
            var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id");return c && c.value === b;
          };
        }, d.find.ID = function (a, b) {
          if ("undefined" != typeof b.getElementById && p) {
            var c,
                d,
                e,
                f = b.getElementById(a);if (f) {
              if (c = f.getAttributeNode("id"), c && c.value === a) return [f];e = b.getElementsByName(a), d = 0;while (f = e[d++]) {
                if (c = f.getAttributeNode("id"), c && c.value === a) return [f];
              }
            }return [];
          }
        }), d.find.TAG = c.getElementsByTagName ? function (a, b) {
          return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;
        } : function (a, b) {
          var c,
              d = [],
              e = 0,
              f = b.getElementsByTagName(a);if ("*" === a) {
            while (c = f[e++]) {
              1 === c.nodeType && d.push(c);
            }return d;
          }return f;
        }, d.find.CLASS = c.getElementsByClassName && function (a, b) {
          if ("undefined" != typeof b.getElementsByClassName && p) return b.getElementsByClassName(a);
        }, r = [], q = [], (c.qsa = Y.test(n.querySelectorAll)) && (ja(function (a) {
          o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\r\\' msallowcapture=''><option selected=''></option></select>", a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + K + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + K + "*(?:value|" + J + ")"), a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]");
        }), ja(function (a) {
          a.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var b = n.createElement("input");b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + K + "*[*^$|!~]?="), 2 !== a.querySelectorAll(":enabled").length && q.push(":enabled", ":disabled"), o.appendChild(a).disabled = !0, 2 !== a.querySelectorAll(":disabled").length && q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:");
        })), (c.matchesSelector = Y.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function (a) {
          c.disconnectedMatch = s.call(a, "*"), s.call(a, "[s!='']:x"), r.push("!=", N);
        }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = Y.test(o.compareDocumentPosition), t = b || Y.test(o.contains) ? function (a, b) {
          var c = 9 === a.nodeType ? a.documentElement : a,
              d = b && b.parentNode;return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
        } : function (a, b) {
          if (b) while (b = b.parentNode) {
            if (b === a) return !0;
          }return !1;
        }, B = b ? function (a, b) {
          if (a === b) return l = !0, 0;var d = !a.compareDocumentPosition - !b.compareDocumentPosition;return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === n || a.ownerDocument === v && t(v, a) ? -1 : b === n || b.ownerDocument === v && t(v, b) ? 1 : k ? I(k, a) - I(k, b) : 0 : 4 & d ? -1 : 1);
        } : function (a, b) {
          if (a === b) return l = !0, 0;var c,
              d = 0,
              e = a.parentNode,
              f = b.parentNode,
              g = [a],
              h = [b];if (!e || !f) return a === n ? -1 : b === n ? 1 : e ? -1 : f ? 1 : k ? I(k, a) - I(k, b) : 0;if (e === f) return la(a, b);c = a;while (c = c.parentNode) {
            g.unshift(c);
          }c = b;while (c = c.parentNode) {
            h.unshift(c);
          }while (g[d] === h[d]) {
            d++;
          }return d ? la(g[d], h[d]) : g[d] === v ? -1 : h[d] === v ? 1 : 0;
        }, n) : n;
      }, ga.matches = function (a, b) {
        return ga(a, null, null, b);
      }, ga.matchesSelector = function (a, b) {
        if ((a.ownerDocument || a) !== n && m(a), b = b.replace(S, "='$1']"), c.matchesSelector && p && !A[b + " "] && (!r || !r.test(b)) && (!q || !q.test(b))) try {
          var d = s.call(a, b);if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;
        } catch (e) {}return ga(b, n, null, [a]).length > 0;
      }, ga.contains = function (a, b) {
        return (a.ownerDocument || a) !== n && m(a), t(a, b);
      }, ga.attr = function (a, b) {
        (a.ownerDocument || a) !== n && m(a);var e = d.attrHandle[b.toLowerCase()],
            f = e && C.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
      }, ga.escape = function (a) {
        return (a + "").replace(ba, ca);
      }, ga.error = function (a) {
        throw new Error("Syntax error, unrecognized expression: " + a);
      }, ga.uniqueSort = function (a) {
        var b,
            d = [],
            e = 0,
            f = 0;if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
          while (b = a[f++]) {
            b === a[f] && (e = d.push(f));
          }while (e--) {
            a.splice(d[e], 1);
          }
        }return k = null, a;
      }, e = ga.getText = function (a) {
        var b,
            c = "",
            d = 0,
            f = a.nodeType;if (f) {
          if (1 === f || 9 === f || 11 === f) {
            if ("string" == typeof a.textContent) return a.textContent;for (a = a.firstChild; a; a = a.nextSibling) {
              c += e(a);
            }
          } else if (3 === f || 4 === f) return a.nodeValue;
        } else while (b = a[d++]) {
          c += e(b);
        }return c;
      }, d = ga.selectors = { cacheLength: 50, createPseudo: ia, match: V, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function ATTR(a) {
            return a[1] = a[1].replace(_, aa), a[3] = (a[3] || a[4] || a[5] || "").replace(_, aa), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
          }, CHILD: function CHILD(a) {
            return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && ga.error(a[0]), a;
          }, PSEUDO: function PSEUDO(a) {
            var b,
                c = !a[6] && a[2];return V.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && T.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));
          } }, filter: { TAG: function TAG(a) {
            var b = a.replace(_, aa).toLowerCase();return "*" === a ? function () {
              return !0;
            } : function (a) {
              return a.nodeName && a.nodeName.toLowerCase() === b;
            };
          }, CLASS: function CLASS(a) {
            var b = y[a + " "];return b || (b = new RegExp("(^|" + K + ")" + a + "(" + K + "|$)")) && y(a, function (a) {
              return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "");
            });
          }, ATTR: function ATTR(a, b, c) {
            return function (d) {
              var e = ga.attr(d, a);return null == e ? "!=" === b : !b || (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(O, " ") + " ").indexOf(c) > -1 : "|=" === b && (e === c || e.slice(0, c.length + 1) === c + "-"));
            };
          }, CHILD: function CHILD(a, b, c, d, e) {
            var f = "nth" !== a.slice(0, 3),
                g = "last" !== a.slice(-4),
                h = "of-type" === b;return 1 === d && 0 === e ? function (a) {
              return !!a.parentNode;
            } : function (b, c, i) {
              var j,
                  k,
                  l,
                  m,
                  n,
                  o,
                  p = f !== g ? "nextSibling" : "previousSibling",
                  q = b.parentNode,
                  r = h && b.nodeName.toLowerCase(),
                  s = !i && !h,
                  t = !1;if (q) {
                if (f) {
                  while (p) {
                    m = b;while (m = m[p]) {
                      if (h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) return !1;
                    }o = p = "only" === a && !o && "nextSibling";
                  }return !0;
                }if (o = [g ? q.firstChild : q.lastChild], g && s) {
                  m = q, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n && j[2], m = n && q.childNodes[n];while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {
                    if (1 === m.nodeType && ++t && m === b) {
                      k[a] = [w, n, t];break;
                    }
                  }
                } else if (s && (m = b, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n), t === !1) while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {
                  if ((h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) && ++t && (s && (l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), k[a] = [w, t]), m === b)) break;
                }return t -= e, t === d || t % d === 0 && t / d >= 0;
              }
            };
          }, PSEUDO: function PSEUDO(a, b) {
            var c,
                e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error("unsupported pseudo: " + a);return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function (a, c) {
              var d,
                  f = e(a, b),
                  g = f.length;while (g--) {
                d = I(a, f[g]), a[d] = !(c[d] = f[g]);
              }
            }) : function (a) {
              return e(a, 0, c);
            }) : e;
          } }, pseudos: { not: ia(function (a) {
            var b = [],
                c = [],
                d = h(a.replace(P, "$1"));return d[u] ? ia(function (a, b, c, e) {
              var f,
                  g = d(a, null, e, []),
                  h = a.length;while (h--) {
                (f = g[h]) && (a[h] = !(b[h] = f));
              }
            }) : function (a, e, f) {
              return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();
            };
          }), has: ia(function (a) {
            return function (b) {
              return ga(a, b).length > 0;
            };
          }), contains: ia(function (a) {
            return a = a.replace(_, aa), function (b) {
              return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
            };
          }), lang: ia(function (a) {
            return U.test(a || "") || ga.error("unsupported lang: " + a), a = a.replace(_, aa).toLowerCase(), function (b) {
              var c;do {
                if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-");
              } while ((b = b.parentNode) && 1 === b.nodeType);return !1;
            };
          }), target: function target(b) {
            var c = a.location && a.location.hash;return c && c.slice(1) === b.id;
          }, root: function root(a) {
            return a === o;
          }, focus: function focus(a) {
            return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
          }, enabled: oa(!1), disabled: oa(!0), checked: function checked(a) {
            var b = a.nodeName.toLowerCase();return "input" === b && !!a.checked || "option" === b && !!a.selected;
          }, selected: function selected(a) {
            return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
          }, empty: function empty(a) {
            for (a = a.firstChild; a; a = a.nextSibling) {
              if (a.nodeType < 6) return !1;
            }return !0;
          }, parent: function parent(a) {
            return !d.pseudos.empty(a);
          }, header: function header(a) {
            return X.test(a.nodeName);
          }, input: function input(a) {
            return W.test(a.nodeName);
          }, button: function button(a) {
            var b = a.nodeName.toLowerCase();return "input" === b && "button" === a.type || "button" === b;
          }, text: function text(a) {
            var b;return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
          }, first: pa(function () {
            return [0];
          }), last: pa(function (a, b) {
            return [b - 1];
          }), eq: pa(function (a, b, c) {
            return [c < 0 ? c + b : c];
          }), even: pa(function (a, b) {
            for (var c = 0; c < b; c += 2) {
              a.push(c);
            }return a;
          }), odd: pa(function (a, b) {
            for (var c = 1; c < b; c += 2) {
              a.push(c);
            }return a;
          }), lt: pa(function (a, b, c) {
            for (var d = c < 0 ? c + b : c; --d >= 0;) {
              a.push(d);
            }return a;
          }), gt: pa(function (a, b, c) {
            for (var d = c < 0 ? c + b : c; ++d < b;) {
              a.push(d);
            }return a;
          }) } }, d.pseudos.nth = d.pseudos.eq;for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) {
        d.pseudos[b] = ma(b);
      }for (b in { submit: !0, reset: !0 }) {
        d.pseudos[b] = na(b);
      }function ra() {}ra.prototype = d.filters = d.pseudos, d.setFilters = new ra(), g = ga.tokenize = function (a, b) {
        var c,
            e,
            f,
            g,
            h,
            i,
            j,
            k = z[a + " "];if (k) return b ? 0 : k.slice(0);h = a, i = [], j = d.preFilter;while (h) {
          c && !(e = Q.exec(h)) || (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = R.exec(h)) && (c = e.shift(), f.push({ value: c, type: e[0].replace(P, " ") }), h = h.slice(c.length));for (g in d.filter) {
            !(e = V[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({ value: c, type: g, matches: e }), h = h.slice(c.length));
          }if (!c) break;
        }return b ? h.length : h ? ga.error(a) : z(a, i).slice(0);
      };function sa(a) {
        for (var b = 0, c = a.length, d = ""; b < c; b++) {
          d += a[b].value;
        }return d;
      }function ta(a, b, c) {
        var d = b.dir,
            e = b.next,
            f = e || d,
            g = c && "parentNode" === f,
            h = x++;return b.first ? function (b, c, e) {
          while (b = b[d]) {
            if (1 === b.nodeType || g) return a(b, c, e);
          }return !1;
        } : function (b, c, i) {
          var j,
              k,
              l,
              m = [w, h];if (i) {
            while (b = b[d]) {
              if ((1 === b.nodeType || g) && a(b, c, i)) return !0;
            }
          } else while (b = b[d]) {
            if (1 === b.nodeType || g) if (l = b[u] || (b[u] = {}), k = l[b.uniqueID] || (l[b.uniqueID] = {}), e && e === b.nodeName.toLowerCase()) b = b[d] || b;else {
              if ((j = k[f]) && j[0] === w && j[1] === h) return m[2] = j[2];if (k[f] = m, m[2] = a(b, c, i)) return !0;
            }
          }return !1;
        };
      }function ua(a) {
        return a.length > 1 ? function (b, c, d) {
          var e = a.length;while (e--) {
            if (!a[e](b, c, d)) return !1;
          }return !0;
        } : a[0];
      }function va(a, b, c) {
        for (var d = 0, e = b.length; d < e; d++) {
          ga(a, b[d], c);
        }return c;
      }function wa(a, b, c, d, e) {
        for (var f, g = [], h = 0, i = a.length, j = null != b; h < i; h++) {
          (f = a[h]) && (c && !c(f, d, e) || (g.push(f), j && b.push(h)));
        }return g;
      }function xa(a, b, c, d, e, f) {
        return d && !d[u] && (d = xa(d)), e && !e[u] && (e = xa(e, f)), ia(function (f, g, h, i) {
          var j,
              k,
              l,
              m = [],
              n = [],
              o = g.length,
              p = f || va(b || "*", h.nodeType ? [h] : h, []),
              q = !a || !f && b ? p : wa(p, m, a, h, i),
              r = c ? e || (f ? a : o || d) ? [] : g : q;if (c && c(q, r, h, i), d) {
            j = wa(r, n), d(j, [], h, i), k = j.length;while (k--) {
              (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
            }
          }if (f) {
            if (e || a) {
              if (e) {
                j = [], k = r.length;while (k--) {
                  (l = r[k]) && j.push(q[k] = l);
                }e(null, r = [], j, i);
              }k = r.length;while (k--) {
                (l = r[k]) && (j = e ? I(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
              }
            }
          } else r = wa(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : G.apply(g, r);
        });
      }function ya(a) {
        for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = ta(function (a) {
          return a === b;
        }, h, !0), l = ta(function (a) {
          return I(b, a) > -1;
        }, h, !0), m = [function (a, c, d) {
          var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));return b = null, e;
        }]; i < f; i++) {
          if (c = d.relative[a[i].type]) m = [ta(ua(m), c)];else {
            if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
              for (e = ++i; e < f; e++) {
                if (d.relative[a[e].type]) break;
              }return xa(i > 1 && ua(m), i > 1 && sa(a.slice(0, i - 1).concat({ value: " " === a[i - 2].type ? "*" : "" })).replace(P, "$1"), c, i < e && ya(a.slice(i, e)), e < f && ya(a = a.slice(e)), e < f && sa(a));
            }m.push(c);
          }
        }return ua(m);
      }function za(a, b) {
        var c = b.length > 0,
            e = a.length > 0,
            f = function f(_f, g, h, i, k) {
          var l,
              o,
              q,
              r = 0,
              s = "0",
              t = _f && [],
              u = [],
              v = j,
              x = _f || e && d.find.TAG("*", k),
              y = w += null == v ? 1 : Math.random() || .1,
              z = x.length;for (k && (j = g === n || g || k); s !== z && null != (l = x[s]); s++) {
            if (e && l) {
              o = 0, g || l.ownerDocument === n || (m(l), h = !p);while (q = a[o++]) {
                if (q(l, g || n, h)) {
                  i.push(l);break;
                }
              }k && (w = y);
            }c && ((l = !q && l) && r--, _f && t.push(l));
          }if (r += s, c && s !== r) {
            o = 0;while (q = b[o++]) {
              q(t, u, g, h);
            }if (_f) {
              if (r > 0) while (s--) {
                t[s] || u[s] || (u[s] = E.call(i));
              }u = wa(u);
            }G.apply(i, u), k && !_f && u.length > 0 && r + b.length > 1 && ga.uniqueSort(i);
          }return k && (w = y, j = v), t;
        };return c ? ia(f) : f;
      }return h = ga.compile = function (a, b) {
        var c,
            d = [],
            e = [],
            f = A[a + " "];if (!f) {
          b || (b = g(a)), c = b.length;while (c--) {
            f = ya(b[c]), f[u] ? d.push(f) : e.push(f);
          }f = A(a, za(e, d)), f.selector = a;
        }return f;
      }, i = ga.select = function (a, b, c, e) {
        var f,
            i,
            j,
            k,
            l,
            m = "function" == typeof a && a,
            n = !e && g(a = m.selector || a);if (c = c || [], 1 === n.length) {
          if (i = n[0] = n[0].slice(0), i.length > 2 && "ID" === (j = i[0]).type && 9 === b.nodeType && p && d.relative[i[1].type]) {
            if (b = (d.find.ID(j.matches[0].replace(_, aa), b) || [])[0], !b) return c;m && (b = b.parentNode), a = a.slice(i.shift().value.length);
          }f = V.needsContext.test(a) ? 0 : i.length;while (f--) {
            if (j = i[f], d.relative[k = j.type]) break;if ((l = d.find[k]) && (e = l(j.matches[0].replace(_, aa), $.test(i[0].type) && qa(b.parentNode) || b))) {
              if (i.splice(f, 1), a = e.length && sa(i), !a) return G.apply(c, e), c;break;
            }
          }
        }return (m || h(a, n))(e, b, !p, c, !b || $.test(a) && qa(b.parentNode) || b), c;
      }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ja(function (a) {
        return 1 & a.compareDocumentPosition(n.createElement("fieldset"));
      }), ja(function (a) {
        return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");
      }) || ka("type|href|height|width", function (a, b, c) {
        if (!c) return a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
      }), c.attributes && ja(function (a) {
        return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
      }) || ka("value", function (a, b, c) {
        if (!c && "input" === a.nodeName.toLowerCase()) return a.defaultValue;
      }), ja(function (a) {
        return null == a.getAttribute("disabled");
      }) || ka(J, function (a, b, c) {
        var d;if (!c) return a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
      }), ga;
    }(a);r.find = x, r.expr = x.selectors, r.expr[":"] = r.expr.pseudos, r.uniqueSort = r.unique = x.uniqueSort, r.text = x.getText, r.isXMLDoc = x.isXML, r.contains = x.contains, r.escapeSelector = x.escape;var y = function y(a, b, c) {
      var d = [],
          e = void 0 !== c;while ((a = a[b]) && 9 !== a.nodeType) {
        if (1 === a.nodeType) {
          if (e && r(a).is(c)) break;d.push(a);
        }
      }return d;
    },
        z = function z(a, b) {
      for (var c = []; a; a = a.nextSibling) {
        1 === a.nodeType && a !== b && c.push(a);
      }return c;
    },
        A = r.expr.match.needsContext;function B(a, b) {
      return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
    }var C = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,
        D = /^.[^:#\[\.,]*$/;function E(a, b, c) {
      return r.isFunction(b) ? r.grep(a, function (a, d) {
        return !!b.call(a, d, a) !== c;
      }) : b.nodeType ? r.grep(a, function (a) {
        return a === b !== c;
      }) : "string" != typeof b ? r.grep(a, function (a) {
        return i.call(b, a) > -1 !== c;
      }) : D.test(b) ? r.filter(b, a, c) : (b = r.filter(b, a), r.grep(a, function (a) {
        return i.call(b, a) > -1 !== c && 1 === a.nodeType;
      }));
    }r.filter = function (a, b, c) {
      var d = b[0];return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? r.find.matchesSelector(d, a) ? [d] : [] : r.find.matches(a, r.grep(b, function (a) {
        return 1 === a.nodeType;
      }));
    }, r.fn.extend({ find: function find(a) {
        var b,
            c,
            d = this.length,
            e = this;if ("string" != typeof a) return this.pushStack(r(a).filter(function () {
          for (b = 0; b < d; b++) {
            if (r.contains(e[b], this)) return !0;
          }
        }));for (c = this.pushStack([]), b = 0; b < d; b++) {
          r.find(a, e[b], c);
        }return d > 1 ? r.uniqueSort(c) : c;
      }, filter: function filter(a) {
        return this.pushStack(E(this, a || [], !1));
      }, not: function not(a) {
        return this.pushStack(E(this, a || [], !0));
      }, is: function is(a) {
        return !!E(this, "string" == typeof a && A.test(a) ? r(a) : a || [], !1).length;
      } });var F,
        G = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
        H = r.fn.init = function (a, b, c) {
      var e, f;if (!a) return this;if (c = c || F, "string" == typeof a) {
        if (e = "<" === a[0] && ">" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : G.exec(a), !e || !e[1] && b) return !b || b.jquery ? (b || c).find(a) : this.constructor(b).find(a);if (e[1]) {
          if (b = b instanceof r ? b[0] : b, r.merge(this, r.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : d, !0)), C.test(e[1]) && r.isPlainObject(b)) for (e in b) {
            r.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e]);
          }return this;
        }return f = d.getElementById(e[2]), f && (this[0] = f, this.length = 1), this;
      }return a.nodeType ? (this[0] = a, this.length = 1, this) : r.isFunction(a) ? void 0 !== c.ready ? c.ready(a) : a(r) : r.makeArray(a, this);
    };H.prototype = r.fn, F = r(d);var I = /^(?:parents|prev(?:Until|All))/,
        J = { children: !0, contents: !0, next: !0, prev: !0 };r.fn.extend({ has: function has(a) {
        var b = r(a, this),
            c = b.length;return this.filter(function () {
          for (var a = 0; a < c; a++) {
            if (r.contains(this, b[a])) return !0;
          }
        });
      }, closest: function closest(a, b) {
        var c,
            d = 0,
            e = this.length,
            f = [],
            g = "string" != typeof a && r(a);if (!A.test(a)) for (; d < e; d++) {
          for (c = this[d]; c && c !== b; c = c.parentNode) {
            if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && r.find.matchesSelector(c, a))) {
              f.push(c);break;
            }
          }
        }return this.pushStack(f.length > 1 ? r.uniqueSort(f) : f);
      }, index: function index(a) {
        return a ? "string" == typeof a ? i.call(r(a), this[0]) : i.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }, add: function add(a, b) {
        return this.pushStack(r.uniqueSort(r.merge(this.get(), r(a, b))));
      }, addBack: function addBack(a) {
        return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
      } });function K(a, b) {
      while ((a = a[b]) && 1 !== a.nodeType) {}return a;
    }r.each({ parent: function parent(a) {
        var b = a.parentNode;return b && 11 !== b.nodeType ? b : null;
      }, parents: function parents(a) {
        return y(a, "parentNode");
      }, parentsUntil: function parentsUntil(a, b, c) {
        return y(a, "parentNode", c);
      }, next: function next(a) {
        return K(a, "nextSibling");
      }, prev: function prev(a) {
        return K(a, "previousSibling");
      }, nextAll: function nextAll(a) {
        return y(a, "nextSibling");
      }, prevAll: function prevAll(a) {
        return y(a, "previousSibling");
      }, nextUntil: function nextUntil(a, b, c) {
        return y(a, "nextSibling", c);
      }, prevUntil: function prevUntil(a, b, c) {
        return y(a, "previousSibling", c);
      }, siblings: function siblings(a) {
        return z((a.parentNode || {}).firstChild, a);
      }, children: function children(a) {
        return z(a.firstChild);
      }, contents: function contents(a) {
        return B(a, "iframe") ? a.contentDocument : (B(a, "template") && (a = a.content || a), r.merge([], a.childNodes));
      } }, function (a, b) {
      r.fn[a] = function (c, d) {
        var e = r.map(this, b, c);return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = r.filter(d, e)), this.length > 1 && (J[a] || r.uniqueSort(e), I.test(a) && e.reverse()), this.pushStack(e);
      };
    });var L = /[^\x20\t\r\n\f]+/g;function M(a) {
      var b = {};return r.each(a.match(L) || [], function (a, c) {
        b[c] = !0;
      }), b;
    }r.Callbacks = function (a) {
      a = "string" == typeof a ? M(a) : r.extend({}, a);var b,
          c,
          d,
          e,
          f = [],
          g = [],
          h = -1,
          i = function i() {
        for (e = e || a.once, d = b = !0; g.length; h = -1) {
          c = g.shift();while (++h < f.length) {
            f[h].apply(c[0], c[1]) === !1 && a.stopOnFalse && (h = f.length, c = !1);
          }
        }a.memory || (c = !1), b = !1, e && (f = c ? [] : "");
      },
          j = { add: function add() {
          return f && (c && !b && (h = f.length - 1, g.push(c)), function d(b) {
            r.each(b, function (b, c) {
              r.isFunction(c) ? a.unique && j.has(c) || f.push(c) : c && c.length && "string" !== r.type(c) && d(c);
            });
          }(arguments), c && !b && i()), this;
        }, remove: function remove() {
          return r.each(arguments, function (a, b) {
            var c;while ((c = r.inArray(b, f, c)) > -1) {
              f.splice(c, 1), c <= h && h--;
            }
          }), this;
        }, has: function has(a) {
          return a ? r.inArray(a, f) > -1 : f.length > 0;
        }, empty: function empty() {
          return f && (f = []), this;
        }, disable: function disable() {
          return e = g = [], f = c = "", this;
        }, disabled: function disabled() {
          return !f;
        }, lock: function lock() {
          return e = g = [], c || b || (f = c = ""), this;
        }, locked: function locked() {
          return !!e;
        }, fireWith: function fireWith(a, c) {
          return e || (c = c || [], c = [a, c.slice ? c.slice() : c], g.push(c), b || i()), this;
        }, fire: function fire() {
          return j.fireWith(this, arguments), this;
        }, fired: function fired() {
          return !!d;
        } };return j;
    };function N(a) {
      return a;
    }function O(a) {
      throw a;
    }function P(a, b, c, d) {
      var e;try {
        a && r.isFunction(e = a.promise) ? e.call(a).done(b).fail(c) : a && r.isFunction(e = a.then) ? e.call(a, b, c) : b.apply(void 0, [a].slice(d));
      } catch (a) {
        c.apply(void 0, [a]);
      }
    }r.extend({ Deferred: function Deferred(b) {
        var c = [["notify", "progress", r.Callbacks("memory"), r.Callbacks("memory"), 2], ["resolve", "done", r.Callbacks("once memory"), r.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", r.Callbacks("once memory"), r.Callbacks("once memory"), 1, "rejected"]],
            d = "pending",
            e = { state: function state() {
            return d;
          }, always: function always() {
            return f.done(arguments).fail(arguments), this;
          }, "catch": function _catch(a) {
            return e.then(null, a);
          }, pipe: function pipe() {
            var a = arguments;return r.Deferred(function (b) {
              r.each(c, function (c, d) {
                var e = r.isFunction(a[d[4]]) && a[d[4]];f[d[1]](function () {
                  var a = e && e.apply(this, arguments);a && r.isFunction(a.promise) ? a.promise().progress(b.notify).done(b.resolve).fail(b.reject) : b[d[0] + "With"](this, e ? [a] : arguments);
                });
              }), a = null;
            }).promise();
          }, then: function then(b, d, e) {
            var f = 0;function g(b, c, d, e) {
              return function () {
                var h = this,
                    i = arguments,
                    j = function j() {
                  var a, j;if (!(b < f)) {
                    if (a = d.apply(h, i), a === c.promise()) throw new TypeError("Thenable self-resolution");j = a && ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) || "function" == typeof a) && a.then, r.isFunction(j) ? e ? j.call(a, g(f, c, N, e), g(f, c, O, e)) : (f++, j.call(a, g(f, c, N, e), g(f, c, O, e), g(f, c, N, c.notifyWith))) : (d !== N && (h = void 0, i = [a]), (e || c.resolveWith)(h, i));
                  }
                },
                    k = e ? j : function () {
                  try {
                    j();
                  } catch (a) {
                    r.Deferred.exceptionHook && r.Deferred.exceptionHook(a, k.stackTrace), b + 1 >= f && (d !== O && (h = void 0, i = [a]), c.rejectWith(h, i));
                  }
                };b ? k() : (r.Deferred.getStackHook && (k.stackTrace = r.Deferred.getStackHook()), a.setTimeout(k));
              };
            }return r.Deferred(function (a) {
              c[0][3].add(g(0, a, r.isFunction(e) ? e : N, a.notifyWith)), c[1][3].add(g(0, a, r.isFunction(b) ? b : N)), c[2][3].add(g(0, a, r.isFunction(d) ? d : O));
            }).promise();
          }, promise: function promise(a) {
            return null != a ? r.extend(a, e) : e;
          } },
            f = {};return r.each(c, function (a, b) {
          var g = b[2],
              h = b[5];e[b[1]] = g.add, h && g.add(function () {
            d = h;
          }, c[3 - a][2].disable, c[0][2].lock), g.add(b[3].fire), f[b[0]] = function () {
            return f[b[0] + "With"](this === f ? void 0 : this, arguments), this;
          }, f[b[0] + "With"] = g.fireWith;
        }), e.promise(f), b && b.call(f, f), f;
      }, when: function when(a) {
        var b = arguments.length,
            c = b,
            d = Array(c),
            e = f.call(arguments),
            g = r.Deferred(),
            h = function h(a) {
          return function (c) {
            d[a] = this, e[a] = arguments.length > 1 ? f.call(arguments) : c, --b || g.resolveWith(d, e);
          };
        };if (b <= 1 && (P(a, g.done(h(c)).resolve, g.reject, !b), "pending" === g.state() || r.isFunction(e[c] && e[c].then))) return g.then();while (c--) {
          P(e[c], h(c), g.reject);
        }return g.promise();
      } });var Q = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;r.Deferred.exceptionHook = function (b, c) {
      a.console && a.console.warn && b && Q.test(b.name) && a.console.warn("jQuery.Deferred exception: " + b.message, b.stack, c);
    }, r.readyException = function (b) {
      a.setTimeout(function () {
        throw b;
      });
    };var R = r.Deferred();r.fn.ready = function (a) {
      return R.then(a)["catch"](function (a) {
        r.readyException(a);
      }), this;
    }, r.extend({ isReady: !1, readyWait: 1, ready: function ready(a) {
        (a === !0 ? --r.readyWait : r.isReady) || (r.isReady = !0, a !== !0 && --r.readyWait > 0 || R.resolveWith(d, [r]));
      } }), r.ready.then = R.then;function S() {
      d.removeEventListener("DOMContentLoaded", S), a.removeEventListener("load", S), r.ready();
    }"complete" === d.readyState || "loading" !== d.readyState && !d.documentElement.doScroll ? a.setTimeout(r.ready) : (d.addEventListener("DOMContentLoaded", S), a.addEventListener("load", S));var T = function T(a, b, c, d, e, f, g) {
      var h = 0,
          i = a.length,
          j = null == c;if ("object" === r.type(c)) {
        e = !0;for (h in c) {
          T(a, b, h, c[h], !0, f, g);
        }
      } else if (void 0 !== d && (e = !0, r.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b, c) {
        return j.call(r(a), c);
      })), b)) for (; h < i; h++) {
        b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
      }return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
    },
        U = function U(a) {
      return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;
    };function V() {
      this.expando = r.expando + V.uid++;
    }V.uid = 1, V.prototype = { cache: function cache(a) {
        var b = a[this.expando];return b || (b = {}, U(a) && (a.nodeType ? a[this.expando] = b : Object.defineProperty(a, this.expando, { value: b, configurable: !0 }))), b;
      }, set: function set(a, b, c) {
        var d,
            e = this.cache(a);if ("string" == typeof b) e[r.camelCase(b)] = c;else for (d in b) {
          e[r.camelCase(d)] = b[d];
        }return e;
      }, get: function get(a, b) {
        return void 0 === b ? this.cache(a) : a[this.expando] && a[this.expando][r.camelCase(b)];
      }, access: function access(a, b, c) {
        return void 0 === b || b && "string" == typeof b && void 0 === c ? this.get(a, b) : (this.set(a, b, c), void 0 !== c ? c : b);
      }, remove: function remove(a, b) {
        var c,
            d = a[this.expando];if (void 0 !== d) {
          if (void 0 !== b) {
            Array.isArray(b) ? b = b.map(r.camelCase) : (b = r.camelCase(b), b = b in d ? [b] : b.match(L) || []), c = b.length;while (c--) {
              delete d[b[c]];
            }
          }(void 0 === b || r.isEmptyObject(d)) && (a.nodeType ? a[this.expando] = void 0 : delete a[this.expando]);
        }
      }, hasData: function hasData(a) {
        var b = a[this.expando];return void 0 !== b && !r.isEmptyObject(b);
      } };var W = new V(),
        X = new V(),
        Y = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        Z = /[A-Z]/g;function $(a) {
      return "true" === a || "false" !== a && ("null" === a ? null : a === +a + "" ? +a : Y.test(a) ? JSON.parse(a) : a);
    }function _(a, b, c) {
      var d;if (void 0 === c && 1 === a.nodeType) if (d = "data-" + b.replace(Z, "-$&").toLowerCase(), c = a.getAttribute(d), "string" == typeof c) {
        try {
          c = $(c);
        } catch (e) {}X.set(a, b, c);
      } else c = void 0;return c;
    }r.extend({ hasData: function hasData(a) {
        return X.hasData(a) || W.hasData(a);
      }, data: function data(a, b, c) {
        return X.access(a, b, c);
      }, removeData: function removeData(a, b) {
        X.remove(a, b);
      }, _data: function _data(a, b, c) {
        return W.access(a, b, c);
      }, _removeData: function _removeData(a, b) {
        W.remove(a, b);
      } }), r.fn.extend({ data: function data(a, b) {
        var c,
            d,
            e,
            f = this[0],
            g = f && f.attributes;if (void 0 === a) {
          if (this.length && (e = X.get(f), 1 === f.nodeType && !W.get(f, "hasDataAttrs"))) {
            c = g.length;while (c--) {
              g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = r.camelCase(d.slice(5)), _(f, d, e[d])));
            }W.set(f, "hasDataAttrs", !0);
          }return e;
        }return "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) ? this.each(function () {
          X.set(this, a);
        }) : T(this, function (b) {
          var c;if (f && void 0 === b) {
            if (c = X.get(f, a), void 0 !== c) return c;if (c = _(f, a), void 0 !== c) return c;
          } else this.each(function () {
            X.set(this, a, b);
          });
        }, null, b, arguments.length > 1, null, !0);
      }, removeData: function removeData(a) {
        return this.each(function () {
          X.remove(this, a);
        });
      } }), r.extend({ queue: function queue(a, b, c) {
        var d;if (a) return b = (b || "fx") + "queue", d = W.get(a, b), c && (!d || Array.isArray(c) ? d = W.access(a, b, r.makeArray(c)) : d.push(c)), d || [];
      }, dequeue: function dequeue(a, b) {
        b = b || "fx";var c = r.queue(a, b),
            d = c.length,
            e = c.shift(),
            f = r._queueHooks(a, b),
            g = function g() {
          r.dequeue(a, b);
        };"inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
      }, _queueHooks: function _queueHooks(a, b) {
        var c = b + "queueHooks";return W.get(a, c) || W.access(a, c, { empty: r.Callbacks("once memory").add(function () {
            W.remove(a, [b + "queue", c]);
          }) });
      } }), r.fn.extend({ queue: function queue(a, b) {
        var c = 2;return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? r.queue(this[0], a) : void 0 === b ? this : this.each(function () {
          var c = r.queue(this, a, b);r._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && r.dequeue(this, a);
        });
      }, dequeue: function dequeue(a) {
        return this.each(function () {
          r.dequeue(this, a);
        });
      }, clearQueue: function clearQueue(a) {
        return this.queue(a || "fx", []);
      }, promise: function promise(a, b) {
        var c,
            d = 1,
            e = r.Deferred(),
            f = this,
            g = this.length,
            h = function h() {
          --d || e.resolveWith(f, [f]);
        };"string" != typeof a && (b = a, a = void 0), a = a || "fx";while (g--) {
          c = W.get(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
        }return h(), e.promise(b);
      } });var aa = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        ba = new RegExp("^(?:([+-])=|)(" + aa + ")([a-z%]*)$", "i"),
        ca = ["Top", "Right", "Bottom", "Left"],
        da = function da(a, b) {
      return a = b || a, "none" === a.style.display || "" === a.style.display && r.contains(a.ownerDocument, a) && "none" === r.css(a, "display");
    },
        ea = function ea(a, b, c, d) {
      var e,
          f,
          g = {};for (f in b) {
        g[f] = a.style[f], a.style[f] = b[f];
      }e = c.apply(a, d || []);for (f in b) {
        a.style[f] = g[f];
      }return e;
    };function fa(a, b, c, d) {
      var e,
          f = 1,
          g = 20,
          h = d ? function () {
        return d.cur();
      } : function () {
        return r.css(a, b, "");
      },
          i = h(),
          j = c && c[3] || (r.cssNumber[b] ? "" : "px"),
          k = (r.cssNumber[b] || "px" !== j && +i) && ba.exec(r.css(a, b));if (k && k[3] !== j) {
        j = j || k[3], c = c || [], k = +i || 1;do {
          f = f || ".5", k /= f, r.style(a, b, k + j);
        } while (f !== (f = h() / i) && 1 !== f && --g);
      }return c && (k = +k || +i || 0, e = c[1] ? k + (c[1] + 1) * c[2] : +c[2], d && (d.unit = j, d.start = k, d.end = e)), e;
    }var ga = {};function ha(a) {
      var b,
          c = a.ownerDocument,
          d = a.nodeName,
          e = ga[d];return e ? e : (b = c.body.appendChild(c.createElement(d)), e = r.css(b, "display"), b.parentNode.removeChild(b), "none" === e && (e = "block"), ga[d] = e, e);
    }function ia(a, b) {
      for (var c, d, e = [], f = 0, g = a.length; f < g; f++) {
        d = a[f], d.style && (c = d.style.display, b ? ("none" === c && (e[f] = W.get(d, "display") || null, e[f] || (d.style.display = "")), "" === d.style.display && da(d) && (e[f] = ha(d))) : "none" !== c && (e[f] = "none", W.set(d, "display", c)));
      }for (f = 0; f < g; f++) {
        null != e[f] && (a[f].style.display = e[f]);
      }return a;
    }r.fn.extend({ show: function show() {
        return ia(this, !0);
      }, hide: function hide() {
        return ia(this);
      }, toggle: function toggle(a) {
        return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () {
          da(this) ? r(this).show() : r(this).hide();
        });
      } });var ja = /^(?:checkbox|radio)$/i,
        ka = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
        la = /^$|\/(?:java|ecma)script/i,
        ma = { option: [1, "<select multiple='multiple'>", "</select>"], thead: [1, "<table>", "</table>"], col: [2, "<table><colgroup>", "</colgroup></table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: [0, "", ""] };ma.optgroup = ma.option, ma.tbody = ma.tfoot = ma.colgroup = ma.caption = ma.thead, ma.th = ma.td;function na(a, b) {
      var c;return c = "undefined" != typeof a.getElementsByTagName ? a.getElementsByTagName(b || "*") : "undefined" != typeof a.querySelectorAll ? a.querySelectorAll(b || "*") : [], void 0 === b || b && B(a, b) ? r.merge([a], c) : c;
    }function oa(a, b) {
      for (var c = 0, d = a.length; c < d; c++) {
        W.set(a[c], "globalEval", !b || W.get(b[c], "globalEval"));
      }
    }var pa = /<|&#?\w+;/;function qa(a, b, c, d, e) {
      for (var f, g, h, i, j, k, l = b.createDocumentFragment(), m = [], n = 0, o = a.length; n < o; n++) {
        if (f = a[n], f || 0 === f) if ("object" === r.type(f)) r.merge(m, f.nodeType ? [f] : f);else if (pa.test(f)) {
          g = g || l.appendChild(b.createElement("div")), h = (ka.exec(f) || ["", ""])[1].toLowerCase(), i = ma[h] || ma._default, g.innerHTML = i[1] + r.htmlPrefilter(f) + i[2], k = i[0];while (k--) {
            g = g.lastChild;
          }r.merge(m, g.childNodes), g = l.firstChild, g.textContent = "";
        } else m.push(b.createTextNode(f));
      }l.textContent = "", n = 0;while (f = m[n++]) {
        if (d && r.inArray(f, d) > -1) e && e.push(f);else if (j = r.contains(f.ownerDocument, f), g = na(l.appendChild(f), "script"), j && oa(g), c) {
          k = 0;while (f = g[k++]) {
            la.test(f.type || "") && c.push(f);
          }
        }
      }return l;
    }!function () {
      var a = d.createDocumentFragment(),
          b = a.appendChild(d.createElement("div")),
          c = d.createElement("input");c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), b.appendChild(c), o.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = "<textarea>x</textarea>", o.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;
    }();var ra = d.documentElement,
        sa = /^key/,
        ta = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        ua = /^([^.]*)(?:\.(.+)|)/;function va() {
      return !0;
    }function wa() {
      return !1;
    }function xa() {
      try {
        return d.activeElement;
      } catch (a) {}
    }function ya(a, b, c, d, e, f) {
      var g, h;if ("object" == (typeof b === "undefined" ? "undefined" : _typeof(b))) {
        "string" != typeof c && (d = d || c, c = void 0);for (h in b) {
          ya(a, h, c, d, b[h], f);
        }return a;
      }if (null == d && null == e ? (e = c, d = c = void 0) : null == e && ("string" == typeof c ? (e = d, d = void 0) : (e = d, d = c, c = void 0)), e === !1) e = wa;else if (!e) return a;return 1 === f && (g = e, e = function e(a) {
        return r().off(a), g.apply(this, arguments);
      }, e.guid = g.guid || (g.guid = r.guid++)), a.each(function () {
        r.event.add(this, b, e, d, c);
      });
    }r.event = { global: {}, add: function add(a, b, c, d, e) {
        var f,
            g,
            h,
            i,
            j,
            k,
            l,
            m,
            n,
            o,
            p,
            q = W.get(a);if (q) {
          c.handler && (f = c, c = f.handler, e = f.selector), e && r.find.matchesSelector(ra, e), c.guid || (c.guid = r.guid++), (i = q.events) || (i = q.events = {}), (g = q.handle) || (g = q.handle = function (b) {
            return "undefined" != typeof r && r.event.triggered !== b.type ? r.event.dispatch.apply(a, arguments) : void 0;
          }), b = (b || "").match(L) || [""], j = b.length;while (j--) {
            h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n && (l = r.event.special[n] || {}, n = (e ? l.delegateType : l.bindType) || n, l = r.event.special[n] || {}, k = r.extend({ type: n, origType: p, data: d, handler: c, guid: c.guid, selector: e, needsContext: e && r.expr.match.needsContext.test(e), namespace: o.join(".") }, f), (m = i[n]) || (m = i[n] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, o, g) !== !1 || a.addEventListener && a.addEventListener(n, g)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), r.event.global[n] = !0);
          }
        }
      }, remove: function remove(a, b, c, d, e) {
        var f,
            g,
            h,
            i,
            j,
            k,
            l,
            m,
            n,
            o,
            p,
            q = W.hasData(a) && W.get(a);if (q && (i = q.events)) {
          b = (b || "").match(L) || [""], j = b.length;while (j--) {
            if (h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n) {
              l = r.event.special[n] || {}, n = (d ? l.delegateType : l.bindType) || n, m = i[n] || [], h = h[2] && new RegExp("(^|\\.)" + o.join("\\.(?:.*\\.|)") + "(\\.|$)"), g = f = m.length;while (f--) {
                k = m[f], !e && p !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && ("**" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));
              }g && !m.length && (l.teardown && l.teardown.call(a, o, q.handle) !== !1 || r.removeEvent(a, n, q.handle), delete i[n]);
            } else for (n in i) {
              r.event.remove(a, n + b[j], c, d, !0);
            }
          }r.isEmptyObject(i) && W.remove(a, "handle events");
        }
      }, dispatch: function dispatch(a) {
        var b = r.event.fix(a),
            c,
            d,
            e,
            f,
            g,
            h,
            i = new Array(arguments.length),
            j = (W.get(this, "events") || {})[b.type] || [],
            k = r.event.special[b.type] || {};for (i[0] = b, c = 1; c < arguments.length; c++) {
          i[c] = arguments[c];
        }if (b.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, b) !== !1) {
          h = r.event.handlers.call(this, b, j), c = 0;while ((f = h[c++]) && !b.isPropagationStopped()) {
            b.currentTarget = f.elem, d = 0;while ((g = f.handlers[d++]) && !b.isImmediatePropagationStopped()) {
              b.rnamespace && !b.rnamespace.test(g.namespace) || (b.handleObj = g, b.data = g.data, e = ((r.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (b.result = e) === !1 && (b.preventDefault(), b.stopPropagation()));
            }
          }return k.postDispatch && k.postDispatch.call(this, b), b.result;
        }
      }, handlers: function handlers(a, b) {
        var c,
            d,
            e,
            f,
            g,
            h = [],
            i = b.delegateCount,
            j = a.target;if (i && j.nodeType && !("click" === a.type && a.button >= 1)) for (; j !== this; j = j.parentNode || this) {
          if (1 === j.nodeType && ("click" !== a.type || j.disabled !== !0)) {
            for (f = [], g = {}, c = 0; c < i; c++) {
              d = b[c], e = d.selector + " ", void 0 === g[e] && (g[e] = d.needsContext ? r(e, this).index(j) > -1 : r.find(e, this, null, [j]).length), g[e] && f.push(d);
            }f.length && h.push({ elem: j, handlers: f });
          }
        }return j = this, i < b.length && h.push({ elem: j, handlers: b.slice(i) }), h;
      }, addProp: function addProp(a, b) {
        Object.defineProperty(r.Event.prototype, a, { enumerable: !0, configurable: !0, get: r.isFunction(b) ? function () {
            if (this.originalEvent) return b(this.originalEvent);
          } : function () {
            if (this.originalEvent) return this.originalEvent[a];
          }, set: function set(b) {
            Object.defineProperty(this, a, { enumerable: !0, configurable: !0, writable: !0, value: b });
          } });
      }, fix: function fix(a) {
        return a[r.expando] ? a : new r.Event(a);
      }, special: { load: { noBubble: !0 }, focus: { trigger: function trigger() {
            if (this !== xa() && this.focus) return this.focus(), !1;
          }, delegateType: "focusin" }, blur: { trigger: function trigger() {
            if (this === xa() && this.blur) return this.blur(), !1;
          }, delegateType: "focusout" }, click: { trigger: function trigger() {
            if ("checkbox" === this.type && this.click && B(this, "input")) return this.click(), !1;
          }, _default: function _default(a) {
            return B(a.target, "a");
          } }, beforeunload: { postDispatch: function postDispatch(a) {
            void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
          } } } }, r.removeEvent = function (a, b, c) {
      a.removeEventListener && a.removeEventListener(b, c);
    }, r.Event = function (a, b) {
      return this instanceof r.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? va : wa, this.target = a.target && 3 === a.target.nodeType ? a.target.parentNode : a.target, this.currentTarget = a.currentTarget, this.relatedTarget = a.relatedTarget) : this.type = a, b && r.extend(this, b), this.timeStamp = a && a.timeStamp || r.now(), void (this[r.expando] = !0)) : new r.Event(a, b);
    }, r.Event.prototype = { constructor: r.Event, isDefaultPrevented: wa, isPropagationStopped: wa, isImmediatePropagationStopped: wa, isSimulated: !1, preventDefault: function preventDefault() {
        var a = this.originalEvent;this.isDefaultPrevented = va, a && !this.isSimulated && a.preventDefault();
      }, stopPropagation: function stopPropagation() {
        var a = this.originalEvent;this.isPropagationStopped = va, a && !this.isSimulated && a.stopPropagation();
      }, stopImmediatePropagation: function stopImmediatePropagation() {
        var a = this.originalEvent;this.isImmediatePropagationStopped = va, a && !this.isSimulated && a.stopImmediatePropagation(), this.stopPropagation();
      } }, r.each({ altKey: !0, bubbles: !0, cancelable: !0, changedTouches: !0, ctrlKey: !0, detail: !0, eventPhase: !0, metaKey: !0, pageX: !0, pageY: !0, shiftKey: !0, view: !0, "char": !0, charCode: !0, key: !0, keyCode: !0, button: !0, buttons: !0, clientX: !0, clientY: !0, offsetX: !0, offsetY: !0, pointerId: !0, pointerType: !0, screenX: !0, screenY: !0, targetTouches: !0, toElement: !0, touches: !0, which: function which(a) {
        var b = a.button;return null == a.which && sa.test(a.type) ? null != a.charCode ? a.charCode : a.keyCode : !a.which && void 0 !== b && ta.test(a.type) ? 1 & b ? 1 : 2 & b ? 3 : 4 & b ? 2 : 0 : a.which;
      } }, r.event.addProp), r.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (a, b) {
      r.event.special[a] = { delegateType: b, bindType: b, handle: function handle(a) {
          var c,
              d = this,
              e = a.relatedTarget,
              f = a.handleObj;return e && (e === d || r.contains(d, e)) || (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;
        } };
    }), r.fn.extend({ on: function on(a, b, c, d) {
        return ya(this, a, b, c, d);
      }, one: function one(a, b, c, d) {
        return ya(this, a, b, c, d, 1);
      }, off: function off(a, b, c) {
        var d, e;if (a && a.preventDefault && a.handleObj) return d = a.handleObj, r(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) {
          for (e in a) {
            this.off(e, b, a[e]);
          }return this;
        }return b !== !1 && "function" != typeof b || (c = b, b = void 0), c === !1 && (c = wa), this.each(function () {
          r.event.remove(this, a, c, b);
        });
      } });var za = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
        Aa = /<script|<style|<link/i,
        Ba = /checked\s*(?:[^=]|=\s*.checked.)/i,
        Ca = /^true\/(.*)/,
        Da = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ea(a, b) {
      return B(a, "table") && B(11 !== b.nodeType ? b : b.firstChild, "tr") ? r(">tbody", a)[0] || a : a;
    }function Fa(a) {
      return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a;
    }function Ga(a) {
      var b = Ca.exec(a.type);return b ? a.type = b[1] : a.removeAttribute("type"), a;
    }function Ha(a, b) {
      var c, d, e, f, g, h, i, j;if (1 === b.nodeType) {
        if (W.hasData(a) && (f = W.access(a), g = W.set(b, f), j = f.events)) {
          delete g.handle, g.events = {};for (e in j) {
            for (c = 0, d = j[e].length; c < d; c++) {
              r.event.add(b, e, j[e][c]);
            }
          }
        }X.hasData(a) && (h = X.access(a), i = r.extend({}, h), X.set(b, i));
      }
    }function Ia(a, b) {
      var c = b.nodeName.toLowerCase();"input" === c && ja.test(a.type) ? b.checked = a.checked : "input" !== c && "textarea" !== c || (b.defaultValue = a.defaultValue);
    }function Ja(a, b, c, d) {
      b = g.apply([], b);var e,
          f,
          h,
          i,
          j,
          k,
          l = 0,
          m = a.length,
          n = m - 1,
          q = b[0],
          s = r.isFunction(q);if (s || m > 1 && "string" == typeof q && !o.checkClone && Ba.test(q)) return a.each(function (e) {
        var f = a.eq(e);s && (b[0] = q.call(this, e, f.html())), Ja(f, b, c, d);
      });if (m && (e = qa(b, a[0].ownerDocument, !1, a, d), f = e.firstChild, 1 === e.childNodes.length && (e = f), f || d)) {
        for (h = r.map(na(e, "script"), Fa), i = h.length; l < m; l++) {
          j = e, l !== n && (j = r.clone(j, !0, !0), i && r.merge(h, na(j, "script"))), c.call(a[l], j, l);
        }if (i) for (k = h[h.length - 1].ownerDocument, r.map(h, Ga), l = 0; l < i; l++) {
          j = h[l], la.test(j.type || "") && !W.access(j, "globalEval") && r.contains(k, j) && (j.src ? r._evalUrl && r._evalUrl(j.src) : p(j.textContent.replace(Da, ""), k));
        }
      }return a;
    }function Ka(a, b, c) {
      for (var d, e = b ? r.filter(b, a) : a, f = 0; null != (d = e[f]); f++) {
        c || 1 !== d.nodeType || r.cleanData(na(d)), d.parentNode && (c && r.contains(d.ownerDocument, d) && oa(na(d, "script")), d.parentNode.removeChild(d));
      }return a;
    }r.extend({ htmlPrefilter: function htmlPrefilter(a) {
        return a.replace(za, "<$1></$2>");
      }, clone: function clone(a, b, c) {
        var d,
            e,
            f,
            g,
            h = a.cloneNode(!0),
            i = r.contains(a.ownerDocument, a);if (!(o.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || r.isXMLDoc(a))) for (g = na(h), f = na(a), d = 0, e = f.length; d < e; d++) {
          Ia(f[d], g[d]);
        }if (b) if (c) for (f = f || na(a), g = g || na(h), d = 0, e = f.length; d < e; d++) {
          Ha(f[d], g[d]);
        } else Ha(a, h);return g = na(h, "script"), g.length > 0 && oa(g, !i && na(a, "script")), h;
      }, cleanData: function cleanData(a) {
        for (var b, c, d, e = r.event.special, f = 0; void 0 !== (c = a[f]); f++) {
          if (U(c)) {
            if (b = c[W.expando]) {
              if (b.events) for (d in b.events) {
                e[d] ? r.event.remove(c, d) : r.removeEvent(c, d, b.handle);
              }c[W.expando] = void 0;
            }c[X.expando] && (c[X.expando] = void 0);
          }
        }
      } }), r.fn.extend({ detach: function detach(a) {
        return Ka(this, a, !0);
      }, remove: function remove(a) {
        return Ka(this, a);
      }, text: function text(a) {
        return T(this, function (a) {
          return void 0 === a ? r.text(this) : this.empty().each(function () {
            1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = a);
          });
        }, null, a, arguments.length);
      }, append: function append() {
        return Ja(this, arguments, function (a) {
          if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
            var b = Ea(this, a);b.appendChild(a);
          }
        });
      }, prepend: function prepend() {
        return Ja(this, arguments, function (a) {
          if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
            var b = Ea(this, a);b.insertBefore(a, b.firstChild);
          }
        });
      }, before: function before() {
        return Ja(this, arguments, function (a) {
          this.parentNode && this.parentNode.insertBefore(a, this);
        });
      }, after: function after() {
        return Ja(this, arguments, function (a) {
          this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
        });
      }, empty: function empty() {
        for (var a, b = 0; null != (a = this[b]); b++) {
          1 === a.nodeType && (r.cleanData(na(a, !1)), a.textContent = "");
        }return this;
      }, clone: function clone(a, b) {
        return a = null != a && a, b = null == b ? a : b, this.map(function () {
          return r.clone(this, a, b);
        });
      }, html: function html(a) {
        return T(this, function (a) {
          var b = this[0] || {},
              c = 0,
              d = this.length;if (void 0 === a && 1 === b.nodeType) return b.innerHTML;if ("string" == typeof a && !Aa.test(a) && !ma[(ka.exec(a) || ["", ""])[1].toLowerCase()]) {
            a = r.htmlPrefilter(a);try {
              for (; c < d; c++) {
                b = this[c] || {}, 1 === b.nodeType && (r.cleanData(na(b, !1)), b.innerHTML = a);
              }b = 0;
            } catch (e) {}
          }b && this.empty().append(a);
        }, null, a, arguments.length);
      }, replaceWith: function replaceWith() {
        var a = [];return Ja(this, arguments, function (b) {
          var c = this.parentNode;r.inArray(this, a) < 0 && (r.cleanData(na(this)), c && c.replaceChild(b, this));
        }, a);
      } }), r.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (a, b) {
      r.fn[a] = function (a) {
        for (var c, d = [], e = r(a), f = e.length - 1, g = 0; g <= f; g++) {
          c = g === f ? this : this.clone(!0), r(e[g])[b](c), h.apply(d, c.get());
        }return this.pushStack(d);
      };
    });var La = /^margin/,
        Ma = new RegExp("^(" + aa + ")(?!px)[a-z%]+$", "i"),
        Na = function Na(b) {
      var c = b.ownerDocument.defaultView;return c && c.opener || (c = a), c.getComputedStyle(b);
    };!function () {
      function b() {
        if (i) {
          i.style.cssText = "box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", i.innerHTML = "", ra.appendChild(h);var b = a.getComputedStyle(i);c = "1%" !== b.top, g = "2px" === b.marginLeft, e = "4px" === b.width, i.style.marginRight = "50%", f = "4px" === b.marginRight, ra.removeChild(h), i = null;
        }
      }var c,
          e,
          f,
          g,
          h = d.createElement("div"),
          i = d.createElement("div");i.style && (i.style.backgroundClip = "content-box", i.cloneNode(!0).style.backgroundClip = "", o.clearCloneStyle = "content-box" === i.style.backgroundClip, h.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", h.appendChild(i), r.extend(o, { pixelPosition: function pixelPosition() {
          return b(), c;
        }, boxSizingReliable: function boxSizingReliable() {
          return b(), e;
        }, pixelMarginRight: function pixelMarginRight() {
          return b(), f;
        }, reliableMarginLeft: function reliableMarginLeft() {
          return b(), g;
        } }));
    }();function Oa(a, b, c) {
      var d,
          e,
          f,
          g,
          h = a.style;return c = c || Na(a), c && (g = c.getPropertyValue(b) || c[b], "" !== g || r.contains(a.ownerDocument, a) || (g = r.style(a, b)), !o.pixelMarginRight() && Ma.test(g) && La.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + "" : g;
    }function Pa(a, b) {
      return { get: function get() {
          return a() ? void delete this.get : (this.get = b).apply(this, arguments);
        } };
    }var Qa = /^(none|table(?!-c[ea]).+)/,
        Ra = /^--/,
        Sa = { position: "absolute", visibility: "hidden", display: "block" },
        Ta = { letterSpacing: "0", fontWeight: "400" },
        Ua = ["Webkit", "Moz", "ms"],
        Va = d.createElement("div").style;function Wa(a) {
      if (a in Va) return a;var b = a[0].toUpperCase() + a.slice(1),
          c = Ua.length;while (c--) {
        if (a = Ua[c] + b, a in Va) return a;
      }
    }function Xa(a) {
      var b = r.cssProps[a];return b || (b = r.cssProps[a] = Wa(a) || a), b;
    }function Ya(a, b, c) {
      var d = ba.exec(b);return d ? Math.max(0, d[2] - (c || 0)) + (d[3] || "px") : b;
    }function Za(a, b, c, d, e) {
      var f,
          g = 0;for (f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0; f < 4; f += 2) {
        "margin" === c && (g += r.css(a, c + ca[f], !0, e)), d ? ("content" === c && (g -= r.css(a, "padding" + ca[f], !0, e)), "margin" !== c && (g -= r.css(a, "border" + ca[f] + "Width", !0, e))) : (g += r.css(a, "padding" + ca[f], !0, e), "padding" !== c && (g += r.css(a, "border" + ca[f] + "Width", !0, e)));
      }return g;
    }function $a(a, b, c) {
      var d,
          e = Na(a),
          f = Oa(a, b, e),
          g = "border-box" === r.css(a, "boxSizing", !1, e);return Ma.test(f) ? f : (d = g && (o.boxSizingReliable() || f === a.style[b]), "auto" === f && (f = a["offset" + b[0].toUpperCase() + b.slice(1)]), f = parseFloat(f) || 0, f + Za(a, b, c || (g ? "border" : "content"), d, e) + "px");
    }r.extend({ cssHooks: { opacity: { get: function get(a, b) {
            if (b) {
              var c = Oa(a, "opacity");return "" === c ? "1" : c;
            }
          } } }, cssNumber: { animationIterationCount: !0, columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { "float": "cssFloat" }, style: function style(a, b, c, d) {
        if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
          var e,
              f,
              g,
              h = r.camelCase(b),
              i = Ra.test(b),
              j = a.style;return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], void 0 === c ? g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : j[b] : (f = typeof c === "undefined" ? "undefined" : _typeof(c), "string" === f && (e = ba.exec(c)) && e[1] && (c = fa(a, b, e), f = "number"), null != c && c === c && ("number" === f && (c += e && e[3] || (r.cssNumber[h] ? "" : "px")), o.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (j[b] = "inherit"), g && "set" in g && void 0 === (c = g.set(a, c, d)) || (i ? j.setProperty(b, c) : j[b] = c)), void 0);
        }
      }, css: function css(a, b, c, d) {
        var e,
            f,
            g,
            h = r.camelCase(b),
            i = Ra.test(b);return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], g && "get" in g && (e = g.get(a, !0, c)), void 0 === e && (e = Oa(a, b, d)), "normal" === e && b in Ta && (e = Ta[b]), "" === c || c ? (f = parseFloat(e), c === !0 || isFinite(f) ? f || 0 : e) : e;
      } }), r.each(["height", "width"], function (a, b) {
      r.cssHooks[b] = { get: function get(a, c, d) {
          if (c) return !Qa.test(r.css(a, "display")) || a.getClientRects().length && a.getBoundingClientRect().width ? $a(a, b, d) : ea(a, Sa, function () {
            return $a(a, b, d);
          });
        }, set: function set(a, c, d) {
          var e,
              f = d && Na(a),
              g = d && Za(a, b, d, "border-box" === r.css(a, "boxSizing", !1, f), f);return g && (e = ba.exec(c)) && "px" !== (e[3] || "px") && (a.style[b] = c, c = r.css(a, b)), Ya(a, c, g);
        } };
    }), r.cssHooks.marginLeft = Pa(o.reliableMarginLeft, function (a, b) {
      if (b) return (parseFloat(Oa(a, "marginLeft")) || a.getBoundingClientRect().left - ea(a, { marginLeft: 0 }, function () {
        return a.getBoundingClientRect().left;
      })) + "px";
    }), r.each({ margin: "", padding: "", border: "Width" }, function (a, b) {
      r.cssHooks[a + b] = { expand: function expand(c) {
          for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; d < 4; d++) {
            e[a + ca[d] + b] = f[d] || f[d - 2] || f[0];
          }return e;
        } }, La.test(a) || (r.cssHooks[a + b].set = Ya);
    }), r.fn.extend({ css: function css(a, b) {
        return T(this, function (a, b, c) {
          var d,
              e,
              f = {},
              g = 0;if (Array.isArray(b)) {
            for (d = Na(a), e = b.length; g < e; g++) {
              f[b[g]] = r.css(a, b[g], !1, d);
            }return f;
          }return void 0 !== c ? r.style(a, b, c) : r.css(a, b);
        }, a, b, arguments.length > 1);
      } });function _a(a, b, c, d, e) {
      return new _a.prototype.init(a, b, c, d, e);
    }r.Tween = _a, _a.prototype = { constructor: _a, init: function init(a, b, c, d, e, f) {
        this.elem = a, this.prop = c, this.easing = e || r.easing._default, this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (r.cssNumber[c] ? "" : "px");
      }, cur: function cur() {
        var a = _a.propHooks[this.prop];return a && a.get ? a.get(this) : _a.propHooks._default.get(this);
      }, run: function run(a) {
        var b,
            c = _a.propHooks[this.prop];return this.options.duration ? this.pos = b = r.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : _a.propHooks._default.set(this), this;
      } }, _a.prototype.init.prototype = _a.prototype, _a.propHooks = { _default: { get: function get(a) {
          var b;return 1 !== a.elem.nodeType || null != a.elem[a.prop] && null == a.elem.style[a.prop] ? a.elem[a.prop] : (b = r.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0);
        }, set: function set(a) {
          r.fx.step[a.prop] ? r.fx.step[a.prop](a) : 1 !== a.elem.nodeType || null == a.elem.style[r.cssProps[a.prop]] && !r.cssHooks[a.prop] ? a.elem[a.prop] = a.now : r.style(a.elem, a.prop, a.now + a.unit);
        } } }, _a.propHooks.scrollTop = _a.propHooks.scrollLeft = { set: function set(a) {
        a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
      } }, r.easing = { linear: function linear(a) {
        return a;
      }, swing: function swing(a) {
        return .5 - Math.cos(a * Math.PI) / 2;
      }, _default: "swing" }, r.fx = _a.prototype.init, r.fx.step = {};var ab,
        bb,
        cb = /^(?:toggle|show|hide)$/,
        db = /queueHooks$/;function eb() {
      bb && (d.hidden === !1 && a.requestAnimationFrame ? a.requestAnimationFrame(eb) : a.setTimeout(eb, r.fx.interval), r.fx.tick());
    }function fb() {
      return a.setTimeout(function () {
        ab = void 0;
      }), ab = r.now();
    }function gb(a, b) {
      var c,
          d = 0,
          e = { height: a };for (b = b ? 1 : 0; d < 4; d += 2 - b) {
        c = ca[d], e["margin" + c] = e["padding" + c] = a;
      }return b && (e.opacity = e.width = a), e;
    }function hb(a, b, c) {
      for (var d, e = (kb.tweeners[b] || []).concat(kb.tweeners["*"]), f = 0, g = e.length; f < g; f++) {
        if (d = e[f].call(c, b, a)) return d;
      }
    }function ib(a, b, c) {
      var d,
          e,
          f,
          g,
          h,
          i,
          j,
          k,
          l = "width" in b || "height" in b,
          m = this,
          n = {},
          o = a.style,
          p = a.nodeType && da(a),
          q = W.get(a, "fxshow");c.queue || (g = r._queueHooks(a, "fx"), null == g.unqueued && (g.unqueued = 0, h = g.empty.fire, g.empty.fire = function () {
        g.unqueued || h();
      }), g.unqueued++, m.always(function () {
        m.always(function () {
          g.unqueued--, r.queue(a, "fx").length || g.empty.fire();
        });
      }));for (d in b) {
        if (e = b[d], cb.test(e)) {
          if (delete b[d], f = f || "toggle" === e, e === (p ? "hide" : "show")) {
            if ("show" !== e || !q || void 0 === q[d]) continue;p = !0;
          }n[d] = q && q[d] || r.style(a, d);
        }
      }if (i = !r.isEmptyObject(b), i || !r.isEmptyObject(n)) {
        l && 1 === a.nodeType && (c.overflow = [o.overflow, o.overflowX, o.overflowY], j = q && q.display, null == j && (j = W.get(a, "display")), k = r.css(a, "display"), "none" === k && (j ? k = j : (ia([a], !0), j = a.style.display || j, k = r.css(a, "display"), ia([a]))), ("inline" === k || "inline-block" === k && null != j) && "none" === r.css(a, "float") && (i || (m.done(function () {
          o.display = j;
        }), null == j && (k = o.display, j = "none" === k ? "" : k)), o.display = "inline-block")), c.overflow && (o.overflow = "hidden", m.always(function () {
          o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2];
        })), i = !1;for (d in n) {
          i || (q ? "hidden" in q && (p = q.hidden) : q = W.access(a, "fxshow", { display: j }), f && (q.hidden = !p), p && ia([a], !0), m.done(function () {
            p || ia([a]), W.remove(a, "fxshow");for (d in n) {
              r.style(a, d, n[d]);
            }
          })), i = hb(p ? q[d] : 0, d, m), d in q || (q[d] = i.start, p && (i.end = i.start, i.start = 0));
        }
      }
    }function jb(a, b) {
      var c, d, e, f, g;for (c in a) {
        if (d = r.camelCase(c), e = b[d], f = a[c], Array.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = r.cssHooks[d], g && "expand" in g) {
          f = g.expand(f), delete a[d];for (c in f) {
            c in a || (a[c] = f[c], b[c] = e);
          }
        } else b[d] = e;
      }
    }function kb(a, b, c) {
      var d,
          e,
          f = 0,
          g = kb.prefilters.length,
          h = r.Deferred().always(function () {
        delete i.elem;
      }),
          i = function i() {
        if (e) return !1;for (var b = ab || fb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; g < i; g++) {
          j.tweens[g].run(f);
        }return h.notifyWith(a, [j, f, c]), f < 1 && i ? c : (i || h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j]), !1);
      },
          j = h.promise({ elem: a, props: r.extend({}, b), opts: r.extend(!0, { specialEasing: {}, easing: r.easing._default }, c), originalProperties: b, originalOptions: c, startTime: ab || fb(), duration: c.duration, tweens: [], createTween: function createTween(b, c) {
          var d = r.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);return j.tweens.push(d), d;
        }, stop: function stop(b) {
          var c = 0,
              d = b ? j.tweens.length : 0;if (e) return this;for (e = !0; c < d; c++) {
            j.tweens[c].run(1);
          }return b ? (h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j, b])) : h.rejectWith(a, [j, b]), this;
        } }),
          k = j.props;for (jb(k, j.opts.specialEasing); f < g; f++) {
        if (d = kb.prefilters[f].call(j, a, k, j.opts)) return r.isFunction(d.stop) && (r._queueHooks(j.elem, j.opts.queue).stop = r.proxy(d.stop, d)), d;
      }return r.map(k, hb, j), r.isFunction(j.opts.start) && j.opts.start.call(a, j), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always), r.fx.timer(r.extend(i, { elem: a, anim: j, queue: j.opts.queue })), j;
    }r.Animation = r.extend(kb, { tweeners: { "*": [function (a, b) {
          var c = this.createTween(a, b);return fa(c.elem, a, ba.exec(b), c), c;
        }] }, tweener: function tweener(a, b) {
        r.isFunction(a) ? (b = a, a = ["*"]) : a = a.match(L);for (var c, d = 0, e = a.length; d < e; d++) {
          c = a[d], kb.tweeners[c] = kb.tweeners[c] || [], kb.tweeners[c].unshift(b);
        }
      }, prefilters: [ib], prefilter: function prefilter(a, b) {
        b ? kb.prefilters.unshift(a) : kb.prefilters.push(a);
      } }), r.speed = function (a, b, c) {
      var d = a && "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) ? r.extend({}, a) : { complete: c || !c && b || r.isFunction(a) && a, duration: a, easing: c && b || b && !r.isFunction(b) && b };return r.fx.off ? d.duration = 0 : "number" != typeof d.duration && (d.duration in r.fx.speeds ? d.duration = r.fx.speeds[d.duration] : d.duration = r.fx.speeds._default), null != d.queue && d.queue !== !0 || (d.queue = "fx"), d.old = d.complete, d.complete = function () {
        r.isFunction(d.old) && d.old.call(this), d.queue && r.dequeue(this, d.queue);
      }, d;
    }, r.fn.extend({ fadeTo: function fadeTo(a, b, c, d) {
        return this.filter(da).css("opacity", 0).show().end().animate({ opacity: b }, a, c, d);
      }, animate: function animate(a, b, c, d) {
        var e = r.isEmptyObject(a),
            f = r.speed(b, c, d),
            g = function g() {
          var b = kb(this, r.extend({}, a), f);(e || W.get(this, "finish")) && b.stop(!0);
        };return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
      }, stop: function stop(a, b, c) {
        var d = function d(a) {
          var b = a.stop;delete a.stop, b(c);
        };return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () {
          var b = !0,
              e = null != a && a + "queueHooks",
              f = r.timers,
              g = W.get(this);if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) {
            g[e] && g[e].stop && db.test(e) && d(g[e]);
          }for (e = f.length; e--;) {
            f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));
          }!b && c || r.dequeue(this, a);
        });
      }, finish: function finish(a) {
        return a !== !1 && (a = a || "fx"), this.each(function () {
          var b,
              c = W.get(this),
              d = c[a + "queue"],
              e = c[a + "queueHooks"],
              f = r.timers,
              g = d ? d.length : 0;for (c.finish = !0, r.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) {
            f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
          }for (b = 0; b < g; b++) {
            d[b] && d[b].finish && d[b].finish.call(this);
          }delete c.finish;
        });
      } }), r.each(["toggle", "show", "hide"], function (a, b) {
      var c = r.fn[b];r.fn[b] = function (a, d, e) {
        return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(gb(b, !0), a, d, e);
      };
    }), r.each({ slideDown: gb("show"), slideUp: gb("hide"), slideToggle: gb("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (a, b) {
      r.fn[a] = function (a, c, d) {
        return this.animate(b, a, c, d);
      };
    }), r.timers = [], r.fx.tick = function () {
      var a,
          b = 0,
          c = r.timers;for (ab = r.now(); b < c.length; b++) {
        a = c[b], a() || c[b] !== a || c.splice(b--, 1);
      }c.length || r.fx.stop(), ab = void 0;
    }, r.fx.timer = function (a) {
      r.timers.push(a), r.fx.start();
    }, r.fx.interval = 13, r.fx.start = function () {
      bb || (bb = !0, eb());
    }, r.fx.stop = function () {
      bb = null;
    }, r.fx.speeds = { slow: 600, fast: 200, _default: 400 }, r.fn.delay = function (b, c) {
      return b = r.fx ? r.fx.speeds[b] || b : b, c = c || "fx", this.queue(c, function (c, d) {
        var e = a.setTimeout(c, b);d.stop = function () {
          a.clearTimeout(e);
        };
      });
    }, function () {
      var a = d.createElement("input"),
          b = d.createElement("select"),
          c = b.appendChild(d.createElement("option"));a.type = "checkbox", o.checkOn = "" !== a.value, o.optSelected = c.selected, a = d.createElement("input"), a.value = "t", a.type = "radio", o.radioValue = "t" === a.value;
    }();var lb,
        mb = r.expr.attrHandle;r.fn.extend({ attr: function attr(a, b) {
        return T(this, r.attr, a, b, arguments.length > 1);
      }, removeAttr: function removeAttr(a) {
        return this.each(function () {
          r.removeAttr(this, a);
        });
      } }), r.extend({ attr: function attr(a, b, c) {
        var d,
            e,
            f = a.nodeType;if (3 !== f && 8 !== f && 2 !== f) return "undefined" == typeof a.getAttribute ? r.prop(a, b, c) : (1 === f && r.isXMLDoc(a) || (e = r.attrHooks[b.toLowerCase()] || (r.expr.match.bool.test(b) ? lb : void 0)), void 0 !== c ? null === c ? void r.removeAttr(a, b) : e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a.setAttribute(b, c + ""), c) : e && "get" in e && null !== (d = e.get(a, b)) ? d : (d = r.find.attr(a, b), null == d ? void 0 : d));
      }, attrHooks: { type: { set: function set(a, b) {
            if (!o.radioValue && "radio" === b && B(a, "input")) {
              var c = a.value;return a.setAttribute("type", b), c && (a.value = c), b;
            }
          } } }, removeAttr: function removeAttr(a, b) {
        var c,
            d = 0,
            e = b && b.match(L);if (e && 1 === a.nodeType) while (c = e[d++]) {
          a.removeAttribute(c);
        }
      } }), lb = { set: function set(a, b, c) {
        return b === !1 ? r.removeAttr(a, c) : a.setAttribute(c, c), c;
      } }, r.each(r.expr.match.bool.source.match(/\w+/g), function (a, b) {
      var c = mb[b] || r.find.attr;mb[b] = function (a, b, d) {
        var e,
            f,
            g = b.toLowerCase();return d || (f = mb[g], mb[g] = e, e = null != c(a, b, d) ? g : null, mb[g] = f), e;
      };
    });var nb = /^(?:input|select|textarea|button)$/i,
        ob = /^(?:a|area)$/i;r.fn.extend({ prop: function prop(a, b) {
        return T(this, r.prop, a, b, arguments.length > 1);
      }, removeProp: function removeProp(a) {
        return this.each(function () {
          delete this[r.propFix[a] || a];
        });
      } }), r.extend({ prop: function prop(a, b, c) {
        var d,
            e,
            f = a.nodeType;if (3 !== f && 8 !== f && 2 !== f) return 1 === f && r.isXMLDoc(a) || (b = r.propFix[b] || b, e = r.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];
      }, propHooks: { tabIndex: { get: function get(a) {
            var b = r.find.attr(a, "tabindex");return b ? parseInt(b, 10) : nb.test(a.nodeName) || ob.test(a.nodeName) && a.href ? 0 : -1;
          } } }, propFix: { "for": "htmlFor", "class": "className" } }), o.optSelected || (r.propHooks.selected = { get: function get(a) {
        var b = a.parentNode;return b && b.parentNode && b.parentNode.selectedIndex, null;
      }, set: function set(a) {
        var b = a.parentNode;b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);
      } }), r.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
      r.propFix[this.toLowerCase()] = this;
    });function pb(a) {
      var b = a.match(L) || [];return b.join(" ");
    }function qb(a) {
      return a.getAttribute && a.getAttribute("class") || "";
    }r.fn.extend({ addClass: function addClass(a) {
        var b,
            c,
            d,
            e,
            f,
            g,
            h,
            i = 0;if (r.isFunction(a)) return this.each(function (b) {
          r(this).addClass(a.call(this, b, qb(this)));
        });if ("string" == typeof a && a) {
          b = a.match(L) || [];while (c = this[i++]) {
            if (e = qb(c), d = 1 === c.nodeType && " " + pb(e) + " ") {
              g = 0;while (f = b[g++]) {
                d.indexOf(" " + f + " ") < 0 && (d += f + " ");
              }h = pb(d), e !== h && c.setAttribute("class", h);
            }
          }
        }return this;
      }, removeClass: function removeClass(a) {
        var b,
            c,
            d,
            e,
            f,
            g,
            h,
            i = 0;if (r.isFunction(a)) return this.each(function (b) {
          r(this).removeClass(a.call(this, b, qb(this)));
        });if (!arguments.length) return this.attr("class", "");if ("string" == typeof a && a) {
          b = a.match(L) || [];while (c = this[i++]) {
            if (e = qb(c), d = 1 === c.nodeType && " " + pb(e) + " ") {
              g = 0;while (f = b[g++]) {
                while (d.indexOf(" " + f + " ") > -1) {
                  d = d.replace(" " + f + " ", " ");
                }
              }h = pb(d), e !== h && c.setAttribute("class", h);
            }
          }
        }return this;
      }, toggleClass: function toggleClass(a, b) {
        var c = typeof a === "undefined" ? "undefined" : _typeof(a);return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : r.isFunction(a) ? this.each(function (c) {
          r(this).toggleClass(a.call(this, c, qb(this), b), b);
        }) : this.each(function () {
          var b, d, e, f;if ("string" === c) {
            d = 0, e = r(this), f = a.match(L) || [];while (b = f[d++]) {
              e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
            }
          } else void 0 !== a && "boolean" !== c || (b = qb(this), b && W.set(this, "__className__", b), this.setAttribute && this.setAttribute("class", b || a === !1 ? "" : W.get(this, "__className__") || ""));
        });
      }, hasClass: function hasClass(a) {
        var b,
            c,
            d = 0;b = " " + a + " ";while (c = this[d++]) {
          if (1 === c.nodeType && (" " + pb(qb(c)) + " ").indexOf(b) > -1) return !0;
        }return !1;
      } });var rb = /\r/g;r.fn.extend({ val: function val(a) {
        var b,
            c,
            d,
            e = this[0];{
          if (arguments.length) return d = r.isFunction(a), this.each(function (c) {
            var e;1 === this.nodeType && (e = d ? a.call(this, c, r(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : Array.isArray(e) && (e = r.map(e, function (a) {
              return null == a ? "" : a + "";
            })), b = r.valHooks[this.type] || r.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));
          });if (e) return b = r.valHooks[e.type] || r.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(rb, "") : null == c ? "" : c);
        }
      } }), r.extend({ valHooks: { option: { get: function get(a) {
            var b = r.find.attr(a, "value");return null != b ? b : pb(r.text(a));
          } }, select: { get: function get(a) {
            var b,
                c,
                d,
                e = a.options,
                f = a.selectedIndex,
                g = "select-one" === a.type,
                h = g ? null : [],
                i = g ? f + 1 : e.length;for (d = f < 0 ? i : g ? f : 0; d < i; d++) {
              if (c = e[d], (c.selected || d === f) && !c.disabled && (!c.parentNode.disabled || !B(c.parentNode, "optgroup"))) {
                if (b = r(c).val(), g) return b;h.push(b);
              }
            }return h;
          }, set: function set(a, b) {
            var c,
                d,
                e = a.options,
                f = r.makeArray(b),
                g = e.length;while (g--) {
              d = e[g], (d.selected = r.inArray(r.valHooks.option.get(d), f) > -1) && (c = !0);
            }return c || (a.selectedIndex = -1), f;
          } } } }), r.each(["radio", "checkbox"], function () {
      r.valHooks[this] = { set: function set(a, b) {
          if (Array.isArray(b)) return a.checked = r.inArray(r(a).val(), b) > -1;
        } }, o.checkOn || (r.valHooks[this].get = function (a) {
        return null === a.getAttribute("value") ? "on" : a.value;
      });
    });var sb = /^(?:focusinfocus|focusoutblur)$/;r.extend(r.event, { trigger: function trigger(b, c, e, f) {
        var g,
            h,
            i,
            j,
            k,
            m,
            n,
            o = [e || d],
            p = l.call(b, "type") ? b.type : b,
            q = l.call(b, "namespace") ? b.namespace.split(".") : [];if (h = i = e = e || d, 3 !== e.nodeType && 8 !== e.nodeType && !sb.test(p + r.event.triggered) && (p.indexOf(".") > -1 && (q = p.split("."), p = q.shift(), q.sort()), k = p.indexOf(":") < 0 && "on" + p, b = b[r.expando] ? b : new r.Event(p, "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b), b.isTrigger = f ? 2 : 3, b.namespace = q.join("."), b.rnamespace = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = e), c = null == c ? [b] : r.makeArray(c, [b]), n = r.event.special[p] || {}, f || !n.trigger || n.trigger.apply(e, c) !== !1)) {
          if (!f && !n.noBubble && !r.isWindow(e)) {
            for (j = n.delegateType || p, sb.test(j + p) || (h = h.parentNode); h; h = h.parentNode) {
              o.push(h), i = h;
            }i === (e.ownerDocument || d) && o.push(i.defaultView || i.parentWindow || a);
          }g = 0;while ((h = o[g++]) && !b.isPropagationStopped()) {
            b.type = g > 1 ? j : n.bindType || p, m = (W.get(h, "events") || {})[b.type] && W.get(h, "handle"), m && m.apply(h, c), m = k && h[k], m && m.apply && U(h) && (b.result = m.apply(h, c), b.result === !1 && b.preventDefault());
          }return b.type = p, f || b.isDefaultPrevented() || n._default && n._default.apply(o.pop(), c) !== !1 || !U(e) || k && r.isFunction(e[p]) && !r.isWindow(e) && (i = e[k], i && (e[k] = null), r.event.triggered = p, e[p](), r.event.triggered = void 0, i && (e[k] = i)), b.result;
        }
      }, simulate: function simulate(a, b, c) {
        var d = r.extend(new r.Event(), c, { type: a, isSimulated: !0 });r.event.trigger(d, null, b);
      } }), r.fn.extend({ trigger: function trigger(a, b) {
        return this.each(function () {
          r.event.trigger(a, b, this);
        });
      }, triggerHandler: function triggerHandler(a, b) {
        var c = this[0];if (c) return r.event.trigger(a, b, c, !0);
      } }), r.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function (a, b) {
      r.fn[b] = function (a, c) {
        return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
      };
    }), r.fn.extend({ hover: function hover(a, b) {
        return this.mouseenter(a).mouseleave(b || a);
      } }), o.focusin = "onfocusin" in a, o.focusin || r.each({ focus: "focusin", blur: "focusout" }, function (a, b) {
      var c = function c(a) {
        r.event.simulate(b, a.target, r.event.fix(a));
      };r.event.special[b] = { setup: function setup() {
          var d = this.ownerDocument || this,
              e = W.access(d, b);e || d.addEventListener(a, c, !0), W.access(d, b, (e || 0) + 1);
        }, teardown: function teardown() {
          var d = this.ownerDocument || this,
              e = W.access(d, b) - 1;e ? W.access(d, b, e) : (d.removeEventListener(a, c, !0), W.remove(d, b));
        } };
    });var tb = a.location,
        ub = r.now(),
        vb = /\?/;r.parseXML = function (b) {
      var c;if (!b || "string" != typeof b) return null;try {
        c = new a.DOMParser().parseFromString(b, "text/xml");
      } catch (d) {
        c = void 0;
      }return c && !c.getElementsByTagName("parsererror").length || r.error("Invalid XML: " + b), c;
    };var wb = /\[\]$/,
        xb = /\r?\n/g,
        yb = /^(?:submit|button|image|reset|file)$/i,
        zb = /^(?:input|select|textarea|keygen)/i;function Ab(a, b, c, d) {
      var e;if (Array.isArray(b)) r.each(b, function (b, e) {
        c || wb.test(a) ? d(a, e) : Ab(a + "[" + ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && null != e ? b : "") + "]", e, c, d);
      });else if (c || "object" !== r.type(b)) d(a, b);else for (e in b) {
        Ab(a + "[" + e + "]", b[e], c, d);
      }
    }r.param = function (a, b) {
      var c,
          d = [],
          e = function e(a, b) {
        var c = r.isFunction(b) ? b() : b;d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(null == c ? "" : c);
      };if (Array.isArray(a) || a.jquery && !r.isPlainObject(a)) r.each(a, function () {
        e(this.name, this.value);
      });else for (c in a) {
        Ab(c, a[c], b, e);
      }return d.join("&");
    }, r.fn.extend({ serialize: function serialize() {
        return r.param(this.serializeArray());
      }, serializeArray: function serializeArray() {
        return this.map(function () {
          var a = r.prop(this, "elements");return a ? r.makeArray(a) : this;
        }).filter(function () {
          var a = this.type;return this.name && !r(this).is(":disabled") && zb.test(this.nodeName) && !yb.test(a) && (this.checked || !ja.test(a));
        }).map(function (a, b) {
          var c = r(this).val();return null == c ? null : Array.isArray(c) ? r.map(c, function (a) {
            return { name: b.name, value: a.replace(xb, "\r\n") };
          }) : { name: b.name, value: c.replace(xb, "\r\n") };
        }).get();
      } });var Bb = /%20/g,
        Cb = /#.*$/,
        Db = /([?&])_=[^&]*/,
        Eb = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        Fb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        Gb = /^(?:GET|HEAD)$/,
        Hb = /^\/\//,
        Ib = {},
        Jb = {},
        Kb = "*/".concat("*"),
        Lb = d.createElement("a");Lb.href = tb.href;function Mb(a) {
      return function (b, c) {
        "string" != typeof b && (c = b, b = "*");var d,
            e = 0,
            f = b.toLowerCase().match(L) || [];if (r.isFunction(c)) while (d = f[e++]) {
          "+" === d[0] ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
        }
      };
    }function Nb(a, b, c, d) {
      var e = {},
          f = a === Jb;function g(h) {
        var i;return e[h] = !0, r.each(a[h] || [], function (a, h) {
          var j = h(b, c, d);return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);
        }), i;
      }return g(b.dataTypes[0]) || !e["*"] && g("*");
    }function Ob(a, b) {
      var c,
          d,
          e = r.ajaxSettings.flatOptions || {};for (c in b) {
        void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);
      }return d && r.extend(!0, a, d), a;
    }function Pb(a, b, c) {
      var d,
          e,
          f,
          g,
          h = a.contents,
          i = a.dataTypes;while ("*" === i[0]) {
        i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader("Content-Type"));
      }if (d) for (e in h) {
        if (h[e] && h[e].test(d)) {
          i.unshift(e);break;
        }
      }if (i[0] in c) f = i[0];else {
        for (e in c) {
          if (!i[0] || a.converters[e + " " + i[0]]) {
            f = e;break;
          }g || (g = e);
        }f = f || g;
      }if (f) return f !== i[0] && i.unshift(f), c[f];
    }function Qb(a, b, c, d) {
      var e,
          f,
          g,
          h,
          i,
          j = {},
          k = a.dataTypes.slice();if (k[1]) for (g in a.converters) {
        j[g.toLowerCase()] = a.converters[g];
      }f = k.shift();while (f) {
        if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if ("*" === f) f = i;else if ("*" !== i && i !== f) {
          if (g = j[i + " " + f] || j["* " + f], !g) for (e in j) {
            if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
              g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));break;
            }
          }if (g !== !0) if (g && a["throws"]) b = g(b);else try {
            b = g(b);
          } catch (l) {
            return { state: "parsererror", error: g ? l : "No conversion from " + i + " to " + f };
          }
        }
      }return { state: "success", data: b };
    }r.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: tb.href, type: "GET", isLocal: Fb.test(tb.protocol), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": Kb, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": JSON.parse, "text xml": r.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function ajaxSetup(a, b) {
        return b ? Ob(Ob(a, r.ajaxSettings), b) : Ob(r.ajaxSettings, a);
      }, ajaxPrefilter: Mb(Ib), ajaxTransport: Mb(Jb), ajax: function ajax(b, c) {
        "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && (c = b, b = void 0), c = c || {};var e,
            f,
            g,
            h,
            i,
            j,
            k,
            l,
            m,
            n,
            o = r.ajaxSetup({}, c),
            p = o.context || o,
            q = o.context && (p.nodeType || p.jquery) ? r(p) : r.event,
            s = r.Deferred(),
            t = r.Callbacks("once memory"),
            u = o.statusCode || {},
            v = {},
            w = {},
            x = "canceled",
            y = { readyState: 0, getResponseHeader: function getResponseHeader(a) {
            var b;if (k) {
              if (!h) {
                h = {};while (b = Eb.exec(g)) {
                  h[b[1].toLowerCase()] = b[2];
                }
              }b = h[a.toLowerCase()];
            }return null == b ? null : b;
          }, getAllResponseHeaders: function getAllResponseHeaders() {
            return k ? g : null;
          }, setRequestHeader: function setRequestHeader(a, b) {
            return null == k && (a = w[a.toLowerCase()] = w[a.toLowerCase()] || a, v[a] = b), this;
          }, overrideMimeType: function overrideMimeType(a) {
            return null == k && (o.mimeType = a), this;
          }, statusCode: function statusCode(a) {
            var b;if (a) if (k) y.always(a[y.status]);else for (b in a) {
              u[b] = [u[b], a[b]];
            }return this;
          }, abort: function abort(a) {
            var b = a || x;return e && e.abort(b), A(0, b), this;
          } };if (s.promise(y), o.url = ((b || o.url || tb.href) + "").replace(Hb, tb.protocol + "//"), o.type = c.method || c.type || o.method || o.type, o.dataTypes = (o.dataType || "*").toLowerCase().match(L) || [""], null == o.crossDomain) {
          j = d.createElement("a");try {
            j.href = o.url, j.href = j.href, o.crossDomain = Lb.protocol + "//" + Lb.host != j.protocol + "//" + j.host;
          } catch (z) {
            o.crossDomain = !0;
          }
        }if (o.data && o.processData && "string" != typeof o.data && (o.data = r.param(o.data, o.traditional)), Nb(Ib, o, c, y), k) return y;l = r.event && o.global, l && 0 === r.active++ && r.event.trigger("ajaxStart"), o.type = o.type.toUpperCase(), o.hasContent = !Gb.test(o.type), f = o.url.replace(Cb, ""), o.hasContent ? o.data && o.processData && 0 === (o.contentType || "").indexOf("application/x-www-form-urlencoded") && (o.data = o.data.replace(Bb, "+")) : (n = o.url.slice(f.length), o.data && (f += (vb.test(f) ? "&" : "?") + o.data, delete o.data), o.cache === !1 && (f = f.replace(Db, "$1"), n = (vb.test(f) ? "&" : "?") + "_=" + ub++ + n), o.url = f + n), o.ifModified && (r.lastModified[f] && y.setRequestHeader("If-Modified-Since", r.lastModified[f]), r.etag[f] && y.setRequestHeader("If-None-Match", r.etag[f])), (o.data && o.hasContent && o.contentType !== !1 || c.contentType) && y.setRequestHeader("Content-Type", o.contentType), y.setRequestHeader("Accept", o.dataTypes[0] && o.accepts[o.dataTypes[0]] ? o.accepts[o.dataTypes[0]] + ("*" !== o.dataTypes[0] ? ", " + Kb + "; q=0.01" : "") : o.accepts["*"]);for (m in o.headers) {
          y.setRequestHeader(m, o.headers[m]);
        }if (o.beforeSend && (o.beforeSend.call(p, y, o) === !1 || k)) return y.abort();if (x = "abort", t.add(o.complete), y.done(o.success), y.fail(o.error), e = Nb(Jb, o, c, y)) {
          if (y.readyState = 1, l && q.trigger("ajaxSend", [y, o]), k) return y;o.async && o.timeout > 0 && (i = a.setTimeout(function () {
            y.abort("timeout");
          }, o.timeout));try {
            k = !1, e.send(v, A);
          } catch (z) {
            if (k) throw z;A(-1, z);
          }
        } else A(-1, "No Transport");function A(b, c, d, h) {
          var j,
              m,
              n,
              v,
              w,
              x = c;k || (k = !0, i && a.clearTimeout(i), e = void 0, g = h || "", y.readyState = b > 0 ? 4 : 0, j = b >= 200 && b < 300 || 304 === b, d && (v = Pb(o, y, d)), v = Qb(o, v, y, j), j ? (o.ifModified && (w = y.getResponseHeader("Last-Modified"), w && (r.lastModified[f] = w), w = y.getResponseHeader("etag"), w && (r.etag[f] = w)), 204 === b || "HEAD" === o.type ? x = "nocontent" : 304 === b ? x = "notmodified" : (x = v.state, m = v.data, n = v.error, j = !n)) : (n = x, !b && x || (x = "error", b < 0 && (b = 0))), y.status = b, y.statusText = (c || x) + "", j ? s.resolveWith(p, [m, x, y]) : s.rejectWith(p, [y, x, n]), y.statusCode(u), u = void 0, l && q.trigger(j ? "ajaxSuccess" : "ajaxError", [y, o, j ? m : n]), t.fireWith(p, [y, x]), l && (q.trigger("ajaxComplete", [y, o]), --r.active || r.event.trigger("ajaxStop")));
        }return y;
      }, getJSON: function getJSON(a, b, c) {
        return r.get(a, b, c, "json");
      }, getScript: function getScript(a, b) {
        return r.get(a, void 0, b, "script");
      } }), r.each(["get", "post"], function (a, b) {
      r[b] = function (a, c, d, e) {
        return r.isFunction(c) && (e = e || d, d = c, c = void 0), r.ajax(r.extend({ url: a, type: b, dataType: e, data: c, success: d }, r.isPlainObject(a) && a));
      };
    }), r._evalUrl = function (a) {
      return r.ajax({ url: a, type: "GET", dataType: "script", cache: !0, async: !1, global: !1, "throws": !0 });
    }, r.fn.extend({ wrapAll: function wrapAll(a) {
        var b;return this[0] && (r.isFunction(a) && (a = a.call(this[0])), b = r(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
          var a = this;while (a.firstElementChild) {
            a = a.firstElementChild;
          }return a;
        }).append(this)), this;
      }, wrapInner: function wrapInner(a) {
        return r.isFunction(a) ? this.each(function (b) {
          r(this).wrapInner(a.call(this, b));
        }) : this.each(function () {
          var b = r(this),
              c = b.contents();c.length ? c.wrapAll(a) : b.append(a);
        });
      }, wrap: function wrap(a) {
        var b = r.isFunction(a);return this.each(function (c) {
          r(this).wrapAll(b ? a.call(this, c) : a);
        });
      }, unwrap: function unwrap(a) {
        return this.parent(a).not("body").each(function () {
          r(this).replaceWith(this.childNodes);
        }), this;
      } }), r.expr.pseudos.hidden = function (a) {
      return !r.expr.pseudos.visible(a);
    }, r.expr.pseudos.visible = function (a) {
      return !!(a.offsetWidth || a.offsetHeight || a.getClientRects().length);
    }, r.ajaxSettings.xhr = function () {
      try {
        return new a.XMLHttpRequest();
      } catch (b) {}
    };var Rb = { 0: 200, 1223: 204 },
        Sb = r.ajaxSettings.xhr();o.cors = !!Sb && "withCredentials" in Sb, o.ajax = Sb = !!Sb, r.ajaxTransport(function (b) {
      var _c, d;if (o.cors || Sb && !b.crossDomain) return { send: function send(e, f) {
          var g,
              h = b.xhr();if (h.open(b.type, b.url, b.async, b.username, b.password), b.xhrFields) for (g in b.xhrFields) {
            h[g] = b.xhrFields[g];
          }b.mimeType && h.overrideMimeType && h.overrideMimeType(b.mimeType), b.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest");for (g in e) {
            h.setRequestHeader(g, e[g]);
          }_c = function c(a) {
            return function () {
              _c && (_c = d = h.onload = h.onerror = h.onabort = h.onreadystatechange = null, "abort" === a ? h.abort() : "error" === a ? "number" != typeof h.status ? f(0, "error") : f(h.status, h.statusText) : f(Rb[h.status] || h.status, h.statusText, "text" !== (h.responseType || "text") || "string" != typeof h.responseText ? { binary: h.response } : { text: h.responseText }, h.getAllResponseHeaders()));
            };
          }, h.onload = _c(), d = h.onerror = _c("error"), void 0 !== h.onabort ? h.onabort = d : h.onreadystatechange = function () {
            4 === h.readyState && a.setTimeout(function () {
              _c && d();
            });
          }, _c = _c("abort");try {
            h.send(b.hasContent && b.data || null);
          } catch (i) {
            if (_c) throw i;
          }
        }, abort: function abort() {
          _c && _c();
        } };
    }), r.ajaxPrefilter(function (a) {
      a.crossDomain && (a.contents.script = !1);
    }), r.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /\b(?:java|ecma)script\b/ }, converters: { "text script": function textScript(a) {
          return r.globalEval(a), a;
        } } }), r.ajaxPrefilter("script", function (a) {
      void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET");
    }), r.ajaxTransport("script", function (a) {
      if (a.crossDomain) {
        var b, _c2;return { send: function send(e, f) {
            b = r("<script>").prop({ charset: a.scriptCharset, src: a.url }).on("load error", _c2 = function c(a) {
              b.remove(), _c2 = null, a && f("error" === a.type ? 404 : 200, a.type);
            }), d.head.appendChild(b[0]);
          }, abort: function abort() {
            _c2 && _c2();
          } };
      }
    });var Tb = [],
        Ub = /(=)\?(?=&|$)|\?\?/;r.ajaxSetup({ jsonp: "callback", jsonpCallback: function jsonpCallback() {
        var a = Tb.pop() || r.expando + "_" + ub++;return this[a] = !0, a;
      } }), r.ajaxPrefilter("json jsonp", function (b, c, d) {
      var e,
          f,
          g,
          h = b.jsonp !== !1 && (Ub.test(b.url) ? "url" : "string" == typeof b.data && 0 === (b.contentType || "").indexOf("application/x-www-form-urlencoded") && Ub.test(b.data) && "data");if (h || "jsonp" === b.dataTypes[0]) return e = b.jsonpCallback = r.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Ub, "$1" + e) : b.jsonp !== !1 && (b.url += (vb.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () {
        return g || r.error(e + " was not called"), g[0];
      }, b.dataTypes[0] = "json", f = a[e], a[e] = function () {
        g = arguments;
      }, d.always(function () {
        void 0 === f ? r(a).removeProp(e) : a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Tb.push(e)), g && r.isFunction(f) && f(g[0]), g = f = void 0;
      }), "script";
    }), o.createHTMLDocument = function () {
      var a = d.implementation.createHTMLDocument("").body;return a.innerHTML = "<form></form><form></form>", 2 === a.childNodes.length;
    }(), r.parseHTML = function (a, b, c) {
      if ("string" != typeof a) return [];"boolean" == typeof b && (c = b, b = !1);var e, f, g;return b || (o.createHTMLDocument ? (b = d.implementation.createHTMLDocument(""), e = b.createElement("base"), e.href = d.location.href, b.head.appendChild(e)) : b = d), f = C.exec(a), g = !c && [], f ? [b.createElement(f[1])] : (f = qa([a], b, g), g && g.length && r(g).remove(), r.merge([], f.childNodes));
    }, r.fn.load = function (a, b, c) {
      var d,
          e,
          f,
          g = this,
          h = a.indexOf(" ");return h > -1 && (d = pb(a.slice(h)), a = a.slice(0, h)), r.isFunction(b) ? (c = b, b = void 0) : b && "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && (e = "POST"), g.length > 0 && r.ajax({ url: a, type: e || "GET", dataType: "html", data: b }).done(function (a) {
        f = arguments, g.html(d ? r("<div>").append(r.parseHTML(a)).find(d) : a);
      }).always(c && function (a, b) {
        g.each(function () {
          c.apply(this, f || [a.responseText, b, a]);
        });
      }), this;
    }, r.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {
      r.fn[b] = function (a) {
        return this.on(b, a);
      };
    }), r.expr.pseudos.animated = function (a) {
      return r.grep(r.timers, function (b) {
        return a === b.elem;
      }).length;
    }, r.offset = { setOffset: function setOffset(a, b, c) {
        var d,
            e,
            f,
            g,
            h,
            i,
            j,
            k = r.css(a, "position"),
            l = r(a),
            m = {};"static" === k && (a.style.position = "relative"), h = l.offset(), f = r.css(a, "top"), i = r.css(a, "left"), j = ("absolute" === k || "fixed" === k) && (f + i).indexOf("auto") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), r.isFunction(b) && (b = b.call(a, c, r.extend({}, h))), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using" in b ? b.using.call(a, m) : l.css(m);
      } }, r.fn.extend({ offset: function offset(a) {
        if (arguments.length) return void 0 === a ? this : this.each(function (b) {
          r.offset.setOffset(this, a, b);
        });var b,
            c,
            d,
            e,
            f = this[0];if (f) return f.getClientRects().length ? (d = f.getBoundingClientRect(), b = f.ownerDocument, c = b.documentElement, e = b.defaultView, { top: d.top + e.pageYOffset - c.clientTop, left: d.left + e.pageXOffset - c.clientLeft }) : { top: 0, left: 0 };
      }, position: function position() {
        if (this[0]) {
          var a,
              b,
              c = this[0],
              d = { top: 0, left: 0 };return "fixed" === r.css(c, "position") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), B(a[0], "html") || (d = a.offset()), d = { top: d.top + r.css(a[0], "borderTopWidth", !0), left: d.left + r.css(a[0], "borderLeftWidth", !0) }), { top: b.top - d.top - r.css(c, "marginTop", !0), left: b.left - d.left - r.css(c, "marginLeft", !0) };
        }
      }, offsetParent: function offsetParent() {
        return this.map(function () {
          var a = this.offsetParent;while (a && "static" === r.css(a, "position")) {
            a = a.offsetParent;
          }return a || ra;
        });
      } }), r.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (a, b) {
      var c = "pageYOffset" === b;r.fn[a] = function (d) {
        return T(this, function (a, d, e) {
          var f;return r.isWindow(a) ? f = a : 9 === a.nodeType && (f = a.defaultView), void 0 === e ? f ? f[b] : a[d] : void (f ? f.scrollTo(c ? f.pageXOffset : e, c ? e : f.pageYOffset) : a[d] = e);
        }, a, d, arguments.length);
      };
    }), r.each(["top", "left"], function (a, b) {
      r.cssHooks[b] = Pa(o.pixelPosition, function (a, c) {
        if (c) return c = Oa(a, b), Ma.test(c) ? r(a).position()[b] + "px" : c;
      });
    }), r.each({ Height: "height", Width: "width" }, function (a, b) {
      r.each({ padding: "inner" + a, content: b, "": "outer" + a }, function (c, d) {
        r.fn[d] = function (e, f) {
          var g = arguments.length && (c || "boolean" != typeof e),
              h = c || (e === !0 || f === !0 ? "margin" : "border");return T(this, function (b, c, e) {
            var f;return r.isWindow(b) ? 0 === d.indexOf("outer") ? b["inner" + a] : b.document.documentElement["client" + a] : 9 === b.nodeType ? (f = b.documentElement, Math.max(b.body["scroll" + a], f["scroll" + a], b.body["offset" + a], f["offset" + a], f["client" + a])) : void 0 === e ? r.css(b, c, h) : r.style(b, c, e, h);
          }, b, g ? e : void 0, g);
        };
      });
    }), r.fn.extend({ bind: function bind(a, b, c) {
        return this.on(a, null, b, c);
      }, unbind: function unbind(a, b) {
        return this.off(a, null, b);
      }, delegate: function delegate(a, b, c, d) {
        return this.on(b, a, c, d);
      }, undelegate: function undelegate(a, b, c) {
        return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
      } }), r.holdReady = function (a) {
      a ? r.readyWait++ : r.ready(!0);
    }, r.isArray = Array.isArray, r.parseJSON = JSON.parse, r.nodeName = B, "function" == typeof define && define.amd && define("jquery", [], function () {
      return r;
    });var Vb = a.jQuery,
        Wb = a.$;return r.noConflict = function (b) {
      return a.$ === r && (a.$ = Wb), b && a.jQuery === r && (a.jQuery = Vb), r;
    }, b || (a.jQuery = a.$ = r), r;
  });

  ;browserify_shim__define__module__export__(typeof $ != "undefined" ? $ : window.$);
}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) {
  module.exports = ex;
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],6:[function(require,module,exports){
(function (global){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;jQuery = global.jQuery = require("C:\\Users\\Saray\\projects\\donashop\\src\\js\\deps\\jquery.min.js");
;var __browserify_shim_require__ = require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
  /**
   * Owl Carousel v2.2.1
   * Copyright 2013-2017 David Deutsch
   * Licensed under  ()
   */
  !function (a, b, c, d) {
    function e(b, c) {
      this.settings = null, this.options = a.extend({}, e.Defaults, c), this.$element = a(b), this._handlers = {}, this._plugins = {}, this._supress = {}, this._current = null, this._speed = null, this._coordinates = [], this._breakpoint = null, this._width = null, this._items = [], this._clones = [], this._mergers = [], this._widths = [], this._invalidated = {}, this._pipe = [], this._drag = { time: null, target: null, pointer: null, stage: { start: null, current: null }, direction: null }, this._states = { current: {}, tags: { initializing: ["busy"], animating: ["busy"], dragging: ["interacting"] } }, a.each(["onResize", "onThrottledResize"], a.proxy(function (b, c) {
        this._handlers[c] = a.proxy(this[c], this);
      }, this)), a.each(e.Plugins, a.proxy(function (a, b) {
        this._plugins[a.charAt(0).toLowerCase() + a.slice(1)] = new b(this);
      }, this)), a.each(e.Workers, a.proxy(function (b, c) {
        this._pipe.push({ filter: c.filter, run: a.proxy(c.run, this) });
      }, this)), this.setup(), this.initialize();
    }e.Defaults = { items: 3, loop: !1, center: !1, rewind: !1, mouseDrag: !0, touchDrag: !0, pullDrag: !0, freeDrag: !1, margin: 0, stagePadding: 0, merge: !1, mergeFit: !0, autoWidth: !1, startPosition: 0, rtl: !1, smartSpeed: 250, fluidSpeed: !1, dragEndSpeed: !1, responsive: {}, responsiveRefreshRate: 200, responsiveBaseElement: b, fallbackEasing: "swing", info: !1, nestedItemSelector: !1, itemElement: "div", stageElement: "div", refreshClass: "owl-refresh", loadedClass: "owl-loaded", loadingClass: "owl-loading", rtlClass: "owl-rtl", responsiveClass: "owl-responsive", dragClass: "owl-drag", itemClass: "owl-item", stageClass: "owl-stage", stageOuterClass: "owl-stage-outer", grabClass: "owl-grab" }, e.Width = { Default: "default", Inner: "inner", Outer: "outer" }, e.Type = { Event: "event", State: "state" }, e.Plugins = {}, e.Workers = [{ filter: ["width", "settings"], run: function run() {
        this._width = this.$element.width();
      } }, { filter: ["width", "items", "settings"], run: function run(a) {
        a.current = this._items && this._items[this.relative(this._current)];
      } }, { filter: ["items", "settings"], run: function run() {
        this.$stage.children(".cloned").remove();
      } }, { filter: ["width", "items", "settings"], run: function run(a) {
        var b = this.settings.margin || "",
            c = !this.settings.autoWidth,
            d = this.settings.rtl,
            e = { width: "auto", "margin-left": d ? b : "", "margin-right": d ? "" : b };!c && this.$stage.children().css(e), a.css = e;
      } }, { filter: ["width", "items", "settings"], run: function run(a) {
        var b = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,
            c = null,
            d = this._items.length,
            e = !this.settings.autoWidth,
            f = [];for (a.items = { merge: !1, width: b }; d--;) {
          c = this._mergers[d], c = this.settings.mergeFit && Math.min(c, this.settings.items) || c, a.items.merge = c > 1 || a.items.merge, f[d] = e ? b * c : this._items[d].width();
        }this._widths = f;
      } }, { filter: ["items", "settings"], run: function run() {
        var b = [],
            c = this._items,
            d = this.settings,
            e = Math.max(2 * d.items, 4),
            f = 2 * Math.ceil(c.length / 2),
            g = d.loop && c.length ? d.rewind ? e : Math.max(e, f) : 0,
            h = "",
            i = "";for (g /= 2; g--;) {
          b.push(this.normalize(b.length / 2, !0)), h += c[b[b.length - 1]][0].outerHTML, b.push(this.normalize(c.length - 1 - (b.length - 1) / 2, !0)), i = c[b[b.length - 1]][0].outerHTML + i;
        }this._clones = b, a(h).addClass("cloned").appendTo(this.$stage), a(i).addClass("cloned").prependTo(this.$stage);
      } }, { filter: ["width", "items", "settings"], run: function run() {
        for (var a = this.settings.rtl ? 1 : -1, b = this._clones.length + this._items.length, c = -1, d = 0, e = 0, f = []; ++c < b;) {
          d = f[c - 1] || 0, e = this._widths[this.relative(c)] + this.settings.margin, f.push(d + e * a);
        }this._coordinates = f;
      } }, { filter: ["width", "items", "settings"], run: function run() {
        var a = this.settings.stagePadding,
            b = this._coordinates,
            c = { width: Math.ceil(Math.abs(b[b.length - 1])) + 2 * a, "padding-left": a || "", "padding-right": a || "" };this.$stage.css(c);
      } }, { filter: ["width", "items", "settings"], run: function run(a) {
        var b = this._coordinates.length,
            c = !this.settings.autoWidth,
            d = this.$stage.children();if (c && a.items.merge) for (; b--;) {
          a.css.width = this._widths[this.relative(b)], d.eq(b).css(a.css);
        } else c && (a.css.width = a.items.width, d.css(a.css));
      } }, { filter: ["items"], run: function run() {
        this._coordinates.length < 1 && this.$stage.removeAttr("style");
      } }, { filter: ["width", "items", "settings"], run: function run(a) {
        a.current = a.current ? this.$stage.children().index(a.current) : 0, a.current = Math.max(this.minimum(), Math.min(this.maximum(), a.current)), this.reset(a.current);
      } }, { filter: ["position"], run: function run() {
        this.animate(this.coordinates(this._current));
      } }, { filter: ["width", "position", "items", "settings"], run: function run() {
        var a,
            b,
            c,
            d,
            e = this.settings.rtl ? 1 : -1,
            f = 2 * this.settings.stagePadding,
            g = this.coordinates(this.current()) + f,
            h = g + this.width() * e,
            i = [];for (c = 0, d = this._coordinates.length; c < d; c++) {
          a = this._coordinates[c - 1] || 0, b = Math.abs(this._coordinates[c]) + f * e, (this.op(a, "<=", g) && this.op(a, ">", h) || this.op(b, "<", g) && this.op(b, ">", h)) && i.push(c);
        }this.$stage.children(".active").removeClass("active"), this.$stage.children(":eq(" + i.join("), :eq(") + ")").addClass("active"), this.settings.center && (this.$stage.children(".center").removeClass("center"), this.$stage.children().eq(this.current()).addClass("center"));
      } }], e.prototype.initialize = function () {
      if (this.enter("initializing"), this.trigger("initialize"), this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl), this.settings.autoWidth && !this.is("pre-loading")) {
        var b, c, e;b = this.$element.find("img"), c = this.settings.nestedItemSelector ? "." + this.settings.nestedItemSelector : d, e = this.$element.children(c).width(), b.length && e <= 0 && this.preloadAutoWidthImages(b);
      }this.$element.addClass(this.options.loadingClass), this.$stage = a("<" + this.settings.stageElement + ' class="' + this.settings.stageClass + '"/>').wrap('<div class="' + this.settings.stageOuterClass + '"/>'), this.$element.append(this.$stage.parent()), this.replace(this.$element.children().not(this.$stage.parent())), this.$element.is(":visible") ? this.refresh() : this.invalidate("width"), this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass), this.registerEventHandlers(), this.leave("initializing"), this.trigger("initialized");
    }, e.prototype.setup = function () {
      var b = this.viewport(),
          c = this.options.responsive,
          d = -1,
          e = null;c ? (a.each(c, function (a) {
        a <= b && a > d && (d = Number(a));
      }), e = a.extend({}, this.options, c[d]), "function" == typeof e.stagePadding && (e.stagePadding = e.stagePadding()), delete e.responsive, e.responsiveClass && this.$element.attr("class", this.$element.attr("class").replace(new RegExp("(" + this.options.responsiveClass + "-)\\S+\\s", "g"), "$1" + d))) : e = a.extend({}, this.options), this.trigger("change", { property: { name: "settings", value: e } }), this._breakpoint = d, this.settings = e, this.invalidate("settings"), this.trigger("changed", { property: { name: "settings", value: this.settings } });
    }, e.prototype.optionsLogic = function () {
      this.settings.autoWidth && (this.settings.stagePadding = !1, this.settings.merge = !1);
    }, e.prototype.prepare = function (b) {
      var c = this.trigger("prepare", { content: b });return c.data || (c.data = a("<" + this.settings.itemElement + "/>").addClass(this.options.itemClass).append(b)), this.trigger("prepared", { content: c.data }), c.data;
    }, e.prototype.update = function () {
      for (var b = 0, c = this._pipe.length, d = a.proxy(function (a) {
        return this[a];
      }, this._invalidated), e = {}; b < c;) {
        (this._invalidated.all || a.grep(this._pipe[b].filter, d).length > 0) && this._pipe[b].run(e), b++;
      }this._invalidated = {}, !this.is("valid") && this.enter("valid");
    }, e.prototype.width = function (a) {
      switch (a = a || e.Width.Default) {case e.Width.Inner:case e.Width.Outer:
          return this._width;default:
          return this._width - 2 * this.settings.stagePadding + this.settings.margin;}
    }, e.prototype.refresh = function () {
      this.enter("refreshing"), this.trigger("refresh"), this.setup(), this.optionsLogic(), this.$element.addClass(this.options.refreshClass), this.update(), this.$element.removeClass(this.options.refreshClass), this.leave("refreshing"), this.trigger("refreshed");
    }, e.prototype.onThrottledResize = function () {
      b.clearTimeout(this.resizeTimer), this.resizeTimer = b.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);
    }, e.prototype.onResize = function () {
      return !!this._items.length && this._width !== this.$element.width() && !!this.$element.is(":visible") && (this.enter("resizing"), this.trigger("resize").isDefaultPrevented() ? (this.leave("resizing"), !1) : (this.invalidate("width"), this.refresh(), this.leave("resizing"), void this.trigger("resized")));
    }, e.prototype.registerEventHandlers = function () {
      a.support.transition && this.$stage.on(a.support.transition.end + ".owl.core", a.proxy(this.onTransitionEnd, this)), this.settings.responsive !== !1 && this.on(b, "resize", this._handlers.onThrottledResize), this.settings.mouseDrag && (this.$element.addClass(this.options.dragClass), this.$stage.on("mousedown.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("dragstart.owl.core selectstart.owl.core", function () {
        return !1;
      })), this.settings.touchDrag && (this.$stage.on("touchstart.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("touchcancel.owl.core", a.proxy(this.onDragEnd, this)));
    }, e.prototype.onDragStart = function (b) {
      var d = null;3 !== b.which && (a.support.transform ? (d = this.$stage.css("transform").replace(/.*\(|\)| /g, "").split(","), d = { x: d[16 === d.length ? 12 : 4], y: d[16 === d.length ? 13 : 5] }) : (d = this.$stage.position(), d = { x: this.settings.rtl ? d.left + this.$stage.width() - this.width() + this.settings.margin : d.left, y: d.top }), this.is("animating") && (a.support.transform ? this.animate(d.x) : this.$stage.stop(), this.invalidate("position")), this.$element.toggleClass(this.options.grabClass, "mousedown" === b.type), this.speed(0), this._drag.time = new Date().getTime(), this._drag.target = a(b.target), this._drag.stage.start = d, this._drag.stage.current = d, this._drag.pointer = this.pointer(b), a(c).on("mouseup.owl.core touchend.owl.core", a.proxy(this.onDragEnd, this)), a(c).one("mousemove.owl.core touchmove.owl.core", a.proxy(function (b) {
        var d = this.difference(this._drag.pointer, this.pointer(b));a(c).on("mousemove.owl.core touchmove.owl.core", a.proxy(this.onDragMove, this)), Math.abs(d.x) < Math.abs(d.y) && this.is("valid") || (b.preventDefault(), this.enter("dragging"), this.trigger("drag"));
      }, this)));
    }, e.prototype.onDragMove = function (a) {
      var b = null,
          c = null,
          d = null,
          e = this.difference(this._drag.pointer, this.pointer(a)),
          f = this.difference(this._drag.stage.start, e);this.is("dragging") && (a.preventDefault(), this.settings.loop ? (b = this.coordinates(this.minimum()), c = this.coordinates(this.maximum() + 1) - b, f.x = ((f.x - b) % c + c) % c + b) : (b = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum()), c = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum()), d = this.settings.pullDrag ? -1 * e.x / 5 : 0, f.x = Math.max(Math.min(f.x, b + d), c + d)), this._drag.stage.current = f, this.animate(f.x));
    }, e.prototype.onDragEnd = function (b) {
      var d = this.difference(this._drag.pointer, this.pointer(b)),
          e = this._drag.stage.current,
          f = d.x > 0 ^ this.settings.rtl ? "left" : "right";a(c).off(".owl.core"), this.$element.removeClass(this.options.grabClass), (0 !== d.x && this.is("dragging") || !this.is("valid")) && (this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed), this.current(this.closest(e.x, 0 !== d.x ? f : this._drag.direction)), this.invalidate("position"), this.update(), this._drag.direction = f, (Math.abs(d.x) > 3 || new Date().getTime() - this._drag.time > 300) && this._drag.target.one("click.owl.core", function () {
        return !1;
      })), this.is("dragging") && (this.leave("dragging"), this.trigger("dragged"));
    }, e.prototype.closest = function (b, c) {
      var d = -1,
          e = 30,
          f = this.width(),
          g = this.coordinates();return this.settings.freeDrag || a.each(g, a.proxy(function (a, h) {
        return "left" === c && b > h - e && b < h + e ? d = a : "right" === c && b > h - f - e && b < h - f + e ? d = a + 1 : this.op(b, "<", h) && this.op(b, ">", g[a + 1] || h - f) && (d = "left" === c ? a + 1 : a), d === -1;
      }, this)), this.settings.loop || (this.op(b, ">", g[this.minimum()]) ? d = b = this.minimum() : this.op(b, "<", g[this.maximum()]) && (d = b = this.maximum())), d;
    }, e.prototype.animate = function (b) {
      var c = this.speed() > 0;this.is("animating") && this.onTransitionEnd(), c && (this.enter("animating"), this.trigger("translate")), a.support.transform3d && a.support.transition ? this.$stage.css({ transform: "translate3d(" + b + "px,0px,0px)", transition: this.speed() / 1e3 + "s" }) : c ? this.$stage.animate({ left: b + "px" }, this.speed(), this.settings.fallbackEasing, a.proxy(this.onTransitionEnd, this)) : this.$stage.css({ left: b + "px" });
    }, e.prototype.is = function (a) {
      return this._states.current[a] && this._states.current[a] > 0;
    }, e.prototype.current = function (a) {
      if (a === d) return this._current;if (0 === this._items.length) return d;if (a = this.normalize(a), this._current !== a) {
        var b = this.trigger("change", { property: { name: "position", value: a } });b.data !== d && (a = this.normalize(b.data)), this._current = a, this.invalidate("position"), this.trigger("changed", { property: { name: "position", value: this._current } });
      }return this._current;
    }, e.prototype.invalidate = function (b) {
      return "string" === a.type(b) && (this._invalidated[b] = !0, this.is("valid") && this.leave("valid")), a.map(this._invalidated, function (a, b) {
        return b;
      });
    }, e.prototype.reset = function (a) {
      a = this.normalize(a), a !== d && (this._speed = 0, this._current = a, this.suppress(["translate", "translated"]), this.animate(this.coordinates(a)), this.release(["translate", "translated"]));
    }, e.prototype.normalize = function (a, b) {
      var c = this._items.length,
          e = b ? 0 : this._clones.length;return !this.isNumeric(a) || c < 1 ? a = d : (a < 0 || a >= c + e) && (a = ((a - e / 2) % c + c) % c + e / 2), a;
    }, e.prototype.relative = function (a) {
      return a -= this._clones.length / 2, this.normalize(a, !0);
    }, e.prototype.maximum = function (a) {
      var b,
          c,
          d,
          e = this.settings,
          f = this._coordinates.length;if (e.loop) f = this._clones.length / 2 + this._items.length - 1;else if (e.autoWidth || e.merge) {
        for (b = this._items.length, c = this._items[--b].width(), d = this.$element.width(); b-- && (c += this._items[b].width() + this.settings.margin, !(c > d));) {}f = b + 1;
      } else f = e.center ? this._items.length - 1 : this._items.length - e.items;return a && (f -= this._clones.length / 2), Math.max(f, 0);
    }, e.prototype.minimum = function (a) {
      return a ? 0 : this._clones.length / 2;
    }, e.prototype.items = function (a) {
      return a === d ? this._items.slice() : (a = this.normalize(a, !0), this._items[a]);
    }, e.prototype.mergers = function (a) {
      return a === d ? this._mergers.slice() : (a = this.normalize(a, !0), this._mergers[a]);
    }, e.prototype.clones = function (b) {
      var c = this._clones.length / 2,
          e = c + this._items.length,
          f = function f(a) {
        return a % 2 === 0 ? e + a / 2 : c - (a + 1) / 2;
      };return b === d ? a.map(this._clones, function (a, b) {
        return f(b);
      }) : a.map(this._clones, function (a, c) {
        return a === b ? f(c) : null;
      });
    }, e.prototype.speed = function (a) {
      return a !== d && (this._speed = a), this._speed;
    }, e.prototype.coordinates = function (b) {
      var c,
          e = 1,
          f = b - 1;return b === d ? a.map(this._coordinates, a.proxy(function (a, b) {
        return this.coordinates(b);
      }, this)) : (this.settings.center ? (this.settings.rtl && (e = -1, f = b + 1), c = this._coordinates[b], c += (this.width() - c + (this._coordinates[f] || 0)) / 2 * e) : c = this._coordinates[f] || 0, c = Math.ceil(c));
    }, e.prototype.duration = function (a, b, c) {
      return 0 === c ? 0 : Math.min(Math.max(Math.abs(b - a), 1), 6) * Math.abs(c || this.settings.smartSpeed);
    }, e.prototype.to = function (a, b) {
      var c = this.current(),
          d = null,
          e = a - this.relative(c),
          f = (e > 0) - (e < 0),
          g = this._items.length,
          h = this.minimum(),
          i = this.maximum();this.settings.loop ? (!this.settings.rewind && Math.abs(e) > g / 2 && (e += f * -1 * g), a = c + e, d = ((a - h) % g + g) % g + h, d !== a && d - e <= i && d - e > 0 && (c = d - e, a = d, this.reset(c))) : this.settings.rewind ? (i += 1, a = (a % i + i) % i) : a = Math.max(h, Math.min(i, a)), this.speed(this.duration(c, a, b)), this.current(a), this.$element.is(":visible") && this.update();
    }, e.prototype.next = function (a) {
      a = a || !1, this.to(this.relative(this.current()) + 1, a);
    }, e.prototype.prev = function (a) {
      a = a || !1, this.to(this.relative(this.current()) - 1, a);
    }, e.prototype.onTransitionEnd = function (a) {
      if (a !== d && (a.stopPropagation(), (a.target || a.srcElement || a.originalTarget) !== this.$stage.get(0))) return !1;this.leave("animating"), this.trigger("translated");
    }, e.prototype.viewport = function () {
      var d;return this.options.responsiveBaseElement !== b ? d = a(this.options.responsiveBaseElement).width() : b.innerWidth ? d = b.innerWidth : c.documentElement && c.documentElement.clientWidth ? d = c.documentElement.clientWidth : console.warn("Can not detect viewport width."), d;
    }, e.prototype.replace = function (b) {
      this.$stage.empty(), this._items = [], b && (b = b instanceof jQuery ? b : a(b)), this.settings.nestedItemSelector && (b = b.find("." + this.settings.nestedItemSelector)), b.filter(function () {
        return 1 === this.nodeType;
      }).each(a.proxy(function (a, b) {
        b = this.prepare(b), this.$stage.append(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1);
      }, this)), this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0), this.invalidate("items");
    }, e.prototype.add = function (b, c) {
      var e = this.relative(this._current);c = c === d ? this._items.length : this.normalize(c, !0), b = b instanceof jQuery ? b : a(b), this.trigger("add", { content: b, position: c }), b = this.prepare(b), 0 === this._items.length || c === this._items.length ? (0 === this._items.length && this.$stage.append(b), 0 !== this._items.length && this._items[c - 1].after(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)) : (this._items[c].before(b), this._items.splice(c, 0, b), this._mergers.splice(c, 0, 1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)), this._items[e] && this.reset(this._items[e].index()), this.invalidate("items"), this.trigger("added", { content: b, position: c });
    }, e.prototype.remove = function (a) {
      a = this.normalize(a, !0), a !== d && (this.trigger("remove", { content: this._items[a], position: a }), this._items[a].remove(), this._items.splice(a, 1), this._mergers.splice(a, 1), this.invalidate("items"), this.trigger("removed", { content: null, position: a }));
    }, e.prototype.preloadAutoWidthImages = function (b) {
      b.each(a.proxy(function (b, c) {
        this.enter("pre-loading"), c = a(c), a(new Image()).one("load", a.proxy(function (a) {
          c.attr("src", a.target.src), c.css("opacity", 1), this.leave("pre-loading"), !this.is("pre-loading") && !this.is("initializing") && this.refresh();
        }, this)).attr("src", c.attr("src") || c.attr("data-src") || c.attr("data-src-retina"));
      }, this));
    }, e.prototype.destroy = function () {
      this.$element.off(".owl.core"), this.$stage.off(".owl.core"), a(c).off(".owl.core"), this.settings.responsive !== !1 && (b.clearTimeout(this.resizeTimer), this.off(b, "resize", this._handlers.onThrottledResize));for (var d in this._plugins) {
        this._plugins[d].destroy();
      }this.$stage.children(".cloned").remove(), this.$stage.unwrap(), this.$stage.children().contents().unwrap(), this.$stage.children().unwrap(), this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class", this.$element.attr("class").replace(new RegExp(this.options.responsiveClass + "-\\S+\\s", "g"), "")).removeData("owl.carousel");
    }, e.prototype.op = function (a, b, c) {
      var d = this.settings.rtl;switch (b) {case "<":
          return d ? a > c : a < c;case ">":
          return d ? a < c : a > c;case ">=":
          return d ? a <= c : a >= c;case "<=":
          return d ? a >= c : a <= c;}
    }, e.prototype.on = function (a, b, c, d) {
      a.addEventListener ? a.addEventListener(b, c, d) : a.attachEvent && a.attachEvent("on" + b, c);
    }, e.prototype.off = function (a, b, c, d) {
      a.removeEventListener ? a.removeEventListener(b, c, d) : a.detachEvent && a.detachEvent("on" + b, c);
    }, e.prototype.trigger = function (b, c, d, f, g) {
      var h = { item: { count: this._items.length, index: this.current() } },
          i = a.camelCase(a.grep(["on", b, d], function (a) {
        return a;
      }).join("-").toLowerCase()),
          j = a.Event([b, "owl", d || "carousel"].join(".").toLowerCase(), a.extend({ relatedTarget: this }, h, c));return this._supress[b] || (a.each(this._plugins, function (a, b) {
        b.onTrigger && b.onTrigger(j);
      }), this.register({ type: e.Type.Event, name: b }), this.$element.trigger(j), this.settings && "function" == typeof this.settings[i] && this.settings[i].call(this, j)), j;
    }, e.prototype.enter = function (b) {
      a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
        this._states.current[b] === d && (this._states.current[b] = 0), this._states.current[b]++;
      }, this));
    }, e.prototype.leave = function (b) {
      a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
        this._states.current[b]--;
      }, this));
    }, e.prototype.register = function (b) {
      if (b.type === e.Type.Event) {
        if (a.event.special[b.name] || (a.event.special[b.name] = {}), !a.event.special[b.name].owl) {
          var c = a.event.special[b.name]._default;a.event.special[b.name]._default = function (a) {
            return !c || !c.apply || a.namespace && a.namespace.indexOf("owl") !== -1 ? a.namespace && a.namespace.indexOf("owl") > -1 : c.apply(this, arguments);
          }, a.event.special[b.name].owl = !0;
        }
      } else b.type === e.Type.State && (this._states.tags[b.name] ? this._states.tags[b.name] = this._states.tags[b.name].concat(b.tags) : this._states.tags[b.name] = b.tags, this._states.tags[b.name] = a.grep(this._states.tags[b.name], a.proxy(function (c, d) {
        return a.inArray(c, this._states.tags[b.name]) === d;
      }, this)));
    }, e.prototype.suppress = function (b) {
      a.each(b, a.proxy(function (a, b) {
        this._supress[b] = !0;
      }, this));
    }, e.prototype.release = function (b) {
      a.each(b, a.proxy(function (a, b) {
        delete this._supress[b];
      }, this));
    }, e.prototype.pointer = function (a) {
      var c = { x: null, y: null };return a = a.originalEvent || a || b.event, a = a.touches && a.touches.length ? a.touches[0] : a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : a, a.pageX ? (c.x = a.pageX, c.y = a.pageY) : (c.x = a.clientX, c.y = a.clientY), c;
    }, e.prototype.isNumeric = function (a) {
      return !isNaN(parseFloat(a));
    }, e.prototype.difference = function (a, b) {
      return { x: a.x - b.x, y: a.y - b.y };
    }, a.fn.owlCarousel = function (b) {
      var c = Array.prototype.slice.call(arguments, 1);return this.each(function () {
        var d = a(this),
            f = d.data("owl.carousel");f || (f = new e(this, "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b), d.data("owl.carousel", f), a.each(["next", "prev", "to", "destroy", "refresh", "replace", "add", "remove"], function (b, c) {
          f.register({ type: e.Type.Event, name: c }), f.$element.on(c + ".owl.carousel.core", a.proxy(function (a) {
            a.namespace && a.relatedTarget !== this && (this.suppress([c]), f[c].apply(this, [].slice.call(arguments, 1)), this.release([c]));
          }, f));
        })), "string" == typeof b && "_" !== b.charAt(0) && f[b].apply(f, c);
      });
    }, a.fn.owlCarousel.Constructor = e;
  }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
    var e = function e(b) {
      this._core = b, this._interval = null, this._visible = null, this._handlers = { "initialized.owl.carousel": a.proxy(function (a) {
          a.namespace && this._core.settings.autoRefresh && this.watch();
        }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
    };e.Defaults = { autoRefresh: !0, autoRefreshInterval: 500 }, e.prototype.watch = function () {
      this._interval || (this._visible = this._core.$element.is(":visible"), this._interval = b.setInterval(a.proxy(this.refresh, this), this._core.settings.autoRefreshInterval));
    }, e.prototype.refresh = function () {
      this._core.$element.is(":visible") !== this._visible && (this._visible = !this._visible, this._core.$element.toggleClass("owl-hidden", !this._visible), this._visible && this._core.invalidate("width") && this._core.refresh());
    }, e.prototype.destroy = function () {
      var a, c;b.clearInterval(this._interval);for (a in this._handlers) {
        this._core.$element.off(a, this._handlers[a]);
      }for (c in Object.getOwnPropertyNames(this)) {
        "function" != typeof this[c] && (this[c] = null);
      }
    }, a.fn.owlCarousel.Constructor.Plugins.AutoRefresh = e;
  }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
    var e = function e(b) {
      this._core = b, this._loaded = [], this._handlers = { "initialized.owl.carousel change.owl.carousel resized.owl.carousel": a.proxy(function (b) {
          if (b.namespace && this._core.settings && this._core.settings.lazyLoad && (b.property && "position" == b.property.name || "initialized" == b.type)) for (var c = this._core.settings, e = c.center && Math.ceil(c.items / 2) || c.items, f = c.center && e * -1 || 0, g = (b.property && b.property.value !== d ? b.property.value : this._core.current()) + f, h = this._core.clones().length, i = a.proxy(function (a, b) {
            this.load(b);
          }, this); f++ < e;) {
            this.load(h / 2 + this._core.relative(g)), h && a.each(this._core.clones(this._core.relative(g)), i), g++;
          }
        }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
    };e.Defaults = { lazyLoad: !1 }, e.prototype.load = function (c) {
      var d = this._core.$stage.children().eq(c),
          e = d && d.find(".owl-lazy");!e || a.inArray(d.get(0), this._loaded) > -1 || (e.each(a.proxy(function (c, d) {
        var e,
            f = a(d),
            g = b.devicePixelRatio > 1 && f.attr("data-src-retina") || f.attr("data-src");this._core.trigger("load", { element: f, url: g }, "lazy"), f.is("img") ? f.one("load.owl.lazy", a.proxy(function () {
          f.css("opacity", 1), this._core.trigger("loaded", { element: f, url: g }, "lazy");
        }, this)).attr("src", g) : (e = new Image(), e.onload = a.proxy(function () {
          f.css({ "background-image": 'url("' + g + '")', opacity: "1" }), this._core.trigger("loaded", { element: f, url: g }, "lazy");
        }, this), e.src = g);
      }, this)), this._loaded.push(d.get(0)));
    }, e.prototype.destroy = function () {
      var a, b;for (a in this.handlers) {
        this._core.$element.off(a, this.handlers[a]);
      }for (b in Object.getOwnPropertyNames(this)) {
        "function" != typeof this[b] && (this[b] = null);
      }
    }, a.fn.owlCarousel.Constructor.Plugins.Lazy = e;
  }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
    var e = function e(b) {
      this._core = b, this._handlers = { "initialized.owl.carousel refreshed.owl.carousel": a.proxy(function (a) {
          a.namespace && this._core.settings.autoHeight && this.update();
        }, this), "changed.owl.carousel": a.proxy(function (a) {
          a.namespace && this._core.settings.autoHeight && "position" == a.property.name && this.update();
        }, this), "loaded.owl.lazy": a.proxy(function (a) {
          a.namespace && this._core.settings.autoHeight && a.element.closest("." + this._core.settings.itemClass).index() === this._core.current() && this.update();
        }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
    };e.Defaults = { autoHeight: !1, autoHeightClass: "owl-height" }, e.prototype.update = function () {
      var b = this._core._current,
          c = b + this._core.settings.items,
          d = this._core.$stage.children().toArray().slice(b, c),
          e = [],
          f = 0;a.each(d, function (b, c) {
        e.push(a(c).height());
      }), f = Math.max.apply(null, e), this._core.$stage.parent().height(f).addClass(this._core.settings.autoHeightClass);
    }, e.prototype.destroy = function () {
      var a, b;for (a in this._handlers) {
        this._core.$element.off(a, this._handlers[a]);
      }for (b in Object.getOwnPropertyNames(this)) {
        "function" != typeof this[b] && (this[b] = null);
      }
    }, a.fn.owlCarousel.Constructor.Plugins.AutoHeight = e;
  }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
    var e = function e(b) {
      this._core = b, this._videos = {}, this._playing = null, this._handlers = { "initialized.owl.carousel": a.proxy(function (a) {
          a.namespace && this._core.register({ type: "state", name: "playing", tags: ["interacting"] });
        }, this), "resize.owl.carousel": a.proxy(function (a) {
          a.namespace && this._core.settings.video && this.isInFullScreen() && a.preventDefault();
        }, this), "refreshed.owl.carousel": a.proxy(function (a) {
          a.namespace && this._core.is("resizing") && this._core.$stage.find(".cloned .owl-video-frame").remove();
        }, this), "changed.owl.carousel": a.proxy(function (a) {
          a.namespace && "position" === a.property.name && this._playing && this.stop();
        }, this), "prepared.owl.carousel": a.proxy(function (b) {
          if (b.namespace) {
            var c = a(b.content).find(".owl-video");c.length && (c.css("display", "none"), this.fetch(c, a(b.content)));
          }
        }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._core.$element.on("click.owl.video", ".owl-video-play-icon", a.proxy(function (a) {
        this.play(a);
      }, this));
    };e.Defaults = { video: !1, videoHeight: !1, videoWidth: !1 }, e.prototype.fetch = function (a, b) {
      var c = function () {
        return a.attr("data-vimeo-id") ? "vimeo" : a.attr("data-vzaar-id") ? "vzaar" : "youtube";
      }(),
          d = a.attr("data-vimeo-id") || a.attr("data-youtube-id") || a.attr("data-vzaar-id"),
          e = a.attr("data-width") || this._core.settings.videoWidth,
          f = a.attr("data-height") || this._core.settings.videoHeight,
          g = a.attr("href");if (!g) throw new Error("Missing video URL.");if (d = g.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/), d[3].indexOf("youtu") > -1) c = "youtube";else if (d[3].indexOf("vimeo") > -1) c = "vimeo";else {
        if (!(d[3].indexOf("vzaar") > -1)) throw new Error("Video URL not supported.");c = "vzaar";
      }d = d[6], this._videos[g] = { type: c, id: d, width: e, height: f }, b.attr("data-video", g), this.thumbnail(a, this._videos[g]);
    }, e.prototype.thumbnail = function (b, c) {
      var d,
          e,
          f,
          g = c.width && c.height ? 'style="width:' + c.width + "px;height:" + c.height + 'px;"' : "",
          h = b.find("img"),
          i = "src",
          j = "",
          k = this._core.settings,
          l = function l(a) {
        e = '<div class="owl-video-play-icon"></div>', d = k.lazyLoad ? '<div class="owl-video-tn ' + j + '" ' + i + '="' + a + '"></div>' : '<div class="owl-video-tn" style="opacity:1;background-image:url(' + a + ')"></div>', b.after(d), b.after(e);
      };if (b.wrap('<div class="owl-video-wrapper"' + g + "></div>"), this._core.settings.lazyLoad && (i = "data-src", j = "owl-lazy"), h.length) return l(h.attr(i)), h.remove(), !1;"youtube" === c.type ? (f = "//img.youtube.com/vi/" + c.id + "/hqdefault.jpg", l(f)) : "vimeo" === c.type ? a.ajax({ type: "GET", url: "//vimeo.com/api/v2/video/" + c.id + ".json", jsonp: "callback", dataType: "jsonp", success: function success(a) {
          f = a[0].thumbnail_large, l(f);
        } }) : "vzaar" === c.type && a.ajax({ type: "GET", url: "//vzaar.com/api/videos/" + c.id + ".json", jsonp: "callback", dataType: "jsonp", success: function success(a) {
          f = a.framegrab_url, l(f);
        } });
    }, e.prototype.stop = function () {
      this._core.trigger("stop", null, "video"), this._playing.find(".owl-video-frame").remove(), this._playing.removeClass("owl-video-playing"), this._playing = null, this._core.leave("playing"), this._core.trigger("stopped", null, "video");
    }, e.prototype.play = function (b) {
      var c,
          d = a(b.target),
          e = d.closest("." + this._core.settings.itemClass),
          f = this._videos[e.attr("data-video")],
          g = f.width || "100%",
          h = f.height || this._core.$stage.height();this._playing || (this._core.enter("playing"), this._core.trigger("play", null, "video"), e = this._core.items(this._core.relative(e.index())), this._core.reset(e.index()), "youtube" === f.type ? c = '<iframe width="' + g + '" height="' + h + '" src="//www.youtube.com/embed/' + f.id + "?autoplay=1&rel=0&v=" + f.id + '" frameborder="0" allowfullscreen></iframe>' : "vimeo" === f.type ? c = '<iframe src="//player.vimeo.com/video/' + f.id + '?autoplay=1" width="' + g + '" height="' + h + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>' : "vzaar" === f.type && (c = '<iframe frameborder="0"height="' + h + '"width="' + g + '" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/' + f.id + '/player?autoplay=true"></iframe>'), a('<div class="owl-video-frame">' + c + "</div>").insertAfter(e.find(".owl-video")), this._playing = e.addClass("owl-video-playing"));
    }, e.prototype.isInFullScreen = function () {
      var b = c.fullscreenElement || c.mozFullScreenElement || c.webkitFullscreenElement;return b && a(b).parent().hasClass("owl-video-frame");
    }, e.prototype.destroy = function () {
      var a, b;this._core.$element.off("click.owl.video");for (a in this._handlers) {
        this._core.$element.off(a, this._handlers[a]);
      }for (b in Object.getOwnPropertyNames(this)) {
        "function" != typeof this[b] && (this[b] = null);
      }
    }, a.fn.owlCarousel.Constructor.Plugins.Video = e;
  }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
    var e = function e(b) {
      this.core = b, this.core.options = a.extend({}, e.Defaults, this.core.options), this.swapping = !0, this.previous = d, this.next = d, this.handlers = { "change.owl.carousel": a.proxy(function (a) {
          a.namespace && "position" == a.property.name && (this.previous = this.core.current(), this.next = a.property.value);
        }, this), "drag.owl.carousel dragged.owl.carousel translated.owl.carousel": a.proxy(function (a) {
          a.namespace && (this.swapping = "translated" == a.type);
        }, this), "translate.owl.carousel": a.proxy(function (a) {
          a.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn) && this.swap();
        }, this) }, this.core.$element.on(this.handlers);
    };e.Defaults = { animateOut: !1, animateIn: !1 }, e.prototype.swap = function () {
      if (1 === this.core.settings.items && a.support.animation && a.support.transition) {
        this.core.speed(0);var b,
            c = a.proxy(this.clear, this),
            d = this.core.$stage.children().eq(this.previous),
            e = this.core.$stage.children().eq(this.next),
            f = this.core.settings.animateIn,
            g = this.core.settings.animateOut;this.core.current() !== this.previous && (g && (b = this.core.coordinates(this.previous) - this.core.coordinates(this.next), d.one(a.support.animation.end, c).css({ left: b + "px" }).addClass("animated owl-animated-out").addClass(g)), f && e.one(a.support.animation.end, c).addClass("animated owl-animated-in").addClass(f));
      }
    }, e.prototype.clear = function (b) {
      a(b.target).css({ left: "" }).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut), this.core.onTransitionEnd();
    }, e.prototype.destroy = function () {
      var a, b;for (a in this.handlers) {
        this.core.$element.off(a, this.handlers[a]);
      }for (b in Object.getOwnPropertyNames(this)) {
        "function" != typeof this[b] && (this[b] = null);
      }
    }, a.fn.owlCarousel.Constructor.Plugins.Animate = e;
  }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
    var e = function e(b) {
      this._core = b, this._timeout = null, this._paused = !1, this._handlers = { "changed.owl.carousel": a.proxy(function (a) {
          a.namespace && "settings" === a.property.name ? this._core.settings.autoplay ? this.play() : this.stop() : a.namespace && "position" === a.property.name && this._core.settings.autoplay && this._setAutoPlayInterval();
        }, this), "initialized.owl.carousel": a.proxy(function (a) {
          a.namespace && this._core.settings.autoplay && this.play();
        }, this), "play.owl.autoplay": a.proxy(function (a, b, c) {
          a.namespace && this.play(b, c);
        }, this), "stop.owl.autoplay": a.proxy(function (a) {
          a.namespace && this.stop();
        }, this), "mouseover.owl.autoplay": a.proxy(function () {
          this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
        }, this), "mouseleave.owl.autoplay": a.proxy(function () {
          this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.play();
        }, this), "touchstart.owl.core": a.proxy(function () {
          this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
        }, this), "touchend.owl.core": a.proxy(function () {
          this._core.settings.autoplayHoverPause && this.play();
        }, this) }, this._core.$element.on(this._handlers), this._core.options = a.extend({}, e.Defaults, this._core.options);
    };e.Defaults = { autoplay: !1, autoplayTimeout: 5e3, autoplayHoverPause: !1, autoplaySpeed: !1 }, e.prototype.play = function (a, b) {
      this._paused = !1, this._core.is("rotating") || (this._core.enter("rotating"), this._setAutoPlayInterval());
    }, e.prototype._getNextTimeout = function (d, e) {
      return this._timeout && b.clearTimeout(this._timeout), b.setTimeout(a.proxy(function () {
        this._paused || this._core.is("busy") || this._core.is("interacting") || c.hidden || this._core.next(e || this._core.settings.autoplaySpeed);
      }, this), d || this._core.settings.autoplayTimeout);
    }, e.prototype._setAutoPlayInterval = function () {
      this._timeout = this._getNextTimeout();
    }, e.prototype.stop = function () {
      this._core.is("rotating") && (b.clearTimeout(this._timeout), this._core.leave("rotating"));
    }, e.prototype.pause = function () {
      this._core.is("rotating") && (this._paused = !0);
    }, e.prototype.destroy = function () {
      var a, b;this.stop();for (a in this._handlers) {
        this._core.$element.off(a, this._handlers[a]);
      }for (b in Object.getOwnPropertyNames(this)) {
        "function" != typeof this[b] && (this[b] = null);
      }
    }, a.fn.owlCarousel.Constructor.Plugins.autoplay = e;
  }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
    "use strict";
    var e = function e(b) {
      this._core = b, this._initialized = !1, this._pages = [], this._controls = {}, this._templates = [], this.$element = this._core.$element, this._overrides = { next: this._core.next, prev: this._core.prev, to: this._core.to }, this._handlers = { "prepared.owl.carousel": a.proxy(function (b) {
          b.namespace && this._core.settings.dotsData && this._templates.push('<div class="' + this._core.settings.dotClass + '">' + a(b.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot") + "</div>");
        }, this), "added.owl.carousel": a.proxy(function (a) {
          a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 0, this._templates.pop());
        }, this), "remove.owl.carousel": a.proxy(function (a) {
          a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 1);
        }, this), "changed.owl.carousel": a.proxy(function (a) {
          a.namespace && "position" == a.property.name && this.draw();
        }, this), "initialized.owl.carousel": a.proxy(function (a) {
          a.namespace && !this._initialized && (this._core.trigger("initialize", null, "navigation"), this.initialize(), this.update(), this.draw(), this._initialized = !0, this._core.trigger("initialized", null, "navigation"));
        }, this), "refreshed.owl.carousel": a.proxy(function (a) {
          a.namespace && this._initialized && (this._core.trigger("refresh", null, "navigation"), this.update(), this.draw(), this._core.trigger("refreshed", null, "navigation"));
        }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers);
    };e.Defaults = { nav: !1, navText: ["prev", "next"], navSpeed: !1, navElement: "div", navContainer: !1, navContainerClass: "owl-nav", navClass: ["owl-prev", "owl-next"], slideBy: 1, dotClass: "owl-dot", dotsClass: "owl-dots", dots: !0, dotsEach: !1, dotsData: !1, dotsSpeed: !1, dotsContainer: !1 }, e.prototype.initialize = function () {
      var b,
          c = this._core.settings;this._controls.$relative = (c.navContainer ? a(c.navContainer) : a("<div>").addClass(c.navContainerClass).appendTo(this.$element)).addClass("disabled"), this._controls.$previous = a("<" + c.navElement + ">").addClass(c.navClass[0]).html(c.navText[0]).prependTo(this._controls.$relative).on("click", a.proxy(function (a) {
        this.prev(c.navSpeed);
      }, this)), this._controls.$next = a("<" + c.navElement + ">").addClass(c.navClass[1]).html(c.navText[1]).appendTo(this._controls.$relative).on("click", a.proxy(function (a) {
        this.next(c.navSpeed);
      }, this)), c.dotsData || (this._templates = [a("<div>").addClass(c.dotClass).append(a("<span>")).prop("outerHTML")]), this._controls.$absolute = (c.dotsContainer ? a(c.dotsContainer) : a("<div>").addClass(c.dotsClass).appendTo(this.$element)).addClass("disabled"), this._controls.$absolute.on("click", "div", a.proxy(function (b) {
        var d = a(b.target).parent().is(this._controls.$absolute) ? a(b.target).index() : a(b.target).parent().index();b.preventDefault(), this.to(d, c.dotsSpeed);
      }, this));for (b in this._overrides) {
        this._core[b] = a.proxy(this[b], this);
      }
    }, e.prototype.destroy = function () {
      var a, b, c, d;for (a in this._handlers) {
        this.$element.off(a, this._handlers[a]);
      }for (b in this._controls) {
        this._controls[b].remove();
      }for (d in this.overides) {
        this._core[d] = this._overrides[d];
      }for (c in Object.getOwnPropertyNames(this)) {
        "function" != typeof this[c] && (this[c] = null);
      }
    }, e.prototype.update = function () {
      var a,
          b,
          c,
          d = this._core.clones().length / 2,
          e = d + this._core.items().length,
          f = this._core.maximum(!0),
          g = this._core.settings,
          h = g.center || g.autoWidth || g.dotsData ? 1 : g.dotsEach || g.items;if ("page" !== g.slideBy && (g.slideBy = Math.min(g.slideBy, g.items)), g.dots || "page" == g.slideBy) for (this._pages = [], a = d, b = 0, c = 0; a < e; a++) {
        if (b >= h || 0 === b) {
          if (this._pages.push({ start: Math.min(f, a - d), end: a - d + h - 1 }), Math.min(f, a - d) === f) break;b = 0, ++c;
        }b += this._core.mergers(this._core.relative(a));
      }
    }, e.prototype.draw = function () {
      var b,
          c = this._core.settings,
          d = this._core.items().length <= c.items,
          e = this._core.relative(this._core.current()),
          f = c.loop || c.rewind;this._controls.$relative.toggleClass("disabled", !c.nav || d), c.nav && (this._controls.$previous.toggleClass("disabled", !f && e <= this._core.minimum(!0)), this._controls.$next.toggleClass("disabled", !f && e >= this._core.maximum(!0))), this._controls.$absolute.toggleClass("disabled", !c.dots || d), c.dots && (b = this._pages.length - this._controls.$absolute.children().length, c.dotsData && 0 !== b ? this._controls.$absolute.html(this._templates.join("")) : b > 0 ? this._controls.$absolute.append(new Array(b + 1).join(this._templates[0])) : b < 0 && this._controls.$absolute.children().slice(b).remove(), this._controls.$absolute.find(".active").removeClass("active"), this._controls.$absolute.children().eq(a.inArray(this.current(), this._pages)).addClass("active"));
    }, e.prototype.onTrigger = function (b) {
      var c = this._core.settings;b.page = { index: a.inArray(this.current(), this._pages), count: this._pages.length, size: c && (c.center || c.autoWidth || c.dotsData ? 1 : c.dotsEach || c.items) };
    }, e.prototype.current = function () {
      var b = this._core.relative(this._core.current());return a.grep(this._pages, a.proxy(function (a, c) {
        return a.start <= b && a.end >= b;
      }, this)).pop();
    }, e.prototype.getPosition = function (b) {
      var c,
          d,
          e = this._core.settings;return "page" == e.slideBy ? (c = a.inArray(this.current(), this._pages), d = this._pages.length, b ? ++c : --c, c = this._pages[(c % d + d) % d].start) : (c = this._core.relative(this._core.current()), d = this._core.items().length, b ? c += e.slideBy : c -= e.slideBy), c;
    }, e.prototype.next = function (b) {
      a.proxy(this._overrides.to, this._core)(this.getPosition(!0), b);
    }, e.prototype.prev = function (b) {
      a.proxy(this._overrides.to, this._core)(this.getPosition(!1), b);
    }, e.prototype.to = function (b, c, d) {
      var e;!d && this._pages.length ? (e = this._pages.length, a.proxy(this._overrides.to, this._core)(this._pages[(b % e + e) % e].start, c)) : a.proxy(this._overrides.to, this._core)(b, c);
    }, a.fn.owlCarousel.Constructor.Plugins.Navigation = e;
  }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
    "use strict";
    var e = function e(c) {
      this._core = c, this._hashes = {}, this.$element = this._core.$element, this._handlers = { "initialized.owl.carousel": a.proxy(function (c) {
          c.namespace && "URLHash" === this._core.settings.startPosition && a(b).trigger("hashchange.owl.navigation");
        }, this), "prepared.owl.carousel": a.proxy(function (b) {
          if (b.namespace) {
            var c = a(b.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if (!c) return;this._hashes[c] = b.content;
          }
        }, this), "changed.owl.carousel": a.proxy(function (c) {
          if (c.namespace && "position" === c.property.name) {
            var d = this._core.items(this._core.relative(this._core.current())),
                e = a.map(this._hashes, function (a, b) {
              return a === d ? b : null;
            }).join();if (!e || b.location.hash.slice(1) === e) return;b.location.hash = e;
          }
        }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers), a(b).on("hashchange.owl.navigation", a.proxy(function (a) {
        var c = b.location.hash.substring(1),
            e = this._core.$stage.children(),
            f = this._hashes[c] && e.index(this._hashes[c]);f !== d && f !== this._core.current() && this._core.to(this._core.relative(f), !1, !0);
      }, this));
    };e.Defaults = { URLhashListener: !1 }, e.prototype.destroy = function () {
      var c, d;a(b).off("hashchange.owl.navigation");for (c in this._handlers) {
        this._core.$element.off(c, this._handlers[c]);
      }for (d in Object.getOwnPropertyNames(this)) {
        "function" != typeof this[d] && (this[d] = null);
      }
    }, a.fn.owlCarousel.Constructor.Plugins.Hash = e;
  }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
    function e(b, c) {
      var e = !1,
          f = b.charAt(0).toUpperCase() + b.slice(1);return a.each((b + " " + h.join(f + " ") + f).split(" "), function (a, b) {
        if (g[b] !== d) return e = !c || b, !1;
      }), e;
    }function f(a) {
      return e(a, !0);
    }var g = a("<support>").get(0).style,
        h = "Webkit Moz O ms".split(" "),
        i = { transition: { end: { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd", transition: "transitionend" } }, animation: { end: { WebkitAnimation: "webkitAnimationEnd", MozAnimation: "animationend", OAnimation: "oAnimationEnd", animation: "animationend" } } },
        j = { csstransforms: function csstransforms() {
        return !!e("transform");
      }, csstransforms3d: function csstransforms3d() {
        return !!e("perspective");
      }, csstransitions: function csstransitions() {
        return !!e("transition");
      }, cssanimations: function cssanimations() {
        return !!e("animation");
      } };j.csstransitions() && (a.support.transition = new String(f("transition")), a.support.transition.end = i.transition.end[a.support.transition]), j.cssanimations() && (a.support.animation = new String(f("animation")), a.support.animation.end = i.animation.end[a.support.animation]), j.csstransforms() && (a.support.transform = new String(f("transform")), a.support.transform3d = j.csstransforms3d());
  }(window.Zepto || window.jQuery, window, document);
  ;browserify_shim__define__module__export__(typeof owlCarousel != "undefined" ? owlCarousel : window.owlCarousel);
}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) {
  module.exports = ex;
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"C:\\Users\\Saray\\projects\\donashop\\src\\js\\deps\\jquery.min.js":5}],7:[function(require,module,exports){
var pug = require('pug-runtime');
module.exports=template;function pug_attr(t,e,n,f){return e!==!1&&null!=e&&(e||"class"!==t&&"style"!==t)?e===!0?" "+(f?t:t+'="'+t+'"'):("function"==typeof e.toJSON&&(e=e.toJSON()),"string"==typeof e||(e=JSON.stringify(e),n||e.indexOf('"')===-1)?(n&&(e=pug_escape(e))," "+t+'="'+e+'"'):" "+t+"='"+e.replace(/'/g,"&#39;")+"'"):""}
function pug_escape(e){var a=""+e,t=pug_match_html.exec(a);if(!t)return e;var r,c,n,s="";for(r=t.index,c=0;r<a.length;r++){switch(a.charCodeAt(r)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}c!==r&&(s+=a.substring(c,r)),c=r+1,s+=n}return c!==r?s+a.substring(c,r):s}
var pug_match_html=/["&<>]/;
function pug_rethrow(n,e,r,t){if(!(n instanceof Error))throw n;if(!("undefined"==typeof window&&e||t))throw n.message+=" on line "+r,n;try{t=t||require("fs").readFileSync(e,"utf8")}catch(e){pug_rethrow(n,null,r)}var i=3,a=t.split("\n"),o=Math.max(r-i,0),h=Math.min(a.length,r+i),i=a.slice(o,h).map(function(n,e){var t=e+o+1;return(t==r?"  > ":"    ")+t+"| "+n}).join("\n");throw n.path=e,n.message=(e||"Pug")+":"+r+"\n"+i+"\n\n"+n.message,n}function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;
;var locals_for_with = (locals || {});(function (data) {var pug_indent = [];

pug_mixins["product"] = pug_interp = function(image, name, price, oldPrice, sale){
var block = (this && this.block), attributes = (this && this.attributes) || {};

pug_html = pug_html + "\n";
pug_html = pug_html + pug_indent.join("");
pug_html = pug_html + "\u003Cdiv class=\"product products-row__item\"\u003E";

pug_html = pug_html + "\u003Ca class=\"more-products-href\" href=\"#\"\u003E";

if (sale) {

pug_html = pug_html + "\n    ";
pug_html = pug_html + pug_indent.join("");
pug_html = pug_html + "\u003Cdiv class=\"product__sale\"\u003E";

pug_html = pug_html + "sale\u003C\u002Fdiv\u003E";
}

pug_html = pug_html + "\n    ";
pug_html = pug_html + pug_indent.join("");
pug_html = pug_html + "\u003Cdiv class=\"product__img-container\"\u003E";

pug_html = pug_html + "\u003Cimg" + (" class=\"product__img\""+pug_attr("src", image, true, false)) + "\u002F\u003E\u003C\u002Fdiv\u003E";

pug_html = pug_html + "\n    ";
pug_html = pug_html + pug_indent.join("");
pug_html = pug_html + "\u003Cdiv class=\"product__text\"\u003E";

pug_html = pug_html + "\n      ";
pug_html = pug_html + pug_indent.join("");
pug_html = pug_html + "\u003Cdiv class=\"product__name\"\u003E";

pug_html = pug_html + (pug_escape(null == (pug_interp = name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E";

pug_html = pug_html + "\n      ";
pug_html = pug_html + pug_indent.join("");
pug_html = pug_html + "\u003Cdiv class=\"product__price-container\"\u003E";

if (oldPrice) {

pug_html = pug_html + "\n        ";
pug_html = pug_html + pug_indent.join("");
pug_html = pug_html + "\u003Cdiv class=\"product__old\"\u003E";

pug_html = pug_html + (pug_escape(null == (pug_interp = "$" + oldPrice + ".00 USD") ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E";
}

pug_html = pug_html + "\n        ";
pug_html = pug_html + pug_indent.join("");
pug_html = pug_html + "\u003Cdiv class=\"product__price\"\u003E";

pug_html = pug_html + (pug_escape(null == (pug_interp = "$" + price + ".00 USD") ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\n      ";
pug_html = pug_html + pug_indent.join("");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\n    ";
pug_html = pug_html + pug_indent.join("");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fa\u003E\u003C\u002Fdiv\u003E";
};

// iterate data
;(function(){
  var $$obj = data;
  if ('number' == typeof $$obj.length) {
      for (var pug_index0 = 0, $$l = $$obj.length; pug_index0 < $$l; pug_index0++) {
        var row = $$obj[pug_index0];

pug_html = pug_html + "\n\u003Cdiv class=\"products-row\"\u003E";

// iterate row
;(function(){
  var $$obj = row;
  if ('number' == typeof $$obj.length) {
      for (var pug_index1 = 0, $$l = $$obj.length; pug_index1 < $$l; pug_index1++) {
        var product = $$obj[pug_index1];

pug_indent.push('  ');
pug_mixins["product"](product.image, product.name, product.price, product.oldPrice, product.sale);
pug_indent.pop();
      }
  } else {
    var $$l = 0;
    for (var pug_index1 in $$obj) {
      $$l++;
      var product = $$obj[pug_index1];

pug_indent.push('  ');
pug_mixins["product"](product.image, product.name, product.price, product.oldPrice, product.sale);
pug_indent.pop();
    }
  }
}).call(this);

pug_html = pug_html + "\n\u003C\u002Fdiv\u003E";
      }
  } else {
    var $$l = 0;
    for (var pug_index0 in $$obj) {
      $$l++;
      var row = $$obj[pug_index0];

pug_html = pug_html + "\n\u003Cdiv class=\"products-row\"\u003E";

// iterate row
;(function(){
  var $$obj = row;
  if ('number' == typeof $$obj.length) {
      for (var pug_index2 = 0, $$l = $$obj.length; pug_index2 < $$l; pug_index2++) {
        var product = $$obj[pug_index2];

pug_indent.push('  ');
pug_mixins["product"](product.image, product.name, product.price, product.oldPrice, product.sale);
pug_indent.pop();
      }
  } else {
    var $$l = 0;
    for (var pug_index2 in $$obj) {
      $$l++;
      var product = $$obj[pug_index2];

pug_indent.push('  ');
pug_mixins["product"](product.image, product.name, product.price, product.oldPrice, product.sale);
pug_indent.pop();
    }
  }
}).call(this);

pug_html = pug_html + "\n\u003C\u002Fdiv\u003E";
    }
  }
}).call(this);
}.call(this,"data" in locals_for_with?locals_for_with.data:typeof data!=="undefined"?data:undefined));return pug_html;}

},{"fs":2,"pug-runtime":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYnJvd3Nlci1yZXNvbHZlL2VtcHR5LmpzIiwibm9kZV9tb2R1bGVzL3B1Zy1ydW50aW1lL2luZGV4LmpzIiwic3JjXFxqc1xcYXBwLmpzIiwic3JjXFxqc1xcZGVwc1xcc3JjXFxqc1xcZGVwc1xcanF1ZXJ5Lm1pbi5qcyIsInNyY1xcanNcXGRlcHNcXHNyY1xcanNcXGRlcHNcXG93bC5jYXJvdXNlbC5taW4uanMiLCJDOlxcXFxVc2Vyc1xcXFxTYXJheVxcXFxwcm9qZWN0c1xcXFxkb25hc2hvcFxcXFx2aWV3c1xcXFxtaXhpbnNcXFxccHJvZHVjdC5wdWciLCJDOlxcXFxVc2Vyc1xcXFxTYXJheVxcXFxwcm9qZWN0c1xcXFxkb25hc2hvcFxcXFx2aWV3c1xcXFx0ZW1wbGF0ZXNcXFxccHJvZHVjdHMucHVnIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM5UEE7Ozs7QUFDQTs7OztBQUNBLElBQU0sU0FBUyxRQUFRLG9DQUFSLENBQWY7O0FBRUEsSUFBTSxrQkFB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LFdBQXRCLEdBQW9DLFdBQXBDLEdBQWtELE9BQU8sV0FBbkc7QUFFRCxDQVZ5QyxFQVV2QyxJQVZ1QyxDQVVsQyxNQVZrQyxFQVUxQixTQVYwQixFQVVmLFNBVmUsRUFVSixTQVZJLEVBVU8sU0FWUCxFQVVrQixTQUFTLFlBQVQsQ0FBc0IsRUFBdEIsRUFBMEI7QUFBRSxTQUFPLE9BQVAsR0FBaUIsRUFBakI7QUFBc0IsQ0FWcEU7Ozs7Ozs7Ozs7OztBQ0YxQzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUFBOzs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFBQTs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQUE7OztBQUNBOzs7O0FBQUE7Ozs7Ozs7QUNYQTs7Ozs7OztBQUNBOztBQUNBOzs7Ozs7O0FBQ0E7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBRkE7O0FBQ0E7Ozs7Ozs7QUFDQTs7Ozs7Ozs7OztBQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHB1Z19oYXNfb3duX3Byb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBNZXJnZSB0d28gYXR0cmlidXRlIG9iamVjdHMgZ2l2aW5nIHByZWNlZGVuY2VcbiAqIHRvIHZhbHVlcyBpbiBvYmplY3QgYGJgLiBDbGFzc2VzIGFyZSBzcGVjaWFsLWNhc2VkXG4gKiBhbGxvd2luZyBmb3IgYXJyYXlzIGFuZCBtZXJnaW5nL2pvaW5pbmcgYXBwcm9wcmlhdGVseVxuICogcmVzdWx0aW5nIGluIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhXG4gKiBAcGFyYW0ge09iamVjdH0gYlxuICogQHJldHVybiB7T2JqZWN0fSBhXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLm1lcmdlID0gcHVnX21lcmdlO1xuZnVuY3Rpb24gcHVnX21lcmdlKGEsIGIpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICB2YXIgYXR0cnMgPSBhWzBdO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgYXR0cnMgPSBwdWdfbWVyZ2UoYXR0cnMsIGFbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gYXR0cnM7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gYikge1xuICAgIGlmIChrZXkgPT09ICdjbGFzcycpIHtcbiAgICAgIHZhciB2YWxBID0gYVtrZXldIHx8IFtdO1xuICAgICAgYVtrZXldID0gKEFycmF5LmlzQXJyYXkodmFsQSkgPyB2YWxBIDogW3ZhbEFdKS5jb25jYXQoYltrZXldIHx8IFtdKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgdmFyIHZhbEEgPSBwdWdfc3R5bGUoYVtrZXldKTtcbiAgICAgIHZhciB2YWxCID0gcHVnX3N0eWxlKGJba2V5XSk7XG4gICAgICBhW2tleV0gPSB2YWxBICsgdmFsQjtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gYltrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhO1xufTtcblxuLyoqXG4gKiBQcm9jZXNzIGFycmF5LCBvYmplY3QsIG9yIHN0cmluZyBhcyBhIHN0cmluZyBvZiBjbGFzc2VzIGRlbGltaXRlZCBieSBhIHNwYWNlLlxuICpcbiAqIElmIGB2YWxgIGlzIGFuIGFycmF5LCBhbGwgbWVtYmVycyBvZiBpdCBhbmQgaXRzIHN1YmFycmF5cyBhcmUgY291bnRlZCBhc1xuICogY2xhc3Nlcy4gSWYgYGVzY2FwaW5nYCBpcyBhbiBhcnJheSwgdGhlbiB3aGV0aGVyIG9yIG5vdCB0aGUgaXRlbSBpbiBgdmFsYCBpc1xuICogZXNjYXBlZCBkZXBlbmRzIG9uIHRoZSBjb3JyZXNwb25kaW5nIGl0ZW0gaW4gYGVzY2FwaW5nYC4gSWYgYGVzY2FwaW5nYCBpc1xuICogbm90IGFuIGFycmF5LCBubyBlc2NhcGluZyBpcyBkb25lLlxuICpcbiAqIElmIGB2YWxgIGlzIGFuIG9iamVjdCwgYWxsIHRoZSBrZXlzIHdob3NlIHZhbHVlIGlzIHRydXRoeSBhcmUgY291bnRlZCBhc1xuICogY2xhc3Nlcy4gTm8gZXNjYXBpbmcgaXMgZG9uZS5cbiAqXG4gKiBJZiBgdmFsYCBpcyBhIHN0cmluZywgaXQgaXMgY291bnRlZCBhcyBhIGNsYXNzLiBObyBlc2NhcGluZyBpcyBkb25lLlxuICpcbiAqIEBwYXJhbSB7KEFycmF5LjxzdHJpbmc+fE9iamVjdC48c3RyaW5nLCBib29sZWFuPnxzdHJpbmcpfSB2YWxcbiAqIEBwYXJhbSB7P0FycmF5LjxzdHJpbmc+fSBlc2NhcGluZ1xuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5leHBvcnRzLmNsYXNzZXMgPSBwdWdfY2xhc3NlcztcbmZ1bmN0aW9uIHB1Z19jbGFzc2VzX2FycmF5KHZhbCwgZXNjYXBpbmcpIHtcbiAgdmFyIGNsYXNzU3RyaW5nID0gJycsIGNsYXNzTmFtZSwgcGFkZGluZyA9ICcnLCBlc2NhcGVFbmFibGVkID0gQXJyYXkuaXNBcnJheShlc2NhcGluZyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgY2xhc3NOYW1lID0gcHVnX2NsYXNzZXModmFsW2ldKTtcbiAgICBpZiAoIWNsYXNzTmFtZSkgY29udGludWU7XG4gICAgZXNjYXBlRW5hYmxlZCAmJiBlc2NhcGluZ1tpXSAmJiAoY2xhc3NOYW1lID0gcHVnX2VzY2FwZShjbGFzc05hbWUpKTtcbiAgICBjbGFzc1N0cmluZyA9IGNsYXNzU3RyaW5nICsgcGFkZGluZyArIGNsYXNzTmFtZTtcbiAgICBwYWRkaW5nID0gJyAnO1xuICB9XG4gIHJldHVybiBjbGFzc1N0cmluZztcbn1cbmZ1bmN0aW9uIHB1Z19jbGFzc2VzX29iamVjdCh2YWwpIHtcbiAgdmFyIGNsYXNzU3RyaW5nID0gJycsIHBhZGRpbmcgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbCkge1xuICAgIGlmIChrZXkgJiYgdmFsW2tleV0gJiYgcHVnX2hhc19vd25fcHJvcGVydHkuY2FsbCh2YWwsIGtleSkpIHtcbiAgICAgIGNsYXNzU3RyaW5nID0gY2xhc3NTdHJpbmcgKyBwYWRkaW5nICsga2V5O1xuICAgICAgcGFkZGluZyA9ICcgJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNsYXNzU3RyaW5nO1xufVxuZnVuY3Rpb24gcHVnX2NsYXNzZXModmFsLCBlc2NhcGluZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgcmV0dXJuIHB1Z19jbGFzc2VzX2FycmF5KHZhbCwgZXNjYXBpbmcpO1xuICB9IGVsc2UgaWYgKHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBwdWdfY2xhc3Nlc19vYmplY3QodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsIHx8ICcnO1xuICB9XG59XG5cbi8qKlxuICogQ29udmVydCBvYmplY3Qgb3Igc3RyaW5nIHRvIGEgc3RyaW5nIG9mIENTUyBzdHlsZXMgZGVsaW1pdGVkIGJ5IGEgc2VtaWNvbG9uLlxuICpcbiAqIEBwYXJhbSB7KE9iamVjdC48c3RyaW5nLCBzdHJpbmc+fHN0cmluZyl9IHZhbFxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5cbmV4cG9ydHMuc3R5bGUgPSBwdWdfc3R5bGU7XG5mdW5jdGlvbiBwdWdfc3R5bGUodmFsKSB7XG4gIGlmICghdmFsKSByZXR1cm4gJyc7XG4gIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBvdXQgPSAnJztcbiAgICBmb3IgKHZhciBzdHlsZSBpbiB2YWwpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHVnX2hhc19vd25fcHJvcGVydHkuY2FsbCh2YWwsIHN0eWxlKSkge1xuICAgICAgICBvdXQgPSBvdXQgKyBzdHlsZSArICc6JyArIHZhbFtzdHlsZV0gKyAnOyc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH0gZWxzZSB7XG4gICAgdmFsICs9ICcnO1xuICAgIGlmICh2YWxbdmFsLmxlbmd0aCAtIDFdICE9PSAnOycpIFxuICAgICAgcmV0dXJuIHZhbCArICc7JztcbiAgICByZXR1cm4gdmFsO1xuICB9XG59O1xuXG4vKipcbiAqIFJlbmRlciB0aGUgZ2l2ZW4gYXR0cmlidXRlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWxcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZXNjYXBlZFxuICogQHBhcmFtIHtCb29sZWFufSB0ZXJzZVxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5leHBvcnRzLmF0dHIgPSBwdWdfYXR0cjtcbmZ1bmN0aW9uIHB1Z19hdHRyKGtleSwgdmFsLCBlc2NhcGVkLCB0ZXJzZSkge1xuICBpZiAodmFsID09PSBmYWxzZSB8fCB2YWwgPT0gbnVsbCB8fCAhdmFsICYmIChrZXkgPT09ICdjbGFzcycgfHwga2V5ID09PSAnc3R5bGUnKSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBpZiAodmFsID09PSB0cnVlKSB7XG4gICAgcmV0dXJuICcgJyArICh0ZXJzZSA/IGtleSA6IGtleSArICc9XCInICsga2V5ICsgJ1wiJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWwudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFsID0gdmFsLnRvSlNPTigpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEpTT04uc3RyaW5naWZ5KHZhbCk7XG4gICAgaWYgKCFlc2NhcGVkICYmIHZhbC5pbmRleE9mKCdcIicpICE9PSAtMSkge1xuICAgICAgcmV0dXJuICcgJyArIGtleSArICc9XFwnJyArIHZhbC5yZXBsYWNlKC8nL2csICcmIzM5OycpICsgJ1xcJyc7XG4gICAgfVxuICB9XG4gIGlmIChlc2NhcGVkKSB2YWwgPSBwdWdfZXNjYXBlKHZhbCk7XG4gIHJldHVybiAnICcgKyBrZXkgKyAnPVwiJyArIHZhbCArICdcIic7XG59O1xuXG4vKipcbiAqIFJlbmRlciB0aGUgZ2l2ZW4gYXR0cmlidXRlcyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtPYmplY3R9IHRlcnNlIHdoZXRoZXIgdG8gdXNlIEhUTUw1IHRlcnNlIGJvb2xlYW4gYXR0cmlidXRlc1xuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5leHBvcnRzLmF0dHJzID0gcHVnX2F0dHJzO1xuZnVuY3Rpb24gcHVnX2F0dHJzKG9iaiwgdGVyc2Upe1xuICB2YXIgYXR0cnMgPSAnJztcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKHB1Z19oYXNfb3duX3Byb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICB2YXIgdmFsID0gb2JqW2tleV07XG5cbiAgICAgIGlmICgnY2xhc3MnID09PSBrZXkpIHtcbiAgICAgICAgdmFsID0gcHVnX2NsYXNzZXModmFsKTtcbiAgICAgICAgYXR0cnMgPSBwdWdfYXR0cihrZXksIHZhbCwgZmFsc2UsIHRlcnNlKSArIGF0dHJzO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICgnc3R5bGUnID09PSBrZXkpIHtcbiAgICAgICAgdmFsID0gcHVnX3N0eWxlKHZhbCk7XG4gICAgICB9XG4gICAgICBhdHRycyArPSBwdWdfYXR0cihrZXksIHZhbCwgZmFsc2UsIHRlcnNlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0cnM7XG59O1xuXG4vKipcbiAqIEVzY2FwZSB0aGUgZ2l2ZW4gc3RyaW5nIG9mIGBodG1sYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaHRtbFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxudmFyIHB1Z19tYXRjaF9odG1sID0gL1tcIiY8Pl0vO1xuZXhwb3J0cy5lc2NhcGUgPSBwdWdfZXNjYXBlO1xuZnVuY3Rpb24gcHVnX2VzY2FwZShfaHRtbCl7XG4gIHZhciBodG1sID0gJycgKyBfaHRtbDtcbiAgdmFyIHJlZ2V4UmVzdWx0ID0gcHVnX21hdGNoX2h0bWwuZXhlYyhodG1sKTtcbiAgaWYgKCFyZWdleFJlc3VsdCkgcmV0dXJuIF9odG1sO1xuXG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIGksIGxhc3RJbmRleCwgZXNjYXBlO1xuICBmb3IgKGkgPSByZWdleFJlc3VsdC5pbmRleCwgbGFzdEluZGV4ID0gMDsgaSA8IGh0bWwubGVuZ3RoOyBpKyspIHtcbiAgICBzd2l0Y2ggKGh0bWwuY2hhckNvZGVBdChpKSkge1xuICAgICAgY2FzZSAzNDogZXNjYXBlID0gJyZxdW90Oyc7IGJyZWFrO1xuICAgICAgY2FzZSAzODogZXNjYXBlID0gJyZhbXA7JzsgYnJlYWs7XG4gICAgICBjYXNlIDYwOiBlc2NhcGUgPSAnJmx0Oyc7IGJyZWFrO1xuICAgICAgY2FzZSA2MjogZXNjYXBlID0gJyZndDsnOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAobGFzdEluZGV4ICE9PSBpKSByZXN1bHQgKz0gaHRtbC5zdWJzdHJpbmcobGFzdEluZGV4LCBpKTtcbiAgICBsYXN0SW5kZXggPSBpICsgMTtcbiAgICByZXN1bHQgKz0gZXNjYXBlO1xuICB9XG4gIGlmIChsYXN0SW5kZXggIT09IGkpIHJldHVybiByZXN1bHQgKyBodG1sLnN1YnN0cmluZyhsYXN0SW5kZXgsIGkpO1xuICBlbHNlIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIFJlLXRocm93IHRoZSBnaXZlbiBgZXJyYCBpbiBjb250ZXh0IHRvIHRoZVxuICogdGhlIHB1ZyBpbiBgZmlsZW5hbWVgIGF0IHRoZSBnaXZlbiBgbGluZW5vYC5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlbmFtZVxuICogQHBhcmFtIHtTdHJpbmd9IGxpbmVub1xuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBvcmlnaW5hbCBzb3VyY2VcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMucmV0aHJvdyA9IHB1Z19yZXRocm93O1xuZnVuY3Rpb24gcHVnX3JldGhyb3coZXJyLCBmaWxlbmFtZSwgbGluZW5vLCBzdHIpe1xuICBpZiAoIShlcnIgaW5zdGFuY2VvZiBFcnJvcikpIHRocm93IGVycjtcbiAgaWYgKCh0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnIHx8ICFmaWxlbmFtZSkgJiYgIXN0cikge1xuICAgIGVyci5tZXNzYWdlICs9ICcgb24gbGluZSAnICsgbGluZW5vO1xuICAgIHRocm93IGVycjtcbiAgfVxuICB0cnkge1xuICAgIHN0ciA9IHN0ciB8fCByZXF1aXJlKCdmcycpLnJlYWRGaWxlU3luYyhmaWxlbmFtZSwgJ3V0ZjgnKVxuICB9IGNhdGNoIChleCkge1xuICAgIHB1Z19yZXRocm93KGVyciwgbnVsbCwgbGluZW5vKVxuICB9XG4gIHZhciBjb250ZXh0ID0gM1xuICAgICwgbGluZXMgPSBzdHIuc3BsaXQoJ1xcbicpXG4gICAgLCBzdGFydCA9IE1hdGgubWF4KGxpbmVubyAtIGNvbnRleHQsIDApXG4gICAgLCBlbmQgPSBNYXRoLm1pbihsaW5lcy5sZW5ndGgsIGxpbmVubyArIGNvbnRleHQpO1xuXG4gIC8vIEVycm9yIGNvbnRleHRcbiAgdmFyIGNvbnRleHQgPSBsaW5lcy5zbGljZShzdGFydCwgZW5kKS5tYXAoZnVuY3Rpb24obGluZSwgaSl7XG4gICAgdmFyIGN1cnIgPSBpICsgc3RhcnQgKyAxO1xuICAgIHJldHVybiAoY3VyciA9PSBsaW5lbm8gPyAnICA+ICcgOiAnICAgICcpXG4gICAgICArIGN1cnJcbiAgICAgICsgJ3wgJ1xuICAgICAgKyBsaW5lO1xuICB9KS5qb2luKCdcXG4nKTtcblxuICAvLyBBbHRlciBleGNlcHRpb24gbWVzc2FnZVxuICBlcnIucGF0aCA9IGZpbGVuYW1lO1xuICBlcnIubWVzc2FnZSA9IChmaWxlbmFtZSB8fCAnUHVnJykgKyAnOicgKyBsaW5lbm9cbiAgICArICdcXG4nICsgY29udGV4dCArICdcXG5cXG4nICsgZXJyLm1lc3NhZ2U7XG4gIHRocm93IGVycjtcbn07XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5pbXBvcnQgJ293bC1jYXJvdXNlbCc7XHJcbmNvbnN0IHJlbmRlciA9IHJlcXVpcmUoJy4uLy4uL3ZpZXdzL3RlbXBsYXRlcy9wcm9kdWN0cy5wdWcnKTtcclxuXHJcbmNvbnN0IHByb2R1Y3RzV3JhcHBlciA9ICQoJy5wcm9kdWN0cycpO1xyXG5cclxuJCgnLm1haW4tc2xpZGVyJykub3dsQ2Fyb3VzZWwoe1xyXG5cdCBpdGVtczogMSxcclxuICAgYW5pbWF0ZU91dDogJ2ZhZGVPdXQnLFxyXG4gICBuYXY6IHRydWUsXHJcbiAgIGxvb3A6IHRydWUsXHJcbiAgIG5hdlRleHQ6IFsnPHN2ZyBjbGFzcz1cInByZXZcIj48dXNlIHhsaW5rOmhyZWY9XCIjcmlnaHQtYXJyb3dcIj48L3N2Zz4nLCAnPHN2ZyBjbGFzcz1cIm5leHRcIj48dXNlIHhsaW5rOmhyZWY9XCIjcmlnaHQtYXJyb3dcIj48L3N2Zz4nXVxyXG59KVxyXG5cclxuJCgnLmV2ZW50Jykub3dsQ2Fyb3VzZWwoe1xyXG5cdCBpdGVtczogMSAsXHJcbiAgIG5hdjogdHJ1ZSxcclxuICAgbG9vcDogdHJ1ZSxcclxuICAgZG90czogdHJ1ZSxcclxuICAgbmF2VGV4dDogWyc8c3ZnIGNsYXNzPVwicHJldlwiPjx1c2UgeGxpbms6aHJlZj1cIiNrZXlib2FyZC1hcnJvdy1idXR0b25cIj48L3N2Zz4nLCAnPHN2ZyBjbGFzcz1cIm5leHRcIj48dXNlIHhsaW5rOmhyZWY9XCIja2V5Ym9hcmQtYXJyb3ctYnV0dG9uXCI+PC9zdmc+J11cclxufSlcclxuXHJcbiQoJy5wb3B1bGFyLWNhcm91c2VsJykub3dsQ2Fyb3VzZWwoe1xyXG5cdCBpdGVtczogMSAsXHJcbiAgIGFuaW1hdGVPdXQ6ICdmYWRlT3V0JyxcclxuICAgbmF2OiB0cnVlLFxyXG4gICBsb29wOiB0cnVlLFxyXG4gICBkb3RzOiBmYWxzZSxcclxuICAgbmF2VGV4dDogWyc8c3ZnIGNsYXNzPVwicHJldlwiPjx1c2UgeGxpbms6aHJlZj1cIiNrZXlib2FyZC1hcnJvdy1idXR0b25cIj48L3N2Zz4nLCAnPHN2ZyBjbGFzcz1cIm5leHRcIj48dXNlIHhsaW5rOmhyZWY9XCIja2V5Ym9hcmQtYXJyb3ctYnV0dG9uXCI+PC9zdmc+J11cclxufSlcclxuXHJcbiQoJy5zZWFyY2gtbGluaycpLm9uKCdjbGljaycsICgpID0+IHtcclxuXHQkKCcuc2VhcmNoLWNsaWNrJykuZmFkZVRvZ2dsZSg0MDApO1xyXG59KVxyXG5cclxuJCgnI2xvYWQnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcblx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdGNvbnN0IHN2ZyA9ICQodGhpcykuZmluZCgnc3ZnJyk7XHJcblx0c3ZnLnRvZ2dsZUNsYXNzKCdsb2FkZXJfYW5pbWF0ZScpXHJcblxyXG5cdCQuYWpheCgnL2luZGV4LXByb2R1Y3RzJykudGhlbihkYXRhID0+IHtcclxuXHRcdGNvbnN0IHJlbmRlcmVkID0gcmVuZGVyKHtcclxuXHRcdFx0ZGF0YSA6IHRyYW5zZm9ybURhdGEoZGF0YSwgNClcclxuXHRcdH0pO1xyXG5cdFx0cHJvZHVjdHNXcmFwcGVyLmFwcGVuZChyZW5kZXJlZCk7XHJcblx0XHRzdmcudG9nZ2xlQ2xhc3MoJ2xvYWRlcl9hbmltYXRlJyk7XHJcblx0fSlcclxufSlcclxuXHJcbmZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgYW1vdW50KSB7XHJcblx0Y29uc3QgcmVzdWx0ID0gW11cclxuXHRjb25zdCByb3dzQ291bnQgPSBNYXRoLmNlaWwoZGF0YS5sZW5ndGggLyBhbW91bnQpXHJcblxyXG5cdGZvcihsZXQgaSA9IDA7IGkgPCByb3dzQ291bnQ7IGkrKyApe1xyXG5cdFx0Y29uc3Qgc3RhcnQgPSBpICogYW1vdW50XHJcblx0XHRjb25zdCBmaW5pc2ggPSAoaSArIDEpICogYW1vdW50XHJcblx0XHRyZXN1bHQucHVzaChkYXRhLnNsaWNlKHN0YXJ0LCBmaW5pc2gpKVxyXG5cdH1cclxuXHRyZXR1cm4gcmVzdWx0XHJcbn0iLCI7IHZhciBfX2Jyb3dzZXJpZnlfc2hpbV9yZXF1aXJlX189cmVxdWlyZTsoZnVuY3Rpb24gYnJvd3NlcmlmeVNoaW0obW9kdWxlLCBleHBvcnRzLCByZXF1aXJlLCBkZWZpbmUsIGJyb3dzZXJpZnlfc2hpbV9fZGVmaW5lX19tb2R1bGVfX2V4cG9ydF9fKSB7XG4vKiEgalF1ZXJ5IHYzLjIuMSB8IChjKSBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgfCBqcXVlcnkub3JnL2xpY2Vuc2UgKi9cbiFmdW5jdGlvbihhLGIpe1widXNlIHN0cmljdFwiO1wib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1hLmRvY3VtZW50P2IoYSwhMCk6ZnVuY3Rpb24oYSl7aWYoIWEuZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiKTtyZXR1cm4gYihhKX06YihhKX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyxmdW5jdGlvbihhLGIpe1widXNlIHN0cmljdFwiO3ZhciBjPVtdLGQ9YS5kb2N1bWVudCxlPU9iamVjdC5nZXRQcm90b3R5cGVPZixmPWMuc2xpY2UsZz1jLmNvbmNhdCxoPWMucHVzaCxpPWMuaW5kZXhPZixqPXt9LGs9ai50b1N0cmluZyxsPWouaGFzT3duUHJvcGVydHksbT1sLnRvU3RyaW5nLG49bS5jYWxsKE9iamVjdCksbz17fTtmdW5jdGlvbiBwKGEsYil7Yj1ifHxkO3ZhciBjPWIuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtjLnRleHQ9YSxiLmhlYWQuYXBwZW5kQ2hpbGQoYykucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKX12YXIgcT1cIjMuMi4xXCIscj1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgci5mbi5pbml0KGEsYil9LHM9L15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLHQ9L14tbXMtLyx1PS8tKFthLXpdKS9nLHY9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi50b1VwcGVyQ2FzZSgpfTtyLmZuPXIucHJvdG90eXBlPXtqcXVlcnk6cSxjb25zdHJ1Y3RvcjpyLGxlbmd0aDowLHRvQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gZi5jYWxsKHRoaXMpfSxnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/Zi5jYWxsKHRoaXMpOmE8MD90aGlzW2ErdGhpcy5sZW5ndGhdOnRoaXNbYV19LHB1c2hTdGFjazpmdW5jdGlvbihhKXt2YXIgYj1yLm1lcmdlKHRoaXMuY29uc3RydWN0b3IoKSxhKTtyZXR1cm4gYi5wcmV2T2JqZWN0PXRoaXMsYn0sZWFjaDpmdW5jdGlvbihhKXtyZXR1cm4gci5lYWNoKHRoaXMsYSl9LG1hcDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soci5tYXAodGhpcyxmdW5jdGlvbihiLGMpe3JldHVybiBhLmNhbGwoYixjLGIpfSkpfSxzbGljZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhmLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9LGZpcnN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoMCl9LGxhc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgtMSl9LGVxOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMubGVuZ3RoLGM9K2ErKGE8MD9iOjApO3JldHVybiB0aGlzLnB1c2hTdGFjayhjPj0wJiZjPGI/W3RoaXNbY11dOltdKX0sZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJldk9iamVjdHx8dGhpcy5jb25zdHJ1Y3RvcigpfSxwdXNoOmgsc29ydDpjLnNvcnQsc3BsaWNlOmMuc3BsaWNlfSxyLmV4dGVuZD1yLmZuLmV4dGVuZD1mdW5jdGlvbigpe3ZhciBhLGIsYyxkLGUsZixnPWFyZ3VtZW50c1swXXx8e30saD0xLGk9YXJndW1lbnRzLmxlbmd0aCxqPSExO2ZvcihcImJvb2xlYW5cIj09dHlwZW9mIGcmJihqPWcsZz1hcmd1bWVudHNbaF18fHt9LGgrKyksXCJvYmplY3RcIj09dHlwZW9mIGd8fHIuaXNGdW5jdGlvbihnKXx8KGc9e30pLGg9PT1pJiYoZz10aGlzLGgtLSk7aDxpO2grKylpZihudWxsIT0oYT1hcmd1bWVudHNbaF0pKWZvcihiIGluIGEpYz1nW2JdLGQ9YVtiXSxnIT09ZCYmKGomJmQmJihyLmlzUGxhaW5PYmplY3QoZCl8fChlPUFycmF5LmlzQXJyYXkoZCkpKT8oZT8oZT0hMSxmPWMmJkFycmF5LmlzQXJyYXkoYyk/YzpbXSk6Zj1jJiZyLmlzUGxhaW5PYmplY3QoYyk/Yzp7fSxnW2JdPXIuZXh0ZW5kKGosZixkKSk6dm9pZCAwIT09ZCYmKGdbYl09ZCkpO3JldHVybiBnfSxyLmV4dGVuZCh7ZXhwYW5kbzpcImpRdWVyeVwiKyhxK01hdGgucmFuZG9tKCkpLnJlcGxhY2UoL1xcRC9nLFwiXCIpLGlzUmVhZHk6ITAsZXJyb3I6ZnVuY3Rpb24oYSl7dGhyb3cgbmV3IEVycm9yKGEpfSxub29wOmZ1bmN0aW9uKCl7fSxpc0Z1bmN0aW9uOmZ1bmN0aW9uKGEpe3JldHVyblwiZnVuY3Rpb25cIj09PXIudHlwZShhKX0saXNXaW5kb3c6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWEmJmE9PT1hLndpbmRvd30saXNOdW1lcmljOmZ1bmN0aW9uKGEpe3ZhciBiPXIudHlwZShhKTtyZXR1cm4oXCJudW1iZXJcIj09PWJ8fFwic3RyaW5nXCI9PT1iKSYmIWlzTmFOKGEtcGFyc2VGbG9hdChhKSl9LGlzUGxhaW5PYmplY3Q6ZnVuY3Rpb24oYSl7dmFyIGIsYztyZXR1cm4hKCFhfHxcIltvYmplY3QgT2JqZWN0XVwiIT09ay5jYWxsKGEpKSYmKCEoYj1lKGEpKXx8KGM9bC5jYWxsKGIsXCJjb25zdHJ1Y3RvclwiKSYmYi5jb25zdHJ1Y3RvcixcImZ1bmN0aW9uXCI9PXR5cGVvZiBjJiZtLmNhbGwoYyk9PT1uKSl9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oYSl7dmFyIGI7Zm9yKGIgaW4gYSlyZXR1cm4hMTtyZXR1cm4hMH0sdHlwZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9hK1wiXCI6XCJvYmplY3RcIj09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGE/altrLmNhbGwoYSldfHxcIm9iamVjdFwiOnR5cGVvZiBhfSxnbG9iYWxFdmFsOmZ1bmN0aW9uKGEpe3AoYSl9LGNhbWVsQ2FzZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKHQsXCJtcy1cIikucmVwbGFjZSh1LHYpfSxlYWNoOmZ1bmN0aW9uKGEsYil7dmFyIGMsZD0wO2lmKHcoYSkpe2ZvcihjPWEubGVuZ3RoO2Q8YztkKyspaWYoYi5jYWxsKGFbZF0sZCxhW2RdKT09PSExKWJyZWFrfWVsc2UgZm9yKGQgaW4gYSlpZihiLmNhbGwoYVtkXSxkLGFbZF0pPT09ITEpYnJlYWs7cmV0dXJuIGF9LHRyaW06ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/XCJcIjooYStcIlwiKS5yZXBsYWNlKHMsXCJcIil9LG1ha2VBcnJheTpmdW5jdGlvbihhLGIpe3ZhciBjPWJ8fFtdO3JldHVybiBudWxsIT1hJiYodyhPYmplY3QoYSkpP3IubWVyZ2UoYyxcInN0cmluZ1wiPT10eXBlb2YgYT9bYV06YSk6aC5jYWxsKGMsYSkpLGN9LGluQXJyYXk6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBudWxsPT1iPy0xOmkuY2FsbChiLGEsYyl9LG1lcmdlOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPStiLmxlbmd0aCxkPTAsZT1hLmxlbmd0aDtkPGM7ZCsrKWFbZSsrXT1iW2RdO3JldHVybiBhLmxlbmd0aD1lLGF9LGdyZXA6ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZCxlPVtdLGY9MCxnPWEubGVuZ3RoLGg9IWM7ZjxnO2YrKylkPSFiKGFbZl0sZiksZCE9PWgmJmUucHVzaChhW2ZdKTtyZXR1cm4gZX0sbWFwOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9MCxoPVtdO2lmKHcoYSkpZm9yKGQ9YS5sZW5ndGg7ZjxkO2YrKyllPWIoYVtmXSxmLGMpLG51bGwhPWUmJmgucHVzaChlKTtlbHNlIGZvcihmIGluIGEpZT1iKGFbZl0sZixjKSxudWxsIT1lJiZoLnB1c2goZSk7cmV0dXJuIGcuYXBwbHkoW10saCl9LGd1aWQ6MSxwcm94eTpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZTtpZihcInN0cmluZ1wiPT10eXBlb2YgYiYmKGM9YVtiXSxiPWEsYT1jKSxyLmlzRnVuY3Rpb24oYSkpcmV0dXJuIGQ9Zi5jYWxsKGFyZ3VtZW50cywyKSxlPWZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYnx8dGhpcyxkLmNvbmNhdChmLmNhbGwoYXJndW1lbnRzKSkpfSxlLmd1aWQ9YS5ndWlkPWEuZ3VpZHx8ci5ndWlkKyssZX0sbm93OkRhdGUubm93LHN1cHBvcnQ6b30pLFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKHIuZm5bU3ltYm9sLml0ZXJhdG9yXT1jW1N5bWJvbC5pdGVyYXRvcl0pLHIuZWFjaChcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEsYil7altcIltvYmplY3QgXCIrYitcIl1cIl09Yi50b0xvd2VyQ2FzZSgpfSk7ZnVuY3Rpb24gdyhhKXt2YXIgYj0hIWEmJlwibGVuZ3RoXCJpbiBhJiZhLmxlbmd0aCxjPXIudHlwZShhKTtyZXR1cm5cImZ1bmN0aW9uXCIhPT1jJiYhci5pc1dpbmRvdyhhKSYmKFwiYXJyYXlcIj09PWN8fDA9PT1ifHxcIm51bWJlclwiPT10eXBlb2YgYiYmYj4wJiZiLTEgaW4gYSl9dmFyIHg9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGgsaSxqLGssbCxtLG4sbyxwLHEscixzLHQsdT1cInNpenpsZVwiKzEqbmV3IERhdGUsdj1hLmRvY3VtZW50LHc9MCx4PTAseT1oYSgpLHo9aGEoKSxBPWhhKCksQj1mdW5jdGlvbihhLGIpe3JldHVybiBhPT09YiYmKGw9ITApLDB9LEM9e30uaGFzT3duUHJvcGVydHksRD1bXSxFPUQucG9wLEY9RC5wdXNoLEc9RC5wdXNoLEg9RC5zbGljZSxJPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTAsZD1hLmxlbmd0aDtjPGQ7YysrKWlmKGFbY109PT1iKXJldHVybiBjO3JldHVybi0xfSxKPVwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixLPVwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixMPVwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixNPVwiXFxcXFtcIitLK1wiKihcIitMK1wiKSg/OlwiK0srXCIqKFsqXiR8IX5dPz0pXCIrSytcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiK0wrXCIpKXwpXCIrSytcIipcXFxcXVwiLE49XCI6KFwiK0wrXCIpKD86XFxcXCgoKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8KCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiK00rXCIpKil8LiopXFxcXCl8KVwiLE89bmV3IFJlZ0V4cChLK1wiK1wiLFwiZ1wiKSxQPW5ldyBSZWdFeHAoXCJeXCIrSytcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIrSytcIiskXCIsXCJnXCIpLFE9bmV3IFJlZ0V4cChcIl5cIitLK1wiKixcIitLK1wiKlwiKSxSPW5ldyBSZWdFeHAoXCJeXCIrSytcIiooWz4rfl18XCIrSytcIilcIitLK1wiKlwiKSxTPW5ldyBSZWdFeHAoXCI9XCIrSytcIiooW15cXFxcXSdcXFwiXSo/KVwiK0srXCIqXFxcXF1cIixcImdcIiksVD1uZXcgUmVnRXhwKE4pLFU9bmV3IFJlZ0V4cChcIl5cIitMK1wiJFwiKSxWPXtJRDpuZXcgUmVnRXhwKFwiXiMoXCIrTCtcIilcIiksQ0xBU1M6bmV3IFJlZ0V4cChcIl5cXFxcLihcIitMK1wiKVwiKSxUQUc6bmV3IFJlZ0V4cChcIl4oXCIrTCtcInxbKl0pXCIpLEFUVFI6bmV3IFJlZ0V4cChcIl5cIitNKSxQU0VVRE86bmV3IFJlZ0V4cChcIl5cIitOKSxDSElMRDpuZXcgUmVnRXhwKFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIitLK1wiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIrSytcIiooPzooWystXXwpXCIrSytcIiooXFxcXGQrKXwpKVwiK0srXCIqXFxcXCl8KVwiLFwiaVwiKSxib29sOm5ldyBSZWdFeHAoXCJeKD86XCIrSitcIikkXCIsXCJpXCIpLG5lZWRzQ29udGV4dDpuZXcgUmVnRXhwKFwiXlwiK0srXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiK0srXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiK0srXCIqXFxcXCl8KSg/PVteLV18JClcIixcImlcIil9LFc9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxYPS9eaFxcZCQvaSxZPS9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sWj0vXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLywkPS9bK35dLyxfPW5ldyBSZWdFeHAoXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIitLK1wiP3woXCIrSytcIil8LilcIixcImlnXCIpLGFhPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1cIjB4XCIrYi02NTUzNjtyZXR1cm4gZCE9PWR8fGM/YjpkPDA/U3RyaW5nLmZyb21DaGFyQ29kZShkKzY1NTM2KTpTdHJpbmcuZnJvbUNoYXJDb2RlKGQ+PjEwfDU1Mjk2LDEwMjMmZHw1NjMyMCl9LGJhPS8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLGNhPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGI/XCJcXDBcIj09PWE/XCJcXHVmZmZkXCI6YS5zbGljZSgwLC0xKStcIlxcXFxcIithLmNoYXJDb2RlQXQoYS5sZW5ndGgtMSkudG9TdHJpbmcoMTYpK1wiIFwiOlwiXFxcXFwiK2F9LGRhPWZ1bmN0aW9uKCl7bSgpfSxlYT10YShmdW5jdGlvbihhKXtyZXR1cm4gYS5kaXNhYmxlZD09PSEwJiYoXCJmb3JtXCJpbiBhfHxcImxhYmVsXCJpbiBhKX0se2RpcjpcInBhcmVudE5vZGVcIixuZXh0OlwibGVnZW5kXCJ9KTt0cnl7Ry5hcHBseShEPUguY2FsbCh2LmNoaWxkTm9kZXMpLHYuY2hpbGROb2RlcyksRFt2LmNoaWxkTm9kZXMubGVuZ3RoXS5ub2RlVHlwZX1jYXRjaChmYSl7Rz17YXBwbHk6RC5sZW5ndGg/ZnVuY3Rpb24oYSxiKXtGLmFwcGx5KGEsSC5jYWxsKGIpKX06ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmxlbmd0aCxkPTA7d2hpbGUoYVtjKytdPWJbZCsrXSk7YS5sZW5ndGg9Yy0xfX19ZnVuY3Rpb24gZ2EoYSxiLGQsZSl7dmFyIGYsaCxqLGssbCxvLHIscz1iJiZiLm93bmVyRG9jdW1lbnQsdz1iP2Iubm9kZVR5cGU6OTtpZihkPWR8fFtdLFwic3RyaW5nXCIhPXR5cGVvZiBhfHwhYXx8MSE9PXcmJjkhPT13JiYxMSE9PXcpcmV0dXJuIGQ7aWYoIWUmJigoYj9iLm93bmVyRG9jdW1lbnR8fGI6dikhPT1uJiZtKGIpLGI9Ynx8bixwKSl7aWYoMTEhPT13JiYobD1aLmV4ZWMoYSkpKWlmKGY9bFsxXSl7aWYoOT09PXcpe2lmKCEoaj1iLmdldEVsZW1lbnRCeUlkKGYpKSlyZXR1cm4gZDtpZihqLmlkPT09ZilyZXR1cm4gZC5wdXNoKGopLGR9ZWxzZSBpZihzJiYoaj1zLmdldEVsZW1lbnRCeUlkKGYpKSYmdChiLGopJiZqLmlkPT09ZilyZXR1cm4gZC5wdXNoKGopLGR9ZWxzZXtpZihsWzJdKXJldHVybiBHLmFwcGx5KGQsYi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKSksZDtpZigoZj1sWzNdKSYmYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpcmV0dXJuIEcuYXBwbHkoZCxiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZikpLGR9aWYoYy5xc2EmJiFBW2ErXCIgXCJdJiYoIXF8fCFxLnRlc3QoYSkpKXtpZigxIT09dylzPWIscj1hO2Vsc2UgaWYoXCJvYmplY3RcIiE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSl7KGs9Yi5nZXRBdHRyaWJ1dGUoXCJpZFwiKSk/az1rLnJlcGxhY2UoYmEsY2EpOmIuc2V0QXR0cmlidXRlKFwiaWRcIixrPXUpLG89ZyhhKSxoPW8ubGVuZ3RoO3doaWxlKGgtLSlvW2hdPVwiI1wiK2srXCIgXCIrc2Eob1toXSk7cj1vLmpvaW4oXCIsXCIpLHM9JC50ZXN0KGEpJiZxYShiLnBhcmVudE5vZGUpfHxifWlmKHIpdHJ5e3JldHVybiBHLmFwcGx5KGQscy5xdWVyeVNlbGVjdG9yQWxsKHIpKSxkfWNhdGNoKHgpe31maW5hbGx5e2s9PT11JiZiLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpfX19cmV0dXJuIGkoYS5yZXBsYWNlKFAsXCIkMVwiKSxiLGQsZSl9ZnVuY3Rpb24gaGEoKXt2YXIgYT1bXTtmdW5jdGlvbiBiKGMsZSl7cmV0dXJuIGEucHVzaChjK1wiIFwiKT5kLmNhY2hlTGVuZ3RoJiZkZWxldGUgYlthLnNoaWZ0KCldLGJbYytcIiBcIl09ZX1yZXR1cm4gYn1mdW5jdGlvbiBpYShhKXtyZXR1cm4gYVt1XT0hMCxhfWZ1bmN0aW9uIGphKGEpe3ZhciBiPW4uY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO3RyeXtyZXR1cm4hIWEoYil9Y2F0Y2goYyl7cmV0dXJuITF9ZmluYWxseXtiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKSxiPW51bGx9fWZ1bmN0aW9uIGthKGEsYil7dmFyIGM9YS5zcGxpdChcInxcIiksZT1jLmxlbmd0aDt3aGlsZShlLS0pZC5hdHRySGFuZGxlW2NbZV1dPWJ9ZnVuY3Rpb24gbGEoYSxiKXt2YXIgYz1iJiZhLGQ9YyYmMT09PWEubm9kZVR5cGUmJjE9PT1iLm5vZGVUeXBlJiZhLnNvdXJjZUluZGV4LWIuc291cmNlSW5kZXg7aWYoZClyZXR1cm4gZDtpZihjKXdoaWxlKGM9Yy5uZXh0U2libGluZylpZihjPT09YilyZXR1cm4tMTtyZXR1cm4gYT8xOi0xfWZ1bmN0aW9uIG1hKGEpe3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09YyYmYi50eXBlPT09YX19ZnVuY3Rpb24gbmEoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4oXCJpbnB1dFwiPT09Y3x8XCJidXR0b25cIj09PWMpJiZiLnR5cGU9PT1hfX1mdW5jdGlvbiBvYShhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuXCJmb3JtXCJpbiBiP2IucGFyZW50Tm9kZSYmYi5kaXNhYmxlZD09PSExP1wibGFiZWxcImluIGI/XCJsYWJlbFwiaW4gYi5wYXJlbnROb2RlP2IucGFyZW50Tm9kZS5kaXNhYmxlZD09PWE6Yi5kaXNhYmxlZD09PWE6Yi5pc0Rpc2FibGVkPT09YXx8Yi5pc0Rpc2FibGVkIT09IWEmJmVhKGIpPT09YTpiLmRpc2FibGVkPT09YTpcImxhYmVsXCJpbiBiJiZiLmRpc2FibGVkPT09YX19ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGlhKGZ1bmN0aW9uKGIpe3JldHVybiBiPStiLGlhKGZ1bmN0aW9uKGMsZCl7dmFyIGUsZj1hKFtdLGMubGVuZ3RoLGIpLGc9Zi5sZW5ndGg7d2hpbGUoZy0tKWNbZT1mW2ddXSYmKGNbZV09IShkW2VdPWNbZV0pKX0pfSl9ZnVuY3Rpb24gcWEoYSl7cmV0dXJuIGEmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEVsZW1lbnRzQnlUYWdOYW1lJiZhfWM9Z2Euc3VwcG9ydD17fSxmPWdhLmlzWE1MPWZ1bmN0aW9uKGEpe3ZhciBiPWEmJihhLm93bmVyRG9jdW1lbnR8fGEpLmRvY3VtZW50RWxlbWVudDtyZXR1cm4hIWImJlwiSFRNTFwiIT09Yi5ub2RlTmFtZX0sbT1nYS5zZXREb2N1bWVudD1mdW5jdGlvbihhKXt2YXIgYixlLGc9YT9hLm93bmVyRG9jdW1lbnR8fGE6djtyZXR1cm4gZyE9PW4mJjk9PT1nLm5vZGVUeXBlJiZnLmRvY3VtZW50RWxlbWVudD8obj1nLG89bi5kb2N1bWVudEVsZW1lbnQscD0hZihuKSx2IT09biYmKGU9bi5kZWZhdWx0VmlldykmJmUudG9wIT09ZSYmKGUuYWRkRXZlbnRMaXN0ZW5lcj9lLmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIixkYSwhMSk6ZS5hdHRhY2hFdmVudCYmZS5hdHRhY2hFdmVudChcIm9udW5sb2FkXCIsZGEpKSxjLmF0dHJpYnV0ZXM9amEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuY2xhc3NOYW1lPVwiaVwiLCFhLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKX0pLGMuZ2V0RWxlbWVudHNCeVRhZ05hbWU9amEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuYXBwZW5kQ2hpbGQobi5jcmVhdGVDb21tZW50KFwiXCIpKSwhYS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RofSksYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lPVkudGVzdChuLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpLGMuZ2V0QnlJZD1qYShmdW5jdGlvbihhKXtyZXR1cm4gby5hcHBlbmRDaGlsZChhKS5pZD11LCFuLmdldEVsZW1lbnRzQnlOYW1lfHwhbi5nZXRFbGVtZW50c0J5TmFtZSh1KS5sZW5ndGh9KSxjLmdldEJ5SWQ/KGQuZmlsdGVyLklEPWZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShfLGFhKTtyZXR1cm4gZnVuY3Rpb24oYSl7cmV0dXJuIGEuZ2V0QXR0cmlidXRlKFwiaWRcIik9PT1ifX0sZC5maW5kLklEPWZ1bmN0aW9uKGEsYil7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0RWxlbWVudEJ5SWQmJnApe3ZhciBjPWIuZ2V0RWxlbWVudEJ5SWQoYSk7cmV0dXJuIGM/W2NdOltdfX0pOihkLmZpbHRlci5JRD1mdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoXyxhYSk7cmV0dXJuIGZ1bmN0aW9uKGEpe3ZhciBjPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEF0dHJpYnV0ZU5vZGUmJmEuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO3JldHVybiBjJiZjLnZhbHVlPT09Yn19LGQuZmluZC5JRD1mdW5jdGlvbihhLGIpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBiLmdldEVsZW1lbnRCeUlkJiZwKXt2YXIgYyxkLGUsZj1iLmdldEVsZW1lbnRCeUlkKGEpO2lmKGYpe2lmKGM9Zi5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIiksYyYmYy52YWx1ZT09PWEpcmV0dXJuW2ZdO2U9Yi5nZXRFbGVtZW50c0J5TmFtZShhKSxkPTA7d2hpbGUoZj1lW2QrK10paWYoYz1mLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSxjJiZjLnZhbHVlPT09YSlyZXR1cm5bZl19cmV0dXJuW119fSksZC5maW5kLlRBRz1jLmdldEVsZW1lbnRzQnlUYWdOYW1lP2Z1bmN0aW9uKGEsYil7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0RWxlbWVudHNCeVRhZ05hbWU/Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKTpjLnFzYT9iLnF1ZXJ5U2VsZWN0b3JBbGwoYSk6dm9pZCAwfTpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT0wLGY9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKTtpZihcIipcIj09PWEpe3doaWxlKGM9ZltlKytdKTE9PT1jLm5vZGVUeXBlJiZkLnB1c2goYyk7cmV0dXJuIGR9cmV0dXJuIGZ9LGQuZmluZC5DTEFTUz1jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmZ1bmN0aW9uKGEsYil7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmcClyZXR1cm4gYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGEpfSxyPVtdLHE9W10sKGMucXNhPVkudGVzdChuLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKGphKGZ1bmN0aW9uKGEpe28uYXBwZW5kQ2hpbGQoYSkuaW5uZXJIVE1MPVwiPGEgaWQ9J1wiK3UrXCInPjwvYT48c2VsZWN0IGlkPSdcIit1K1wiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCIsYS5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoJiZxLnB1c2goXCJbKl4kXT1cIitLK1wiKig/OicnfFxcXCJcXFwiKVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aHx8cS5wdXNoKFwiXFxcXFtcIitLK1wiKig/OnZhbHVlfFwiK0orXCIpXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIltpZH49XCIrdStcIi1dXCIpLmxlbmd0aHx8cS5wdXNoKFwifj1cIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RofHxxLnB1c2goXCI6Y2hlY2tlZFwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhI1wiK3UrXCIrKlwiKS5sZW5ndGh8fHEucHVzaChcIi4jLitbK35dXCIpfSksamEoZnVuY3Rpb24oYSl7YS5pbm5lckhUTUw9XCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjt2YXIgYj1uLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtiLnNldEF0dHJpYnV0ZShcInR5cGVcIixcImhpZGRlblwiKSxhLmFwcGVuZENoaWxkKGIpLnNldEF0dHJpYnV0ZShcIm5hbWVcIixcIkRcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoJiZxLnB1c2goXCJuYW1lXCIrSytcIipbKl4kfCF+XT89XCIpLDIhPT1hLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGgmJnEucHVzaChcIjplbmFibGVkXCIsXCI6ZGlzYWJsZWRcIiksby5hcHBlbmRDaGlsZChhKS5kaXNhYmxlZD0hMCwyIT09YS5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCYmcS5wdXNoKFwiOmVuYWJsZWRcIixcIjpkaXNhYmxlZFwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpLHEucHVzaChcIiwuKjpcIil9KSksKGMubWF0Y2hlc1NlbGVjdG9yPVkudGVzdChzPW8ubWF0Y2hlc3x8by53ZWJraXRNYXRjaGVzU2VsZWN0b3J8fG8ubW96TWF0Y2hlc1NlbGVjdG9yfHxvLm9NYXRjaGVzU2VsZWN0b3J8fG8ubXNNYXRjaGVzU2VsZWN0b3IpKSYmamEoZnVuY3Rpb24oYSl7Yy5kaXNjb25uZWN0ZWRNYXRjaD1zLmNhbGwoYSxcIipcIikscy5jYWxsKGEsXCJbcyE9JyddOnhcIiksci5wdXNoKFwiIT1cIixOKX0pLHE9cS5sZW5ndGgmJm5ldyBSZWdFeHAocS5qb2luKFwifFwiKSkscj1yLmxlbmd0aCYmbmV3IFJlZ0V4cChyLmpvaW4oXCJ8XCIpKSxiPVkudGVzdChvLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSx0PWJ8fFkudGVzdChvLmNvbnRhaW5zKT9mdW5jdGlvbihhLGIpe3ZhciBjPTk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEsZD1iJiZiLnBhcmVudE5vZGU7cmV0dXJuIGE9PT1kfHwhKCFkfHwxIT09ZC5ub2RlVHlwZXx8IShjLmNvbnRhaW5zP2MuY29udGFpbnMoZCk6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiYmMTYmYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihkKSkpfTpmdW5jdGlvbihhLGIpe2lmKGIpd2hpbGUoYj1iLnBhcmVudE5vZGUpaWYoYj09PWEpcmV0dXJuITA7cmV0dXJuITF9LEI9Yj9mdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiBsPSEwLDA7dmFyIGQ9IWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24tIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247cmV0dXJuIGQ/ZDooZD0oYS5vd25lckRvY3VtZW50fHxhKT09PShiLm93bmVyRG9jdW1lbnR8fGIpP2EuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYik6MSwxJmR8fCFjLnNvcnREZXRhY2hlZCYmYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhKT09PWQ/YT09PW58fGEub3duZXJEb2N1bWVudD09PXYmJnQodixhKT8tMTpiPT09bnx8Yi5vd25lckRvY3VtZW50PT09diYmdCh2LGIpPzE6az9JKGssYSktSShrLGIpOjA6NCZkPy0xOjEpfTpmdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiBsPSEwLDA7dmFyIGMsZD0wLGU9YS5wYXJlbnROb2RlLGY9Yi5wYXJlbnROb2RlLGc9W2FdLGg9W2JdO2lmKCFlfHwhZilyZXR1cm4gYT09PW4/LTE6Yj09PW4/MTplPy0xOmY/MTprP0koayxhKS1JKGssYik6MDtpZihlPT09ZilyZXR1cm4gbGEoYSxiKTtjPWE7d2hpbGUoYz1jLnBhcmVudE5vZGUpZy51bnNoaWZ0KGMpO2M9Yjt3aGlsZShjPWMucGFyZW50Tm9kZSloLnVuc2hpZnQoYyk7d2hpbGUoZ1tkXT09PWhbZF0pZCsrO3JldHVybiBkP2xhKGdbZF0saFtkXSk6Z1tkXT09PXY/LTE6aFtkXT09PXY/MTowfSxuKTpufSxnYS5tYXRjaGVzPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdhKGEsbnVsbCxudWxsLGIpfSxnYS5tYXRjaGVzU2VsZWN0b3I9ZnVuY3Rpb24oYSxiKXtpZigoYS5vd25lckRvY3VtZW50fHxhKSE9PW4mJm0oYSksYj1iLnJlcGxhY2UoUyxcIj0nJDEnXVwiKSxjLm1hdGNoZXNTZWxlY3RvciYmcCYmIUFbYitcIiBcIl0mJighcnx8IXIudGVzdChiKSkmJighcXx8IXEudGVzdChiKSkpdHJ5e3ZhciBkPXMuY2FsbChhLGIpO2lmKGR8fGMuZGlzY29ubmVjdGVkTWF0Y2h8fGEuZG9jdW1lbnQmJjExIT09YS5kb2N1bWVudC5ub2RlVHlwZSlyZXR1cm4gZH1jYXRjaChlKXt9cmV0dXJuIGdhKGIsbixudWxsLFthXSkubGVuZ3RoPjB9LGdhLmNvbnRhaW5zPWZ1bmN0aW9uKGEsYil7cmV0dXJuKGEub3duZXJEb2N1bWVudHx8YSkhPT1uJiZtKGEpLHQoYSxiKX0sZ2EuYXR0cj1mdW5jdGlvbihhLGIpeyhhLm93bmVyRG9jdW1lbnR8fGEpIT09biYmbShhKTt2YXIgZT1kLmF0dHJIYW5kbGVbYi50b0xvd2VyQ2FzZSgpXSxmPWUmJkMuY2FsbChkLmF0dHJIYW5kbGUsYi50b0xvd2VyQ2FzZSgpKT9lKGEsYiwhcCk6dm9pZCAwO3JldHVybiB2b2lkIDAhPT1mP2Y6Yy5hdHRyaWJ1dGVzfHwhcD9hLmdldEF0dHJpYnV0ZShiKTooZj1hLmdldEF0dHJpYnV0ZU5vZGUoYikpJiZmLnNwZWNpZmllZD9mLnZhbHVlOm51bGx9LGdhLmVzY2FwZT1mdW5jdGlvbihhKXtyZXR1cm4oYStcIlwiKS5yZXBsYWNlKGJhLGNhKX0sZ2EuZXJyb3I9ZnVuY3Rpb24oYSl7dGhyb3cgbmV3IEVycm9yKFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIrYSl9LGdhLnVuaXF1ZVNvcnQ9ZnVuY3Rpb24oYSl7dmFyIGIsZD1bXSxlPTAsZj0wO2lmKGw9IWMuZGV0ZWN0RHVwbGljYXRlcyxrPSFjLnNvcnRTdGFibGUmJmEuc2xpY2UoMCksYS5zb3J0KEIpLGwpe3doaWxlKGI9YVtmKytdKWI9PT1hW2ZdJiYoZT1kLnB1c2goZikpO3doaWxlKGUtLSlhLnNwbGljZShkW2VdLDEpfXJldHVybiBrPW51bGwsYX0sZT1nYS5nZXRUZXh0PWZ1bmN0aW9uKGEpe3ZhciBiLGM9XCJcIixkPTAsZj1hLm5vZGVUeXBlO2lmKGYpe2lmKDE9PT1mfHw5PT09Znx8MTE9PT1mKXtpZihcInN0cmluZ1wiPT10eXBlb2YgYS50ZXh0Q29udGVudClyZXR1cm4gYS50ZXh0Q29udGVudDtmb3IoYT1hLmZpcnN0Q2hpbGQ7YTthPWEubmV4dFNpYmxpbmcpYys9ZShhKX1lbHNlIGlmKDM9PT1mfHw0PT09ZilyZXR1cm4gYS5ub2RlVmFsdWV9ZWxzZSB3aGlsZShiPWFbZCsrXSljKz1lKGIpO3JldHVybiBjfSxkPWdhLnNlbGVjdG9ycz17Y2FjaGVMZW5ndGg6NTAsY3JlYXRlUHNldWRvOmlhLG1hdGNoOlYsYXR0ckhhbmRsZTp7fSxmaW5kOnt9LHJlbGF0aXZlOntcIj5cIjp7ZGlyOlwicGFyZW50Tm9kZVwiLGZpcnN0OiEwfSxcIiBcIjp7ZGlyOlwicGFyZW50Tm9kZVwifSxcIitcIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCIsZmlyc3Q6ITB9LFwiflwiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihhKXtyZXR1cm4gYVsxXT1hWzFdLnJlcGxhY2UoXyxhYSksYVszXT0oYVszXXx8YVs0XXx8YVs1XXx8XCJcIikucmVwbGFjZShfLGFhKSxcIn49XCI9PT1hWzJdJiYoYVszXT1cIiBcIithWzNdK1wiIFwiKSxhLnNsaWNlKDAsNCl9LENISUxEOmZ1bmN0aW9uKGEpe3JldHVybiBhWzFdPWFbMV0udG9Mb3dlckNhc2UoKSxcIm50aFwiPT09YVsxXS5zbGljZSgwLDMpPyhhWzNdfHxnYS5lcnJvcihhWzBdKSxhWzRdPSsoYVs0XT9hWzVdKyhhWzZdfHwxKToyKihcImV2ZW5cIj09PWFbM118fFwib2RkXCI9PT1hWzNdKSksYVs1XT0rKGFbN10rYVs4XXx8XCJvZGRcIj09PWFbM10pKTphWzNdJiZnYS5lcnJvcihhWzBdKSxhfSxQU0VVRE86ZnVuY3Rpb24oYSl7dmFyIGIsYz0hYVs2XSYmYVsyXTtyZXR1cm4gVi5DSElMRC50ZXN0KGFbMF0pP251bGw6KGFbM10/YVsyXT1hWzRdfHxhWzVdfHxcIlwiOmMmJlQudGVzdChjKSYmKGI9ZyhjLCEwKSkmJihiPWMuaW5kZXhPZihcIilcIixjLmxlbmd0aC1iKS1jLmxlbmd0aCkmJihhWzBdPWFbMF0uc2xpY2UoMCxiKSxhWzJdPWMuc2xpY2UoMCxiKSksYS5zbGljZSgwLDMpKX19LGZpbHRlcjp7VEFHOmZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShfLGFhKS50b0xvd2VyQ2FzZSgpO3JldHVyblwiKlwiPT09YT9mdW5jdGlvbigpe3JldHVybiEwfTpmdW5jdGlvbihhKXtyZXR1cm4gYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09Yn19LENMQVNTOmZ1bmN0aW9uKGEpe3ZhciBiPXlbYStcIiBcIl07cmV0dXJuIGJ8fChiPW5ldyBSZWdFeHAoXCIoXnxcIitLK1wiKVwiK2ErXCIoXCIrSytcInwkKVwiKSkmJnkoYSxmdW5jdGlvbihhKXtyZXR1cm4gYi50ZXN0KFwic3RyaW5nXCI9PXR5cGVvZiBhLmNsYXNzTmFtZSYmYS5jbGFzc05hbWV8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEF0dHJpYnV0ZSYmYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIil9KX0sQVRUUjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGZ1bmN0aW9uKGQpe3ZhciBlPWdhLmF0dHIoZCxhKTtyZXR1cm4gbnVsbD09ZT9cIiE9XCI9PT1iOiFifHwoZSs9XCJcIixcIj1cIj09PWI/ZT09PWM6XCIhPVwiPT09Yj9lIT09YzpcIl49XCI9PT1iP2MmJjA9PT1lLmluZGV4T2YoYyk6XCIqPVwiPT09Yj9jJiZlLmluZGV4T2YoYyk+LTE6XCIkPVwiPT09Yj9jJiZlLnNsaWNlKC1jLmxlbmd0aCk9PT1jOlwifj1cIj09PWI/KFwiIFwiK2UucmVwbGFjZShPLFwiIFwiKStcIiBcIikuaW5kZXhPZihjKT4tMTpcInw9XCI9PT1iJiYoZT09PWN8fGUuc2xpY2UoMCxjLmxlbmd0aCsxKT09PWMrXCItXCIpKX19LENISUxEOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJudGhcIiE9PWEuc2xpY2UoMCwzKSxnPVwibGFzdFwiIT09YS5zbGljZSgtNCksaD1cIm9mLXR5cGVcIj09PWI7cmV0dXJuIDE9PT1kJiYwPT09ZT9mdW5jdGlvbihhKXtyZXR1cm4hIWEucGFyZW50Tm9kZX06ZnVuY3Rpb24oYixjLGkpe3ZhciBqLGssbCxtLG4sbyxwPWYhPT1nP1wibmV4dFNpYmxpbmdcIjpcInByZXZpb3VzU2libGluZ1wiLHE9Yi5wYXJlbnROb2RlLHI9aCYmYi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLHM9IWkmJiFoLHQ9ITE7aWYocSl7aWYoZil7d2hpbGUocCl7bT1iO3doaWxlKG09bVtwXSlpZihoP20ubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXI6MT09PW0ubm9kZVR5cGUpcmV0dXJuITE7bz1wPVwib25seVwiPT09YSYmIW8mJlwibmV4dFNpYmxpbmdcIn1yZXR1cm4hMH1pZihvPVtnP3EuZmlyc3RDaGlsZDpxLmxhc3RDaGlsZF0sZyYmcyl7bT1xLGw9bVt1XXx8KG1bdV09e30pLGs9bFttLnVuaXF1ZUlEXXx8KGxbbS51bmlxdWVJRF09e30pLGo9a1thXXx8W10sbj1qWzBdPT09dyYmalsxXSx0PW4mJmpbMl0sbT1uJiZxLmNoaWxkTm9kZXNbbl07d2hpbGUobT0rK24mJm0mJm1bcF18fCh0PW49MCl8fG8ucG9wKCkpaWYoMT09PW0ubm9kZVR5cGUmJisrdCYmbT09PWIpe2tbYV09W3csbix0XTticmVha319ZWxzZSBpZihzJiYobT1iLGw9bVt1XXx8KG1bdV09e30pLGs9bFttLnVuaXF1ZUlEXXx8KGxbbS51bmlxdWVJRF09e30pLGo9a1thXXx8W10sbj1qWzBdPT09dyYmalsxXSx0PW4pLHQ9PT0hMSl3aGlsZShtPSsrbiYmbSYmbVtwXXx8KHQ9bj0wKXx8by5wb3AoKSlpZigoaD9tLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1yOjE9PT1tLm5vZGVUeXBlKSYmKyt0JiYocyYmKGw9bVt1XXx8KG1bdV09e30pLGs9bFttLnVuaXF1ZUlEXXx8KGxbbS51bmlxdWVJRF09e30pLGtbYV09W3csdF0pLG09PT1iKSlicmVhaztyZXR1cm4gdC09ZSx0PT09ZHx8dCVkPT09MCYmdC9kPj0wfX19LFBTRVVETzpmdW5jdGlvbihhLGIpe3ZhciBjLGU9ZC5wc2V1ZG9zW2FdfHxkLnNldEZpbHRlcnNbYS50b0xvd2VyQ2FzZSgpXXx8Z2EuZXJyb3IoXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiK2EpO3JldHVybiBlW3VdP2UoYik6ZS5sZW5ndGg+MT8oYz1bYSxhLFwiXCIsYl0sZC5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KGEudG9Mb3dlckNhc2UoKSk/aWEoZnVuY3Rpb24oYSxjKXt2YXIgZCxmPWUoYSxiKSxnPWYubGVuZ3RoO3doaWxlKGctLSlkPUkoYSxmW2ddKSxhW2RdPSEoY1tkXT1mW2ddKX0pOmZ1bmN0aW9uKGEpe3JldHVybiBlKGEsMCxjKX0pOmV9fSxwc2V1ZG9zOntub3Q6aWEoZnVuY3Rpb24oYSl7dmFyIGI9W10sYz1bXSxkPWgoYS5yZXBsYWNlKFAsXCIkMVwiKSk7cmV0dXJuIGRbdV0/aWEoZnVuY3Rpb24oYSxiLGMsZSl7dmFyIGYsZz1kKGEsbnVsbCxlLFtdKSxoPWEubGVuZ3RoO3doaWxlKGgtLSkoZj1nW2hdKSYmKGFbaF09IShiW2hdPWYpKX0pOmZ1bmN0aW9uKGEsZSxmKXtyZXR1cm4gYlswXT1hLGQoYixudWxsLGYsYyksYlswXT1udWxsLCFjLnBvcCgpfX0pLGhhczppYShmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGdhKGEsYikubGVuZ3RoPjB9fSksY29udGFpbnM6aWEoZnVuY3Rpb24oYSl7cmV0dXJuIGE9YS5yZXBsYWNlKF8sYWEpLGZ1bmN0aW9uKGIpe3JldHVybihiLnRleHRDb250ZW50fHxiLmlubmVyVGV4dHx8ZShiKSkuaW5kZXhPZihhKT4tMX19KSxsYW5nOmlhKGZ1bmN0aW9uKGEpe3JldHVybiBVLnRlc3QoYXx8XCJcIil8fGdhLmVycm9yKFwidW5zdXBwb3J0ZWQgbGFuZzogXCIrYSksYT1hLnJlcGxhY2UoXyxhYSkudG9Mb3dlckNhc2UoKSxmdW5jdGlvbihiKXt2YXIgYztkbyBpZihjPXA/Yi5sYW5nOmIuZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIil8fGIuZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSlyZXR1cm4gYz1jLnRvTG93ZXJDYXNlKCksYz09PWF8fDA9PT1jLmluZGV4T2YoYStcIi1cIik7d2hpbGUoKGI9Yi5wYXJlbnROb2RlKSYmMT09PWIubm9kZVR5cGUpO3JldHVybiExfX0pLHRhcmdldDpmdW5jdGlvbihiKXt2YXIgYz1hLmxvY2F0aW9uJiZhLmxvY2F0aW9uLmhhc2g7cmV0dXJuIGMmJmMuc2xpY2UoMSk9PT1iLmlkfSxyb290OmZ1bmN0aW9uKGEpe3JldHVybiBhPT09b30sZm9jdXM6ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1uLmFjdGl2ZUVsZW1lbnQmJighbi5oYXNGb2N1c3x8bi5oYXNGb2N1cygpKSYmISEoYS50eXBlfHxhLmhyZWZ8fH5hLnRhYkluZGV4KX0sZW5hYmxlZDpvYSghMSksZGlzYWJsZWQ6b2EoITApLGNoZWNrZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWImJiEhYS5jaGVja2VkfHxcIm9wdGlvblwiPT09YiYmISFhLnNlbGVjdGVkfSxzZWxlY3RlZDpmdW5jdGlvbihhKXtyZXR1cm4gYS5wYXJlbnROb2RlJiZhLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxhLnNlbGVjdGVkPT09ITB9LGVtcHR5OmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthO2E9YS5uZXh0U2libGluZylpZihhLm5vZGVUeXBlPDYpcmV0dXJuITE7cmV0dXJuITB9LHBhcmVudDpmdW5jdGlvbihhKXtyZXR1cm4hZC5wc2V1ZG9zLmVtcHR5KGEpfSxoZWFkZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIFgudGVzdChhLm5vZGVOYW1lKX0saW5wdXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFcudGVzdChhLm5vZGVOYW1lKX0sYnV0dG9uOmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iJiZcImJ1dHRvblwiPT09YS50eXBlfHxcImJ1dHRvblwiPT09Yn0sdGV4dDpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm5cImlucHV0XCI9PT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJlwidGV4dFwiPT09YS50eXBlJiYobnVsbD09KGI9YS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKXx8XCJ0ZXh0XCI9PT1iLnRvTG93ZXJDYXNlKCkpfSxmaXJzdDpwYShmdW5jdGlvbigpe3JldHVyblswXX0pLGxhc3Q6cGEoZnVuY3Rpb24oYSxiKXtyZXR1cm5bYi0xXX0pLGVxOnBhKGZ1bmN0aW9uKGEsYixjKXtyZXR1cm5bYzwwP2MrYjpjXX0pLGV2ZW46cGEoZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MDtjPGI7Yys9MilhLnB1c2goYyk7cmV0dXJuIGF9KSxvZGQ6cGEoZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MTtjPGI7Yys9MilhLnB1c2goYyk7cmV0dXJuIGF9KSxsdDpwYShmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWM8MD9jK2I6YzstLWQ+PTA7KWEucHVzaChkKTtyZXR1cm4gYX0pLGd0OnBhKGZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YzwwP2MrYjpjOysrZDxiOylhLnB1c2goZCk7cmV0dXJuIGF9KX19LGQucHNldWRvcy5udGg9ZC5wc2V1ZG9zLmVxO2ZvcihiIGlue3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KWQucHNldWRvc1tiXT1tYShiKTtmb3IoYiBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KWQucHNldWRvc1tiXT1uYShiKTtmdW5jdGlvbiByYSgpe31yYS5wcm90b3R5cGU9ZC5maWx0ZXJzPWQucHNldWRvcyxkLnNldEZpbHRlcnM9bmV3IHJhLGc9Z2EudG9rZW5pemU9ZnVuY3Rpb24oYSxiKXt2YXIgYyxlLGYsZyxoLGksaixrPXpbYStcIiBcIl07aWYoaylyZXR1cm4gYj8wOmsuc2xpY2UoMCk7aD1hLGk9W10saj1kLnByZUZpbHRlcjt3aGlsZShoKXtjJiYhKGU9US5leGVjKGgpKXx8KGUmJihoPWguc2xpY2UoZVswXS5sZW5ndGgpfHxoKSxpLnB1c2goZj1bXSkpLGM9ITEsKGU9Ui5leGVjKGgpKSYmKGM9ZS5zaGlmdCgpLGYucHVzaCh7dmFsdWU6Yyx0eXBlOmVbMF0ucmVwbGFjZShQLFwiIFwiKX0pLGg9aC5zbGljZShjLmxlbmd0aCkpO2ZvcihnIGluIGQuZmlsdGVyKSEoZT1WW2ddLmV4ZWMoaCkpfHxqW2ddJiYhKGU9altnXShlKSl8fChjPWUuc2hpZnQoKSxmLnB1c2goe3ZhbHVlOmMsdHlwZTpnLG1hdGNoZXM6ZX0pLGg9aC5zbGljZShjLmxlbmd0aCkpO2lmKCFjKWJyZWFrfXJldHVybiBiP2gubGVuZ3RoOmg/Z2EuZXJyb3IoYSk6eihhLGkpLnNsaWNlKDApfTtmdW5jdGlvbiBzYShhKXtmb3IodmFyIGI9MCxjPWEubGVuZ3RoLGQ9XCJcIjtiPGM7YisrKWQrPWFbYl0udmFsdWU7cmV0dXJuIGR9ZnVuY3Rpb24gdGEoYSxiLGMpe3ZhciBkPWIuZGlyLGU9Yi5uZXh0LGY9ZXx8ZCxnPWMmJlwicGFyZW50Tm9kZVwiPT09ZixoPXgrKztyZXR1cm4gYi5maXJzdD9mdW5jdGlvbihiLGMsZSl7d2hpbGUoYj1iW2RdKWlmKDE9PT1iLm5vZGVUeXBlfHxnKXJldHVybiBhKGIsYyxlKTtyZXR1cm4hMX06ZnVuY3Rpb24oYixjLGkpe3ZhciBqLGssbCxtPVt3LGhdO2lmKGkpe3doaWxlKGI9YltkXSlpZigoMT09PWIubm9kZVR5cGV8fGcpJiZhKGIsYyxpKSlyZXR1cm4hMH1lbHNlIHdoaWxlKGI9YltkXSlpZigxPT09Yi5ub2RlVHlwZXx8ZylpZihsPWJbdV18fChiW3VdPXt9KSxrPWxbYi51bmlxdWVJRF18fChsW2IudW5pcXVlSURdPXt9KSxlJiZlPT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKWI9YltkXXx8YjtlbHNle2lmKChqPWtbZl0pJiZqWzBdPT09dyYmalsxXT09PWgpcmV0dXJuIG1bMl09alsyXTtpZihrW2ZdPW0sbVsyXT1hKGIsYyxpKSlyZXR1cm4hMH1yZXR1cm4hMX19ZnVuY3Rpb24gdWEoYSl7cmV0dXJuIGEubGVuZ3RoPjE/ZnVuY3Rpb24oYixjLGQpe3ZhciBlPWEubGVuZ3RoO3doaWxlKGUtLSlpZighYVtlXShiLGMsZCkpcmV0dXJuITE7cmV0dXJuITB9OmFbMF19ZnVuY3Rpb24gdmEoYSxiLGMpe2Zvcih2YXIgZD0wLGU9Yi5sZW5ndGg7ZDxlO2QrKylnYShhLGJbZF0sYyk7cmV0dXJuIGN9ZnVuY3Rpb24gd2EoYSxiLGMsZCxlKXtmb3IodmFyIGYsZz1bXSxoPTAsaT1hLmxlbmd0aCxqPW51bGwhPWI7aDxpO2grKykoZj1hW2hdKSYmKGMmJiFjKGYsZCxlKXx8KGcucHVzaChmKSxqJiZiLnB1c2goaCkpKTtyZXR1cm4gZ31mdW5jdGlvbiB4YShhLGIsYyxkLGUsZil7cmV0dXJuIGQmJiFkW3VdJiYoZD14YShkKSksZSYmIWVbdV0mJihlPXhhKGUsZikpLGlhKGZ1bmN0aW9uKGYsZyxoLGkpe3ZhciBqLGssbCxtPVtdLG49W10sbz1nLmxlbmd0aCxwPWZ8fHZhKGJ8fFwiKlwiLGgubm9kZVR5cGU/W2hdOmgsW10pLHE9IWF8fCFmJiZiP3A6d2EocCxtLGEsaCxpKSxyPWM/ZXx8KGY/YTpvfHxkKT9bXTpnOnE7aWYoYyYmYyhxLHIsaCxpKSxkKXtqPXdhKHIsbiksZChqLFtdLGgsaSksaz1qLmxlbmd0aDt3aGlsZShrLS0pKGw9altrXSkmJihyW25ba11dPSEocVtuW2tdXT1sKSl9aWYoZil7aWYoZXx8YSl7aWYoZSl7aj1bXSxrPXIubGVuZ3RoO3doaWxlKGstLSkobD1yW2tdKSYmai5wdXNoKHFba109bCk7ZShudWxsLHI9W10saixpKX1rPXIubGVuZ3RoO3doaWxlKGstLSkobD1yW2tdKSYmKGo9ZT9JKGYsbCk6bVtrXSk+LTEmJihmW2pdPSEoZ1tqXT1sKSl9fWVsc2Ugcj13YShyPT09Zz9yLnNwbGljZShvLHIubGVuZ3RoKTpyKSxlP2UobnVsbCxnLHIsaSk6Ry5hcHBseShnLHIpfSl9ZnVuY3Rpb24geWEoYSl7Zm9yKHZhciBiLGMsZSxmPWEubGVuZ3RoLGc9ZC5yZWxhdGl2ZVthWzBdLnR5cGVdLGg9Z3x8ZC5yZWxhdGl2ZVtcIiBcIl0saT1nPzE6MCxrPXRhKGZ1bmN0aW9uKGEpe3JldHVybiBhPT09Yn0saCwhMCksbD10YShmdW5jdGlvbihhKXtyZXR1cm4gSShiLGEpPi0xfSxoLCEwKSxtPVtmdW5jdGlvbihhLGMsZCl7dmFyIGU9IWcmJihkfHxjIT09ail8fCgoYj1jKS5ub2RlVHlwZT9rKGEsYyxkKTpsKGEsYyxkKSk7cmV0dXJuIGI9bnVsbCxlfV07aTxmO2krKylpZihjPWQucmVsYXRpdmVbYVtpXS50eXBlXSltPVt0YSh1YShtKSxjKV07ZWxzZXtpZihjPWQuZmlsdGVyW2FbaV0udHlwZV0uYXBwbHkobnVsbCxhW2ldLm1hdGNoZXMpLGNbdV0pe2ZvcihlPSsraTtlPGY7ZSsrKWlmKGQucmVsYXRpdmVbYVtlXS50eXBlXSlicmVhaztyZXR1cm4geGEoaT4xJiZ1YShtKSxpPjEmJnNhKGEuc2xpY2UoMCxpLTEpLmNvbmNhdCh7dmFsdWU6XCIgXCI9PT1hW2ktMl0udHlwZT9cIipcIjpcIlwifSkpLnJlcGxhY2UoUCxcIiQxXCIpLGMsaTxlJiZ5YShhLnNsaWNlKGksZSkpLGU8ZiYmeWEoYT1hLnNsaWNlKGUpKSxlPGYmJnNhKGEpKX1tLnB1c2goYyl9cmV0dXJuIHVhKG0pfWZ1bmN0aW9uIHphKGEsYil7dmFyIGM9Yi5sZW5ndGg+MCxlPWEubGVuZ3RoPjAsZj1mdW5jdGlvbihmLGcsaCxpLGspe3ZhciBsLG8scSxyPTAscz1cIjBcIix0PWYmJltdLHU9W10sdj1qLHg9Znx8ZSYmZC5maW5kLlRBRyhcIipcIixrKSx5PXcrPW51bGw9PXY/MTpNYXRoLnJhbmRvbSgpfHwuMSx6PXgubGVuZ3RoO2ZvcihrJiYoaj1nPT09bnx8Z3x8ayk7cyE9PXomJm51bGwhPShsPXhbc10pO3MrKyl7aWYoZSYmbCl7bz0wLGd8fGwub3duZXJEb2N1bWVudD09PW58fChtKGwpLGg9IXApO3doaWxlKHE9YVtvKytdKWlmKHEobCxnfHxuLGgpKXtpLnB1c2gobCk7YnJlYWt9ayYmKHc9eSl9YyYmKChsPSFxJiZsKSYmci0tLGYmJnQucHVzaChsKSl9aWYocis9cyxjJiZzIT09cil7bz0wO3doaWxlKHE9YltvKytdKXEodCx1LGcsaCk7aWYoZil7aWYocj4wKXdoaWxlKHMtLSl0W3NdfHx1W3NdfHwodVtzXT1FLmNhbGwoaSkpO3U9d2EodSl9Ry5hcHBseShpLHUpLGsmJiFmJiZ1Lmxlbmd0aD4wJiZyK2IubGVuZ3RoPjEmJmdhLnVuaXF1ZVNvcnQoaSl9cmV0dXJuIGsmJih3PXksaj12KSx0fTtyZXR1cm4gYz9pYShmKTpmfXJldHVybiBoPWdhLmNvbXBpbGU9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPVtdLGU9W10sZj1BW2ErXCIgXCJdO2lmKCFmKXtifHwoYj1nKGEpKSxjPWIubGVuZ3RoO3doaWxlKGMtLSlmPXlhKGJbY10pLGZbdV0/ZC5wdXNoKGYpOmUucHVzaChmKTtmPUEoYSx6YShlLGQpKSxmLnNlbGVjdG9yPWF9cmV0dXJuIGZ9LGk9Z2Euc2VsZWN0PWZ1bmN0aW9uKGEsYixjLGUpe3ZhciBmLGksaixrLGwsbT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBhJiZhLG49IWUmJmcoYT1tLnNlbGVjdG9yfHxhKTtpZihjPWN8fFtdLDE9PT1uLmxlbmd0aCl7aWYoaT1uWzBdPW5bMF0uc2xpY2UoMCksaS5sZW5ndGg+MiYmXCJJRFwiPT09KGo9aVswXSkudHlwZSYmOT09PWIubm9kZVR5cGUmJnAmJmQucmVsYXRpdmVbaVsxXS50eXBlXSl7aWYoYj0oZC5maW5kLklEKGoubWF0Y2hlc1swXS5yZXBsYWNlKF8sYWEpLGIpfHxbXSlbMF0sIWIpcmV0dXJuIGM7bSYmKGI9Yi5wYXJlbnROb2RlKSxhPWEuc2xpY2UoaS5zaGlmdCgpLnZhbHVlLmxlbmd0aCl9Zj1WLm5lZWRzQ29udGV4dC50ZXN0KGEpPzA6aS5sZW5ndGg7d2hpbGUoZi0tKXtpZihqPWlbZl0sZC5yZWxhdGl2ZVtrPWoudHlwZV0pYnJlYWs7aWYoKGw9ZC5maW5kW2tdKSYmKGU9bChqLm1hdGNoZXNbMF0ucmVwbGFjZShfLGFhKSwkLnRlc3QoaVswXS50eXBlKSYmcWEoYi5wYXJlbnROb2RlKXx8YikpKXtpZihpLnNwbGljZShmLDEpLGE9ZS5sZW5ndGgmJnNhKGkpLCFhKXJldHVybiBHLmFwcGx5KGMsZSksYzticmVha319fXJldHVybihtfHxoKGEsbikpKGUsYiwhcCxjLCFifHwkLnRlc3QoYSkmJnFhKGIucGFyZW50Tm9kZSl8fGIpLGN9LGMuc29ydFN0YWJsZT11LnNwbGl0KFwiXCIpLnNvcnQoQikuam9pbihcIlwiKT09PXUsYy5kZXRlY3REdXBsaWNhdGVzPSEhbCxtKCksYy5zb3J0RGV0YWNoZWQ9amEoZnVuY3Rpb24oYSl7cmV0dXJuIDEmYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSl9KSxqYShmdW5jdGlvbihhKXtyZXR1cm4gYS5pbm5lckhUTUw9XCI8YSBocmVmPScjJz48L2E+XCIsXCIjXCI9PT1hLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKX0pfHxrYShcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIixmdW5jdGlvbihhLGIsYyl7aWYoIWMpcmV0dXJuIGEuZ2V0QXR0cmlidXRlKGIsXCJ0eXBlXCI9PT1iLnRvTG93ZXJDYXNlKCk/MToyKX0pLGMuYXR0cmlidXRlcyYmamEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuaW5uZXJIVE1MPVwiPGlucHV0Lz5cIixhLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiKSxcIlwiPT09YS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpfSl8fGthKFwidmFsdWVcIixmdW5jdGlvbihhLGIsYyl7aWYoIWMmJlwiaW5wdXRcIj09PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSlyZXR1cm4gYS5kZWZhdWx0VmFsdWV9KSxqYShmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YS5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKX0pfHxrYShKLGZ1bmN0aW9uKGEsYixjKXt2YXIgZDtpZighYylyZXR1cm4gYVtiXT09PSEwP2IudG9Mb3dlckNhc2UoKTooZD1hLmdldEF0dHJpYnV0ZU5vZGUoYikpJiZkLnNwZWNpZmllZD9kLnZhbHVlOm51bGx9KSxnYX0oYSk7ci5maW5kPXgsci5leHByPXguc2VsZWN0b3JzLHIuZXhwcltcIjpcIl09ci5leHByLnBzZXVkb3Msci51bmlxdWVTb3J0PXIudW5pcXVlPXgudW5pcXVlU29ydCxyLnRleHQ9eC5nZXRUZXh0LHIuaXNYTUxEb2M9eC5pc1hNTCxyLmNvbnRhaW5zPXguY29udGFpbnMsci5lc2NhcGVTZWxlY3Rvcj14LmVzY2FwZTt2YXIgeT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9W10sZT12b2lkIDAhPT1jO3doaWxlKChhPWFbYl0pJiY5IT09YS5ub2RlVHlwZSlpZigxPT09YS5ub2RlVHlwZSl7aWYoZSYmcihhKS5pcyhjKSlicmVhaztkLnB1c2goYSl9cmV0dXJuIGR9LHo9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9W107YTthPWEubmV4dFNpYmxpbmcpMT09PWEubm9kZVR5cGUmJmEhPT1iJiZjLnB1c2goYSk7cmV0dXJuIGN9LEE9ci5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtmdW5jdGlvbiBCKGEsYil7cmV0dXJuIGEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PWIudG9Mb3dlckNhc2UoKX12YXIgQz0vXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSxEPS9eLlteOiNcXFtcXC4sXSokLztmdW5jdGlvbiBFKGEsYixjKXtyZXR1cm4gci5pc0Z1bmN0aW9uKGIpP3IuZ3JlcChhLGZ1bmN0aW9uKGEsZCl7cmV0dXJuISFiLmNhbGwoYSxkLGEpIT09Y30pOmIubm9kZVR5cGU/ci5ncmVwKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1iIT09Y30pOlwic3RyaW5nXCIhPXR5cGVvZiBiP3IuZ3JlcChhLGZ1bmN0aW9uKGEpe3JldHVybiBpLmNhbGwoYixhKT4tMSE9PWN9KTpELnRlc3QoYik/ci5maWx0ZXIoYixhLGMpOihiPXIuZmlsdGVyKGIsYSksci5ncmVwKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGkuY2FsbChiLGEpPi0xIT09YyYmMT09PWEubm9kZVR5cGV9KSl9ci5maWx0ZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWJbMF07cmV0dXJuIGMmJihhPVwiOm5vdChcIithK1wiKVwiKSwxPT09Yi5sZW5ndGgmJjE9PT1kLm5vZGVUeXBlP3IuZmluZC5tYXRjaGVzU2VsZWN0b3IoZCxhKT9bZF06W106ci5maW5kLm1hdGNoZXMoYSxyLmdyZXAoYixmdW5jdGlvbihhKXtyZXR1cm4gMT09PWEubm9kZVR5cGV9KSl9LHIuZm4uZXh0ZW5kKHtmaW5kOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZD10aGlzLmxlbmd0aCxlPXRoaXM7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGEpcmV0dXJuIHRoaXMucHVzaFN0YWNrKHIoYSkuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKGI9MDtiPGQ7YisrKWlmKHIuY29udGFpbnMoZVtiXSx0aGlzKSlyZXR1cm4hMH0pKTtmb3IoYz10aGlzLnB1c2hTdGFjayhbXSksYj0wO2I8ZDtiKyspci5maW5kKGEsZVtiXSxjKTtyZXR1cm4gZD4xP3IudW5pcXVlU29ydChjKTpjfSxmaWx0ZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKEUodGhpcyxhfHxbXSwhMSkpfSxub3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKEUodGhpcyxhfHxbXSwhMCkpfSxpczpmdW5jdGlvbihhKXtyZXR1cm4hIUUodGhpcyxcInN0cmluZ1wiPT10eXBlb2YgYSYmQS50ZXN0KGEpP3IoYSk6YXx8W10sITEpLmxlbmd0aH19KTt2YXIgRixHPS9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLEg9ci5mbi5pbml0PWZ1bmN0aW9uKGEsYixjKXt2YXIgZSxmO2lmKCFhKXJldHVybiB0aGlzO2lmKGM9Y3x8RixcInN0cmluZ1wiPT10eXBlb2YgYSl7aWYoZT1cIjxcIj09PWFbMF0mJlwiPlwiPT09YVthLmxlbmd0aC0xXSYmYS5sZW5ndGg+PTM/W251bGwsYSxudWxsXTpHLmV4ZWMoYSksIWV8fCFlWzFdJiZiKXJldHVybiFifHxiLmpxdWVyeT8oYnx8YykuZmluZChhKTp0aGlzLmNvbnN0cnVjdG9yKGIpLmZpbmQoYSk7aWYoZVsxXSl7aWYoYj1iIGluc3RhbmNlb2Ygcj9iWzBdOmIsci5tZXJnZSh0aGlzLHIucGFyc2VIVE1MKGVbMV0sYiYmYi5ub2RlVHlwZT9iLm93bmVyRG9jdW1lbnR8fGI6ZCwhMCkpLEMudGVzdChlWzFdKSYmci5pc1BsYWluT2JqZWN0KGIpKWZvcihlIGluIGIpci5pc0Z1bmN0aW9uKHRoaXNbZV0pP3RoaXNbZV0oYltlXSk6dGhpcy5hdHRyKGUsYltlXSk7cmV0dXJuIHRoaXN9cmV0dXJuIGY9ZC5nZXRFbGVtZW50QnlJZChlWzJdKSxmJiYodGhpc1swXT1mLHRoaXMubGVuZ3RoPTEpLHRoaXN9cmV0dXJuIGEubm9kZVR5cGU/KHRoaXNbMF09YSx0aGlzLmxlbmd0aD0xLHRoaXMpOnIuaXNGdW5jdGlvbihhKT92b2lkIDAhPT1jLnJlYWR5P2MucmVhZHkoYSk6YShyKTpyLm1ha2VBcnJheShhLHRoaXMpfTtILnByb3RvdHlwZT1yLmZuLEY9cihkKTt2YXIgST0vXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxKPXtjaGlsZHJlbjohMCxjb250ZW50czohMCxuZXh0OiEwLHByZXY6ITB9O3IuZm4uZXh0ZW5kKHtoYXM6ZnVuY3Rpb24oYSl7dmFyIGI9cihhLHRoaXMpLGM9Yi5sZW5ndGg7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHZhciBhPTA7YTxjO2ErKylpZihyLmNvbnRhaW5zKHRoaXMsYlthXSkpcmV0dXJuITB9KX0sY2xvc2VzdDpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9MCxlPXRoaXMubGVuZ3RoLGY9W10sZz1cInN0cmluZ1wiIT10eXBlb2YgYSYmcihhKTtpZighQS50ZXN0KGEpKWZvcig7ZDxlO2QrKylmb3IoYz10aGlzW2RdO2MmJmMhPT1iO2M9Yy5wYXJlbnROb2RlKWlmKGMubm9kZVR5cGU8MTEmJihnP2cuaW5kZXgoYyk+LTE6MT09PWMubm9kZVR5cGUmJnIuZmluZC5tYXRjaGVzU2VsZWN0b3IoYyxhKSkpe2YucHVzaChjKTticmVha31yZXR1cm4gdGhpcy5wdXNoU3RhY2soZi5sZW5ndGg+MT9yLnVuaXF1ZVNvcnQoZik6Zil9LGluZGV4OmZ1bmN0aW9uKGEpe3JldHVybiBhP1wic3RyaW5nXCI9PXR5cGVvZiBhP2kuY2FsbChyKGEpLHRoaXNbMF0pOmkuY2FsbCh0aGlzLGEuanF1ZXJ5P2FbMF06YSk6dGhpc1swXSYmdGhpc1swXS5wYXJlbnROb2RlP3RoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoOi0xfSxhZGQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soci51bmlxdWVTb3J0KHIubWVyZ2UodGhpcy5nZXQoKSxyKGEsYikpKSl9LGFkZEJhY2s6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYWRkKG51bGw9PWE/dGhpcy5wcmV2T2JqZWN0OnRoaXMucHJldk9iamVjdC5maWx0ZXIoYSkpfX0pO2Z1bmN0aW9uIEsoYSxiKXt3aGlsZSgoYT1hW2JdKSYmMSE9PWEubm9kZVR5cGUpO3JldHVybiBhfXIuZWFjaCh7cGFyZW50OmZ1bmN0aW9uKGEpe3ZhciBiPWEucGFyZW50Tm9kZTtyZXR1cm4gYiYmMTEhPT1iLm5vZGVUeXBlP2I6bnVsbH0scGFyZW50czpmdW5jdGlvbihhKXtyZXR1cm4geShhLFwicGFyZW50Tm9kZVwiKX0scGFyZW50c1VudGlsOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4geShhLFwicGFyZW50Tm9kZVwiLGMpfSxuZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBLKGEsXCJuZXh0U2libGluZ1wiKX0scHJldjpmdW5jdGlvbihhKXtyZXR1cm4gSyhhLFwicHJldmlvdXNTaWJsaW5nXCIpfSxuZXh0QWxsOmZ1bmN0aW9uKGEpe3JldHVybiB5KGEsXCJuZXh0U2libGluZ1wiKX0scHJldkFsbDpmdW5jdGlvbihhKXtyZXR1cm4geShhLFwicHJldmlvdXNTaWJsaW5nXCIpfSxuZXh0VW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB5KGEsXCJuZXh0U2libGluZ1wiLGMpfSxwcmV2VW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB5KGEsXCJwcmV2aW91c1NpYmxpbmdcIixjKX0sc2libGluZ3M6ZnVuY3Rpb24oYSl7cmV0dXJuIHooKGEucGFyZW50Tm9kZXx8e30pLmZpcnN0Q2hpbGQsYSl9LGNoaWxkcmVuOmZ1bmN0aW9uKGEpe3JldHVybiB6KGEuZmlyc3RDaGlsZCl9LGNvbnRlbnRzOmZ1bmN0aW9uKGEpe3JldHVybiBCKGEsXCJpZnJhbWVcIik/YS5jb250ZW50RG9jdW1lbnQ6KEIoYSxcInRlbXBsYXRlXCIpJiYoYT1hLmNvbnRlbnR8fGEpLHIubWVyZ2UoW10sYS5jaGlsZE5vZGVzKSl9fSxmdW5jdGlvbihhLGIpe3IuZm5bYV09ZnVuY3Rpb24oYyxkKXt2YXIgZT1yLm1hcCh0aGlzLGIsYyk7cmV0dXJuXCJVbnRpbFwiIT09YS5zbGljZSgtNSkmJihkPWMpLGQmJlwic3RyaW5nXCI9PXR5cGVvZiBkJiYoZT1yLmZpbHRlcihkLGUpKSx0aGlzLmxlbmd0aD4xJiYoSlthXXx8ci51bmlxdWVTb3J0KGUpLEkudGVzdChhKSYmZS5yZXZlcnNlKCkpLHRoaXMucHVzaFN0YWNrKGUpfX0pO3ZhciBMPS9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZztmdW5jdGlvbiBNKGEpe3ZhciBiPXt9O3JldHVybiByLmVhY2goYS5tYXRjaChMKXx8W10sZnVuY3Rpb24oYSxjKXtiW2NdPSEwfSksYn1yLkNhbGxiYWNrcz1mdW5jdGlvbihhKXthPVwic3RyaW5nXCI9PXR5cGVvZiBhP00oYSk6ci5leHRlbmQoe30sYSk7dmFyIGIsYyxkLGUsZj1bXSxnPVtdLGg9LTEsaT1mdW5jdGlvbigpe2ZvcihlPWV8fGEub25jZSxkPWI9ITA7Zy5sZW5ndGg7aD0tMSl7Yz1nLnNoaWZ0KCk7d2hpbGUoKytoPGYubGVuZ3RoKWZbaF0uYXBwbHkoY1swXSxjWzFdKT09PSExJiZhLnN0b3BPbkZhbHNlJiYoaD1mLmxlbmd0aCxjPSExKX1hLm1lbW9yeXx8KGM9ITEpLGI9ITEsZSYmKGY9Yz9bXTpcIlwiKX0saj17YWRkOmZ1bmN0aW9uKCl7cmV0dXJuIGYmJihjJiYhYiYmKGg9Zi5sZW5ndGgtMSxnLnB1c2goYykpLGZ1bmN0aW9uIGQoYil7ci5lYWNoKGIsZnVuY3Rpb24oYixjKXtyLmlzRnVuY3Rpb24oYyk/YS51bmlxdWUmJmouaGFzKGMpfHxmLnB1c2goYyk6YyYmYy5sZW5ndGgmJlwic3RyaW5nXCIhPT1yLnR5cGUoYykmJmQoYyl9KX0oYXJndW1lbnRzKSxjJiYhYiYmaSgpKSx0aGlzfSxyZW1vdmU6ZnVuY3Rpb24oKXtyZXR1cm4gci5lYWNoKGFyZ3VtZW50cyxmdW5jdGlvbihhLGIpe3ZhciBjO3doaWxlKChjPXIuaW5BcnJheShiLGYsYykpPi0xKWYuc3BsaWNlKGMsMSksYzw9aCYmaC0tfSksdGhpc30saGFzOmZ1bmN0aW9uKGEpe3JldHVybiBhP3IuaW5BcnJheShhLGYpPi0xOmYubGVuZ3RoPjB9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIGYmJihmPVtdKSx0aGlzfSxkaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGU9Zz1bXSxmPWM9XCJcIix0aGlzfSxkaXNhYmxlZDpmdW5jdGlvbigpe3JldHVybiFmfSxsb2NrOmZ1bmN0aW9uKCl7cmV0dXJuIGU9Zz1bXSxjfHxifHwoZj1jPVwiXCIpLHRoaXN9LGxvY2tlZDpmdW5jdGlvbigpe3JldHVybiEhZX0sZmlyZVdpdGg6ZnVuY3Rpb24oYSxjKXtyZXR1cm4gZXx8KGM9Y3x8W10sYz1bYSxjLnNsaWNlP2Muc2xpY2UoKTpjXSxnLnB1c2goYyksYnx8aSgpKSx0aGlzfSxmaXJlOmZ1bmN0aW9uKCl7cmV0dXJuIGouZmlyZVdpdGgodGhpcyxhcmd1bWVudHMpLHRoaXN9LGZpcmVkOmZ1bmN0aW9uKCl7cmV0dXJuISFkfX07cmV0dXJuIGp9O2Z1bmN0aW9uIE4oYSl7cmV0dXJuIGF9ZnVuY3Rpb24gTyhhKXt0aHJvdyBhfWZ1bmN0aW9uIFAoYSxiLGMsZCl7dmFyIGU7dHJ5e2EmJnIuaXNGdW5jdGlvbihlPWEucHJvbWlzZSk/ZS5jYWxsKGEpLmRvbmUoYikuZmFpbChjKTphJiZyLmlzRnVuY3Rpb24oZT1hLnRoZW4pP2UuY2FsbChhLGIsYyk6Yi5hcHBseSh2b2lkIDAsW2FdLnNsaWNlKGQpKX1jYXRjaChhKXtjLmFwcGx5KHZvaWQgMCxbYV0pfX1yLmV4dGVuZCh7RGVmZXJyZWQ6ZnVuY3Rpb24oYil7dmFyIGM9W1tcIm5vdGlmeVwiLFwicHJvZ3Jlc3NcIixyLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSxyLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwyXSxbXCJyZXNvbHZlXCIsXCJkb25lXCIsci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxyLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLDAsXCJyZXNvbHZlZFwiXSxbXCJyZWplY3RcIixcImZhaWxcIixyLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLHIuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksMSxcInJlamVjdGVkXCJdXSxkPVwicGVuZGluZ1wiLGU9e3N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LGFsd2F5czpmdW5jdGlvbigpe3JldHVybiBmLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksdGhpc30sXCJjYXRjaFwiOmZ1bmN0aW9uKGEpe3JldHVybiBlLnRoZW4obnVsbCxhKX0scGlwZTpmdW5jdGlvbigpe3ZhciBhPWFyZ3VtZW50cztyZXR1cm4gci5EZWZlcnJlZChmdW5jdGlvbihiKXtyLmVhY2goYyxmdW5jdGlvbihjLGQpe3ZhciBlPXIuaXNGdW5jdGlvbihhW2RbNF1dKSYmYVtkWzRdXTtmW2RbMV1dKGZ1bmN0aW9uKCl7dmFyIGE9ZSYmZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7YSYmci5pc0Z1bmN0aW9uKGEucHJvbWlzZSk/YS5wcm9taXNlKCkucHJvZ3Jlc3MoYi5ub3RpZnkpLmRvbmUoYi5yZXNvbHZlKS5mYWlsKGIucmVqZWN0KTpiW2RbMF0rXCJXaXRoXCJdKHRoaXMsZT9bYV06YXJndW1lbnRzKX0pfSksYT1udWxsfSkucHJvbWlzZSgpfSx0aGVuOmZ1bmN0aW9uKGIsZCxlKXt2YXIgZj0wO2Z1bmN0aW9uIGcoYixjLGQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGg9dGhpcyxpPWFyZ3VtZW50cyxqPWZ1bmN0aW9uKCl7dmFyIGEsajtpZighKGI8Zikpe2lmKGE9ZC5hcHBseShoLGkpLGE9PT1jLnByb21pc2UoKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIpO2o9YSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBhKSYmYS50aGVuLHIuaXNGdW5jdGlvbihqKT9lP2ouY2FsbChhLGcoZixjLE4sZSksZyhmLGMsTyxlKSk6KGYrKyxqLmNhbGwoYSxnKGYsYyxOLGUpLGcoZixjLE8sZSksZyhmLGMsTixjLm5vdGlmeVdpdGgpKSk6KGQhPT1OJiYoaD12b2lkIDAsaT1bYV0pLChlfHxjLnJlc29sdmVXaXRoKShoLGkpKX19LGs9ZT9qOmZ1bmN0aW9uKCl7dHJ5e2ooKX1jYXRjaChhKXtyLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2smJnIuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhhLGsuc3RhY2tUcmFjZSksYisxPj1mJiYoZCE9PU8mJihoPXZvaWQgMCxpPVthXSksYy5yZWplY3RXaXRoKGgsaSkpfX07Yj9rKCk6KHIuRGVmZXJyZWQuZ2V0U3RhY2tIb29rJiYoay5zdGFja1RyYWNlPXIuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCkpLGEuc2V0VGltZW91dChrKSl9fXJldHVybiByLkRlZmVycmVkKGZ1bmN0aW9uKGEpe2NbMF1bM10uYWRkKGcoMCxhLHIuaXNGdW5jdGlvbihlKT9lOk4sYS5ub3RpZnlXaXRoKSksY1sxXVszXS5hZGQoZygwLGEsci5pc0Z1bmN0aW9uKGIpP2I6TikpLGNbMl1bM10uYWRkKGcoMCxhLHIuaXNGdW5jdGlvbihkKT9kOk8pKX0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YT9yLmV4dGVuZChhLGUpOmV9fSxmPXt9O3JldHVybiByLmVhY2goYyxmdW5jdGlvbihhLGIpe3ZhciBnPWJbMl0saD1iWzVdO2VbYlsxXV09Zy5hZGQsaCYmZy5hZGQoZnVuY3Rpb24oKXtkPWh9LGNbMy1hXVsyXS5kaXNhYmxlLGNbMF1bMl0ubG9jayksZy5hZGQoYlszXS5maXJlKSxmW2JbMF1dPWZ1bmN0aW9uKCl7cmV0dXJuIGZbYlswXStcIldpdGhcIl0odGhpcz09PWY/dm9pZCAwOnRoaXMsYXJndW1lbnRzKSx0aGlzfSxmW2JbMF0rXCJXaXRoXCJdPWcuZmlyZVdpdGh9KSxlLnByb21pc2UoZiksYiYmYi5jYWxsKGYsZiksZn0sd2hlbjpmdW5jdGlvbihhKXt2YXIgYj1hcmd1bWVudHMubGVuZ3RoLGM9YixkPUFycmF5KGMpLGU9Zi5jYWxsKGFyZ3VtZW50cyksZz1yLkRlZmVycmVkKCksaD1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYyl7ZFthXT10aGlzLGVbYV09YXJndW1lbnRzLmxlbmd0aD4xP2YuY2FsbChhcmd1bWVudHMpOmMsLS1ifHxnLnJlc29sdmVXaXRoKGQsZSl9fTtpZihiPD0xJiYoUChhLGcuZG9uZShoKGMpKS5yZXNvbHZlLGcucmVqZWN0LCFiKSxcInBlbmRpbmdcIj09PWcuc3RhdGUoKXx8ci5pc0Z1bmN0aW9uKGVbY10mJmVbY10udGhlbikpKXJldHVybiBnLnRoZW4oKTt3aGlsZShjLS0pUChlW2NdLGgoYyksZy5yZWplY3QpO3JldHVybiBnLnByb21pc2UoKX19KTt2YXIgUT0vXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztyLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2s9ZnVuY3Rpb24oYixjKXthLmNvbnNvbGUmJmEuY29uc29sZS53YXJuJiZiJiZRLnRlc3QoYi5uYW1lKSYmYS5jb25zb2xlLndhcm4oXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIitiLm1lc3NhZ2UsYi5zdGFjayxjKX0sci5yZWFkeUV4Y2VwdGlvbj1mdW5jdGlvbihiKXthLnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBifSl9O3ZhciBSPXIuRGVmZXJyZWQoKTtyLmZuLnJlYWR5PWZ1bmN0aW9uKGEpe3JldHVybiBSLnRoZW4oYSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtyLnJlYWR5RXhjZXB0aW9uKGEpfSksdGhpc30sci5leHRlbmQoe2lzUmVhZHk6ITEscmVhZHlXYWl0OjEscmVhZHk6ZnVuY3Rpb24oYSl7KGE9PT0hMD8tLXIucmVhZHlXYWl0OnIuaXNSZWFkeSl8fChyLmlzUmVhZHk9ITAsYSE9PSEwJiYtLXIucmVhZHlXYWl0PjB8fFIucmVzb2x2ZVdpdGgoZCxbcl0pKX19KSxyLnJlYWR5LnRoZW49Ui50aGVuO2Z1bmN0aW9uIFMoKXtkLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsUyksXG5hLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsUyksci5yZWFkeSgpfVwiY29tcGxldGVcIj09PWQucmVhZHlTdGF0ZXx8XCJsb2FkaW5nXCIhPT1kLnJlYWR5U3RhdGUmJiFkLmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbD9hLnNldFRpbWVvdXQoci5yZWFkeSk6KGQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixTKSxhLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsUykpO3ZhciBUPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe3ZhciBoPTAsaT1hLmxlbmd0aCxqPW51bGw9PWM7aWYoXCJvYmplY3RcIj09PXIudHlwZShjKSl7ZT0hMDtmb3IoaCBpbiBjKVQoYSxiLGgsY1toXSwhMCxmLGcpfWVsc2UgaWYodm9pZCAwIT09ZCYmKGU9ITAsci5pc0Z1bmN0aW9uKGQpfHwoZz0hMCksaiYmKGc/KGIuY2FsbChhLGQpLGI9bnVsbCk6KGo9YixiPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gai5jYWxsKHIoYSksYyl9KSksYikpZm9yKDtoPGk7aCsrKWIoYVtoXSxjLGc/ZDpkLmNhbGwoYVtoXSxoLGIoYVtoXSxjKSkpO3JldHVybiBlP2E6aj9iLmNhbGwoYSk6aT9iKGFbMF0sYyk6Zn0sVT1mdW5jdGlvbihhKXtyZXR1cm4gMT09PWEubm9kZVR5cGV8fDk9PT1hLm5vZGVUeXBlfHwhK2Eubm9kZVR5cGV9O2Z1bmN0aW9uIFYoKXt0aGlzLmV4cGFuZG89ci5leHBhbmRvK1YudWlkKyt9Vi51aWQ9MSxWLnByb3RvdHlwZT17Y2FjaGU6ZnVuY3Rpb24oYSl7dmFyIGI9YVt0aGlzLmV4cGFuZG9dO3JldHVybiBifHwoYj17fSxVKGEpJiYoYS5ub2RlVHlwZT9hW3RoaXMuZXhwYW5kb109YjpPYmplY3QuZGVmaW5lUHJvcGVydHkoYSx0aGlzLmV4cGFuZG8se3ZhbHVlOmIsY29uZmlndXJhYmxlOiEwfSkpKSxifSxzZXQ6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGU9dGhpcy5jYWNoZShhKTtpZihcInN0cmluZ1wiPT10eXBlb2YgYillW3IuY2FtZWxDYXNlKGIpXT1jO2Vsc2UgZm9yKGQgaW4gYillW3IuY2FtZWxDYXNlKGQpXT1iW2RdO3JldHVybiBlfSxnZXQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdm9pZCAwPT09Yj90aGlzLmNhY2hlKGEpOmFbdGhpcy5leHBhbmRvXSYmYVt0aGlzLmV4cGFuZG9dW3IuY2FtZWxDYXNlKGIpXX0sYWNjZXNzOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdm9pZCAwPT09Ynx8YiYmXCJzdHJpbmdcIj09dHlwZW9mIGImJnZvaWQgMD09PWM/dGhpcy5nZXQoYSxiKToodGhpcy5zZXQoYSxiLGMpLHZvaWQgMCE9PWM/YzpiKX0scmVtb3ZlOmZ1bmN0aW9uKGEsYil7dmFyIGMsZD1hW3RoaXMuZXhwYW5kb107aWYodm9pZCAwIT09ZCl7aWYodm9pZCAwIT09Yil7QXJyYXkuaXNBcnJheShiKT9iPWIubWFwKHIuY2FtZWxDYXNlKTooYj1yLmNhbWVsQ2FzZShiKSxiPWIgaW4gZD9bYl06Yi5tYXRjaChMKXx8W10pLGM9Yi5sZW5ndGg7d2hpbGUoYy0tKWRlbGV0ZSBkW2JbY11dfSh2b2lkIDA9PT1ifHxyLmlzRW1wdHlPYmplY3QoZCkpJiYoYS5ub2RlVHlwZT9hW3RoaXMuZXhwYW5kb109dm9pZCAwOmRlbGV0ZSBhW3RoaXMuZXhwYW5kb10pfX0saGFzRGF0YTpmdW5jdGlvbihhKXt2YXIgYj1hW3RoaXMuZXhwYW5kb107cmV0dXJuIHZvaWQgMCE9PWImJiFyLmlzRW1wdHlPYmplY3QoYil9fTt2YXIgVz1uZXcgVixYPW5ldyBWLFk9L14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFo9L1tBLVpdL2c7ZnVuY3Rpb24gJChhKXtyZXR1cm5cInRydWVcIj09PWF8fFwiZmFsc2VcIiE9PWEmJihcIm51bGxcIj09PWE/bnVsbDphPT09K2ErXCJcIj8rYTpZLnRlc3QoYSk/SlNPTi5wYXJzZShhKTphKX1mdW5jdGlvbiBfKGEsYixjKXt2YXIgZDtpZih2b2lkIDA9PT1jJiYxPT09YS5ub2RlVHlwZSlpZihkPVwiZGF0YS1cIitiLnJlcGxhY2UoWixcIi0kJlwiKS50b0xvd2VyQ2FzZSgpLGM9YS5nZXRBdHRyaWJ1dGUoZCksXCJzdHJpbmdcIj09dHlwZW9mIGMpe3RyeXtjPSQoYyl9Y2F0Y2goZSl7fVguc2V0KGEsYixjKX1lbHNlIGM9dm9pZCAwO3JldHVybiBjfXIuZXh0ZW5kKHtoYXNEYXRhOmZ1bmN0aW9uKGEpe3JldHVybiBYLmhhc0RhdGEoYSl8fFcuaGFzRGF0YShhKX0sZGF0YTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFguYWNjZXNzKGEsYixjKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihhLGIpe1gucmVtb3ZlKGEsYil9LF9kYXRhOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gVy5hY2Nlc3MoYSxiLGMpfSxfcmVtb3ZlRGF0YTpmdW5jdGlvbihhLGIpe1cucmVtb3ZlKGEsYil9fSksci5mbi5leHRlbmQoe2RhdGE6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZj10aGlzWzBdLGc9ZiYmZi5hdHRyaWJ1dGVzO2lmKHZvaWQgMD09PWEpe2lmKHRoaXMubGVuZ3RoJiYoZT1YLmdldChmKSwxPT09Zi5ub2RlVHlwZSYmIVcuZ2V0KGYsXCJoYXNEYXRhQXR0cnNcIikpKXtjPWcubGVuZ3RoO3doaWxlKGMtLSlnW2NdJiYoZD1nW2NdLm5hbWUsMD09PWQuaW5kZXhPZihcImRhdGEtXCIpJiYoZD1yLmNhbWVsQ2FzZShkLnNsaWNlKDUpKSxfKGYsZCxlW2RdKSkpO1cuc2V0KGYsXCJoYXNEYXRhQXR0cnNcIiwhMCl9cmV0dXJuIGV9cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGE/dGhpcy5lYWNoKGZ1bmN0aW9uKCl7WC5zZXQodGhpcyxhKX0pOlQodGhpcyxmdW5jdGlvbihiKXt2YXIgYztpZihmJiZ2b2lkIDA9PT1iKXtpZihjPVguZ2V0KGYsYSksdm9pZCAwIT09YylyZXR1cm4gYztpZihjPV8oZixhKSx2b2lkIDAhPT1jKXJldHVybiBjfWVsc2UgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7WC5zZXQodGhpcyxhLGIpfSl9LG51bGwsYixhcmd1bWVudHMubGVuZ3RoPjEsbnVsbCwhMCl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1gucmVtb3ZlKHRoaXMsYSl9KX19KSxyLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkO2lmKGEpcmV0dXJuIGI9KGJ8fFwiZnhcIikrXCJxdWV1ZVwiLGQ9Vy5nZXQoYSxiKSxjJiYoIWR8fEFycmF5LmlzQXJyYXkoYyk/ZD1XLmFjY2VzcyhhLGIsci5tYWtlQXJyYXkoYykpOmQucHVzaChjKSksZHx8W119LGRlcXVldWU6ZnVuY3Rpb24oYSxiKXtiPWJ8fFwiZnhcIjt2YXIgYz1yLnF1ZXVlKGEsYiksZD1jLmxlbmd0aCxlPWMuc2hpZnQoKSxmPXIuX3F1ZXVlSG9va3MoYSxiKSxnPWZ1bmN0aW9uKCl7ci5kZXF1ZXVlKGEsYil9O1wiaW5wcm9ncmVzc1wiPT09ZSYmKGU9Yy5zaGlmdCgpLGQtLSksZSYmKFwiZnhcIj09PWImJmMudW5zaGlmdChcImlucHJvZ3Jlc3NcIiksZGVsZXRlIGYuc3RvcCxlLmNhbGwoYSxnLGYpKSwhZCYmZiYmZi5lbXB0eS5maXJlKCl9LF9xdWV1ZUhvb2tzOmZ1bmN0aW9uKGEsYil7dmFyIGM9YitcInF1ZXVlSG9va3NcIjtyZXR1cm4gVy5nZXQoYSxjKXx8Vy5hY2Nlc3MoYSxjLHtlbXB0eTpyLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLmFkZChmdW5jdGlvbigpe1cucmVtb3ZlKGEsW2IrXCJxdWV1ZVwiLGNdKX0pfSl9fSksci5mbi5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9MjtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgYSYmKGI9YSxhPVwiZnhcIixjLS0pLGFyZ3VtZW50cy5sZW5ndGg8Yz9yLnF1ZXVlKHRoaXNbMF0sYSk6dm9pZCAwPT09Yj90aGlzOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBjPXIucXVldWUodGhpcyxhLGIpO3IuX3F1ZXVlSG9va3ModGhpcyxhKSxcImZ4XCI9PT1hJiZcImlucHJvZ3Jlc3NcIiE9PWNbMF0mJnIuZGVxdWV1ZSh0aGlzLGEpfSl9LGRlcXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3IuZGVxdWV1ZSh0aGlzLGEpfSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucXVldWUoYXx8XCJmeFwiLFtdKX0scHJvbWlzZTpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9MSxlPXIuRGVmZXJyZWQoKSxmPXRoaXMsZz10aGlzLmxlbmd0aCxoPWZ1bmN0aW9uKCl7LS1kfHxlLnJlc29sdmVXaXRoKGYsW2ZdKX07XCJzdHJpbmdcIiE9dHlwZW9mIGEmJihiPWEsYT12b2lkIDApLGE9YXx8XCJmeFwiO3doaWxlKGctLSljPVcuZ2V0KGZbZ10sYStcInF1ZXVlSG9va3NcIiksYyYmYy5lbXB0eSYmKGQrKyxjLmVtcHR5LmFkZChoKSk7cmV0dXJuIGgoKSxlLnByb21pc2UoYil9fSk7dmFyIGFhPS9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvLnNvdXJjZSxiYT1uZXcgUmVnRXhwKFwiXig/OihbKy1dKT18KShcIithYStcIikoW2EteiVdKikkXCIsXCJpXCIpLGNhPVtcIlRvcFwiLFwiUmlnaHRcIixcIkJvdHRvbVwiLFwiTGVmdFwiXSxkYT1mdW5jdGlvbihhLGIpe3JldHVybiBhPWJ8fGEsXCJub25lXCI9PT1hLnN0eWxlLmRpc3BsYXl8fFwiXCI9PT1hLnN0eWxlLmRpc3BsYXkmJnIuY29udGFpbnMoYS5vd25lckRvY3VtZW50LGEpJiZcIm5vbmVcIj09PXIuY3NzKGEsXCJkaXNwbGF5XCIpfSxlYT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZSxmLGc9e307Zm9yKGYgaW4gYilnW2ZdPWEuc3R5bGVbZl0sYS5zdHlsZVtmXT1iW2ZdO2U9Yy5hcHBseShhLGR8fFtdKTtmb3IoZiBpbiBiKWEuc3R5bGVbZl09Z1tmXTtyZXR1cm4gZX07ZnVuY3Rpb24gZmEoYSxiLGMsZCl7dmFyIGUsZj0xLGc9MjAsaD1kP2Z1bmN0aW9uKCl7cmV0dXJuIGQuY3VyKCl9OmZ1bmN0aW9uKCl7cmV0dXJuIHIuY3NzKGEsYixcIlwiKX0saT1oKCksaj1jJiZjWzNdfHwoci5jc3NOdW1iZXJbYl0/XCJcIjpcInB4XCIpLGs9KHIuY3NzTnVtYmVyW2JdfHxcInB4XCIhPT1qJiYraSkmJmJhLmV4ZWMoci5jc3MoYSxiKSk7aWYoayYma1szXSE9PWope2o9anx8a1szXSxjPWN8fFtdLGs9K2l8fDE7ZG8gZj1mfHxcIi41XCIsay89ZixyLnN0eWxlKGEsYixrK2opO3doaWxlKGYhPT0oZj1oKCkvaSkmJjEhPT1mJiYtLWcpfXJldHVybiBjJiYoaz0ra3x8K2l8fDAsZT1jWzFdP2srKGNbMV0rMSkqY1syXTorY1syXSxkJiYoZC51bml0PWosZC5zdGFydD1rLGQuZW5kPWUpKSxlfXZhciBnYT17fTtmdW5jdGlvbiBoYShhKXt2YXIgYixjPWEub3duZXJEb2N1bWVudCxkPWEubm9kZU5hbWUsZT1nYVtkXTtyZXR1cm4gZT9lOihiPWMuYm9keS5hcHBlbmRDaGlsZChjLmNyZWF0ZUVsZW1lbnQoZCkpLGU9ci5jc3MoYixcImRpc3BsYXlcIiksYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpLFwibm9uZVwiPT09ZSYmKGU9XCJibG9ja1wiKSxnYVtkXT1lLGUpfWZ1bmN0aW9uIGlhKGEsYil7Zm9yKHZhciBjLGQsZT1bXSxmPTAsZz1hLmxlbmd0aDtmPGc7ZisrKWQ9YVtmXSxkLnN0eWxlJiYoYz1kLnN0eWxlLmRpc3BsYXksYj8oXCJub25lXCI9PT1jJiYoZVtmXT1XLmdldChkLFwiZGlzcGxheVwiKXx8bnVsbCxlW2ZdfHwoZC5zdHlsZS5kaXNwbGF5PVwiXCIpKSxcIlwiPT09ZC5zdHlsZS5kaXNwbGF5JiZkYShkKSYmKGVbZl09aGEoZCkpKTpcIm5vbmVcIiE9PWMmJihlW2ZdPVwibm9uZVwiLFcuc2V0KGQsXCJkaXNwbGF5XCIsYykpKTtmb3IoZj0wO2Y8ZztmKyspbnVsbCE9ZVtmXSYmKGFbZl0uc3R5bGUuZGlzcGxheT1lW2ZdKTtyZXR1cm4gYX1yLmZuLmV4dGVuZCh7c2hvdzpmdW5jdGlvbigpe3JldHVybiBpYSh0aGlzLCEwKX0saGlkZTpmdW5jdGlvbigpe3JldHVybiBpYSh0aGlzKX0sdG9nZ2xlOmZ1bmN0aW9uKGEpe3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgYT9hP3RoaXMuc2hvdygpOnRoaXMuaGlkZSgpOnRoaXMuZWFjaChmdW5jdGlvbigpe2RhKHRoaXMpP3IodGhpcykuc2hvdygpOnIodGhpcykuaGlkZSgpfSl9fSk7dmFyIGphPS9eKD86Y2hlY2tib3h8cmFkaW8pJC9pLGthPS88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSxsYT0vXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pLG1hPXtvcHRpb246WzEsXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsXCI8L3NlbGVjdD5cIl0sdGhlYWQ6WzEsXCI8dGFibGU+XCIsXCI8L3RhYmxlPlwiXSxjb2w6WzIsXCI8dGFibGU+PGNvbGdyb3VwPlwiLFwiPC9jb2xncm91cD48L3RhYmxlPlwiXSx0cjpbMixcIjx0YWJsZT48dGJvZHk+XCIsXCI8L3Rib2R5PjwvdGFibGU+XCJdLHRkOlszLFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIl0sX2RlZmF1bHQ6WzAsXCJcIixcIlwiXX07bWEub3B0Z3JvdXA9bWEub3B0aW9uLG1hLnRib2R5PW1hLnRmb290PW1hLmNvbGdyb3VwPW1hLmNhcHRpb249bWEudGhlYWQsbWEudGg9bWEudGQ7ZnVuY3Rpb24gbmEoYSxiKXt2YXIgYztyZXR1cm4gYz1cInVuZGVmaW5lZFwiIT10eXBlb2YgYS5nZXRFbGVtZW50c0J5VGFnTmFtZT9hLmdldEVsZW1lbnRzQnlUYWdOYW1lKGJ8fFwiKlwiKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5xdWVyeVNlbGVjdG9yQWxsP2EucXVlcnlTZWxlY3RvckFsbChifHxcIipcIik6W10sdm9pZCAwPT09Ynx8YiYmQihhLGIpP3IubWVyZ2UoW2FdLGMpOmN9ZnVuY3Rpb24gb2EoYSxiKXtmb3IodmFyIGM9MCxkPWEubGVuZ3RoO2M8ZDtjKyspVy5zZXQoYVtjXSxcImdsb2JhbEV2YWxcIiwhYnx8Vy5nZXQoYltjXSxcImdsb2JhbEV2YWxcIikpfXZhciBwYT0vPHwmIz9cXHcrOy87ZnVuY3Rpb24gcWEoYSxiLGMsZCxlKXtmb3IodmFyIGYsZyxoLGksaixrLGw9Yi5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksbT1bXSxuPTAsbz1hLmxlbmd0aDtuPG87bisrKWlmKGY9YVtuXSxmfHwwPT09ZilpZihcIm9iamVjdFwiPT09ci50eXBlKGYpKXIubWVyZ2UobSxmLm5vZGVUeXBlP1tmXTpmKTtlbHNlIGlmKHBhLnRlc3QoZikpe2c9Z3x8bC5hcHBlbmRDaGlsZChiLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLGg9KGthLmV4ZWMoZil8fFtcIlwiLFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpLGk9bWFbaF18fG1hLl9kZWZhdWx0LGcuaW5uZXJIVE1MPWlbMV0rci5odG1sUHJlZmlsdGVyKGYpK2lbMl0saz1pWzBdO3doaWxlKGstLSlnPWcubGFzdENoaWxkO3IubWVyZ2UobSxnLmNoaWxkTm9kZXMpLGc9bC5maXJzdENoaWxkLGcudGV4dENvbnRlbnQ9XCJcIn1lbHNlIG0ucHVzaChiLmNyZWF0ZVRleHROb2RlKGYpKTtsLnRleHRDb250ZW50PVwiXCIsbj0wO3doaWxlKGY9bVtuKytdKWlmKGQmJnIuaW5BcnJheShmLGQpPi0xKWUmJmUucHVzaChmKTtlbHNlIGlmKGo9ci5jb250YWlucyhmLm93bmVyRG9jdW1lbnQsZiksZz1uYShsLmFwcGVuZENoaWxkKGYpLFwic2NyaXB0XCIpLGomJm9hKGcpLGMpe2s9MDt3aGlsZShmPWdbaysrXSlsYS50ZXN0KGYudHlwZXx8XCJcIikmJmMucHVzaChmKX1yZXR1cm4gbH0hZnVuY3Rpb24oKXt2YXIgYT1kLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxiPWEuYXBwZW5kQ2hpbGQoZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxjPWQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO2Muc2V0QXR0cmlidXRlKFwidHlwZVwiLFwicmFkaW9cIiksYy5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsXCJjaGVja2VkXCIpLGMuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwidFwiKSxiLmFwcGVuZENoaWxkKGMpLG8uY2hlY2tDbG9uZT1iLmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCxiLmlubmVySFRNTD1cIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIixvLm5vQ2xvbmVDaGVja2VkPSEhYi5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWV9KCk7dmFyIHJhPWQuZG9jdW1lbnRFbGVtZW50LHNhPS9ea2V5Lyx0YT0vXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sdWE9L14oW14uXSopKD86XFwuKC4rKXwpLztmdW5jdGlvbiB2YSgpe3JldHVybiEwfWZ1bmN0aW9uIHdhKCl7cmV0dXJuITF9ZnVuY3Rpb24geGEoKXt0cnl7cmV0dXJuIGQuYWN0aXZlRWxlbWVudH1jYXRjaChhKXt9fWZ1bmN0aW9uIHlhKGEsYixjLGQsZSxmKXt2YXIgZyxoO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBiKXtcInN0cmluZ1wiIT10eXBlb2YgYyYmKGQ9ZHx8YyxjPXZvaWQgMCk7Zm9yKGggaW4gYil5YShhLGgsYyxkLGJbaF0sZik7cmV0dXJuIGF9aWYobnVsbD09ZCYmbnVsbD09ZT8oZT1jLGQ9Yz12b2lkIDApOm51bGw9PWUmJihcInN0cmluZ1wiPT10eXBlb2YgYz8oZT1kLGQ9dm9pZCAwKTooZT1kLGQ9YyxjPXZvaWQgMCkpLGU9PT0hMSllPXdhO2Vsc2UgaWYoIWUpcmV0dXJuIGE7cmV0dXJuIDE9PT1mJiYoZz1lLGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHIoKS5vZmYoYSksZy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUuZ3VpZD1nLmd1aWR8fChnLmd1aWQ9ci5ndWlkKyspKSxhLmVhY2goZnVuY3Rpb24oKXtyLmV2ZW50LmFkZCh0aGlzLGIsZSxkLGMpfSl9ci5ldmVudD17Z2xvYmFsOnt9LGFkZDpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmLGcsaCxpLGosayxsLG0sbixvLHAscT1XLmdldChhKTtpZihxKXtjLmhhbmRsZXImJihmPWMsYz1mLmhhbmRsZXIsZT1mLnNlbGVjdG9yKSxlJiZyLmZpbmQubWF0Y2hlc1NlbGVjdG9yKHJhLGUpLGMuZ3VpZHx8KGMuZ3VpZD1yLmd1aWQrKyksKGk9cS5ldmVudHMpfHwoaT1xLmV2ZW50cz17fSksKGc9cS5oYW5kbGUpfHwoZz1xLmhhbmRsZT1mdW5jdGlvbihiKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgciYmci5ldmVudC50cmlnZ2VyZWQhPT1iLnR5cGU/ci5ldmVudC5kaXNwYXRjaC5hcHBseShhLGFyZ3VtZW50cyk6dm9pZCAwfSksYj0oYnx8XCJcIikubWF0Y2goTCl8fFtcIlwiXSxqPWIubGVuZ3RoO3doaWxlKGotLSloPXVhLmV4ZWMoYltqXSl8fFtdLG49cD1oWzFdLG89KGhbMl18fFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCksbiYmKGw9ci5ldmVudC5zcGVjaWFsW25dfHx7fSxuPShlP2wuZGVsZWdhdGVUeXBlOmwuYmluZFR5cGUpfHxuLGw9ci5ldmVudC5zcGVjaWFsW25dfHx7fSxrPXIuZXh0ZW5kKHt0eXBlOm4sb3JpZ1R5cGU6cCxkYXRhOmQsaGFuZGxlcjpjLGd1aWQ6Yy5ndWlkLHNlbGVjdG9yOmUsbmVlZHNDb250ZXh0OmUmJnIuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdChlKSxuYW1lc3BhY2U6by5qb2luKFwiLlwiKX0sZiksKG09aVtuXSl8fChtPWlbbl09W10sbS5kZWxlZ2F0ZUNvdW50PTAsbC5zZXR1cCYmbC5zZXR1cC5jYWxsKGEsZCxvLGcpIT09ITF8fGEuYWRkRXZlbnRMaXN0ZW5lciYmYS5hZGRFdmVudExpc3RlbmVyKG4sZykpLGwuYWRkJiYobC5hZGQuY2FsbChhLGspLGsuaGFuZGxlci5ndWlkfHwoay5oYW5kbGVyLmd1aWQ9Yy5ndWlkKSksZT9tLnNwbGljZShtLmRlbGVnYXRlQ291bnQrKywwLGspOm0ucHVzaChrKSxyLmV2ZW50Lmdsb2JhbFtuXT0hMCl9fSxyZW1vdmU6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZixnLGgsaSxqLGssbCxtLG4sbyxwLHE9Vy5oYXNEYXRhKGEpJiZXLmdldChhKTtpZihxJiYoaT1xLmV2ZW50cykpe2I9KGJ8fFwiXCIpLm1hdGNoKEwpfHxbXCJcIl0saj1iLmxlbmd0aDt3aGlsZShqLS0paWYoaD11YS5leGVjKGJbal0pfHxbXSxuPXA9aFsxXSxvPShoWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLG4pe2w9ci5ldmVudC5zcGVjaWFsW25dfHx7fSxuPShkP2wuZGVsZWdhdGVUeXBlOmwuYmluZFR5cGUpfHxuLG09aVtuXXx8W10saD1oWzJdJiZuZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIrby5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIiksZz1mPW0ubGVuZ3RoO3doaWxlKGYtLSlrPW1bZl0sIWUmJnAhPT1rLm9yaWdUeXBlfHxjJiZjLmd1aWQhPT1rLmd1aWR8fGgmJiFoLnRlc3Qoay5uYW1lc3BhY2UpfHxkJiZkIT09ay5zZWxlY3RvciYmKFwiKipcIiE9PWR8fCFrLnNlbGVjdG9yKXx8KG0uc3BsaWNlKGYsMSksay5zZWxlY3RvciYmbS5kZWxlZ2F0ZUNvdW50LS0sbC5yZW1vdmUmJmwucmVtb3ZlLmNhbGwoYSxrKSk7ZyYmIW0ubGVuZ3RoJiYobC50ZWFyZG93biYmbC50ZWFyZG93bi5jYWxsKGEsbyxxLmhhbmRsZSkhPT0hMXx8ci5yZW1vdmVFdmVudChhLG4scS5oYW5kbGUpLGRlbGV0ZSBpW25dKX1lbHNlIGZvcihuIGluIGkpci5ldmVudC5yZW1vdmUoYSxuK2Jbal0sYyxkLCEwKTtyLmlzRW1wdHlPYmplY3QoaSkmJlcucmVtb3ZlKGEsXCJoYW5kbGUgZXZlbnRzXCIpfX0sZGlzcGF0Y2g6ZnVuY3Rpb24oYSl7dmFyIGI9ci5ldmVudC5maXgoYSksYyxkLGUsZixnLGgsaT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCksaj0oVy5nZXQodGhpcyxcImV2ZW50c1wiKXx8e30pW2IudHlwZV18fFtdLGs9ci5ldmVudC5zcGVjaWFsW2IudHlwZV18fHt9O2ZvcihpWzBdPWIsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspaVtjXT1hcmd1bWVudHNbY107aWYoYi5kZWxlZ2F0ZVRhcmdldD10aGlzLCFrLnByZURpc3BhdGNofHxrLnByZURpc3BhdGNoLmNhbGwodGhpcyxiKSE9PSExKXtoPXIuZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLGIsaiksYz0wO3doaWxlKChmPWhbYysrXSkmJiFiLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpe2IuY3VycmVudFRhcmdldD1mLmVsZW0sZD0wO3doaWxlKChnPWYuaGFuZGxlcnNbZCsrXSkmJiFiLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpYi5ybmFtZXNwYWNlJiYhYi5ybmFtZXNwYWNlLnRlc3QoZy5uYW1lc3BhY2UpfHwoYi5oYW5kbGVPYmo9ZyxiLmRhdGE9Zy5kYXRhLGU9KChyLmV2ZW50LnNwZWNpYWxbZy5vcmlnVHlwZV18fHt9KS5oYW5kbGV8fGcuaGFuZGxlcikuYXBwbHkoZi5lbGVtLGkpLHZvaWQgMCE9PWUmJihiLnJlc3VsdD1lKT09PSExJiYoYi5wcmV2ZW50RGVmYXVsdCgpLGIuc3RvcFByb3BhZ2F0aW9uKCkpKX1yZXR1cm4gay5wb3N0RGlzcGF0Y2gmJmsucG9zdERpc3BhdGNoLmNhbGwodGhpcyxiKSxiLnJlc3VsdH19LGhhbmRsZXJzOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGYsZyxoPVtdLGk9Yi5kZWxlZ2F0ZUNvdW50LGo9YS50YXJnZXQ7aWYoaSYmai5ub2RlVHlwZSYmIShcImNsaWNrXCI9PT1hLnR5cGUmJmEuYnV0dG9uPj0xKSlmb3IoO2ohPT10aGlzO2o9ai5wYXJlbnROb2RlfHx0aGlzKWlmKDE9PT1qLm5vZGVUeXBlJiYoXCJjbGlja1wiIT09YS50eXBlfHxqLmRpc2FibGVkIT09ITApKXtmb3IoZj1bXSxnPXt9LGM9MDtjPGk7YysrKWQ9YltjXSxlPWQuc2VsZWN0b3IrXCIgXCIsdm9pZCAwPT09Z1tlXSYmKGdbZV09ZC5uZWVkc0NvbnRleHQ/cihlLHRoaXMpLmluZGV4KGopPi0xOnIuZmluZChlLHRoaXMsbnVsbCxbal0pLmxlbmd0aCksZ1tlXSYmZi5wdXNoKGQpO2YubGVuZ3RoJiZoLnB1c2goe2VsZW06aixoYW5kbGVyczpmfSl9cmV0dXJuIGo9dGhpcyxpPGIubGVuZ3RoJiZoLnB1c2goe2VsZW06aixoYW5kbGVyczpiLnNsaWNlKGkpfSksaH0sYWRkUHJvcDpmdW5jdGlvbihhLGIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLkV2ZW50LnByb3RvdHlwZSxhLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ci5pc0Z1bmN0aW9uKGIpP2Z1bmN0aW9uKCl7aWYodGhpcy5vcmlnaW5hbEV2ZW50KXJldHVybiBiKHRoaXMub3JpZ2luYWxFdmVudCl9OmZ1bmN0aW9uKCl7aWYodGhpcy5vcmlnaW5hbEV2ZW50KXJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbYV19LHNldDpmdW5jdGlvbihiKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxhLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpifSl9fSl9LGZpeDpmdW5jdGlvbihhKXtyZXR1cm4gYVtyLmV4cGFuZG9dP2E6bmV3IHIuRXZlbnQoYSl9LHNwZWNpYWw6e2xvYWQ6e25vQnViYmxlOiEwfSxmb2N1czp7dHJpZ2dlcjpmdW5jdGlvbigpe2lmKHRoaXMhPT14YSgpJiZ0aGlzLmZvY3VzKXJldHVybiB0aGlzLmZvY3VzKCksITF9LGRlbGVnYXRlVHlwZTpcImZvY3VzaW5cIn0sYmx1cjp7dHJpZ2dlcjpmdW5jdGlvbigpe2lmKHRoaXM9PT14YSgpJiZ0aGlzLmJsdXIpcmV0dXJuIHRoaXMuYmx1cigpLCExfSxkZWxlZ2F0ZVR5cGU6XCJmb2N1c291dFwifSxjbGljazp7dHJpZ2dlcjpmdW5jdGlvbigpe2lmKFwiY2hlY2tib3hcIj09PXRoaXMudHlwZSYmdGhpcy5jbGljayYmQih0aGlzLFwiaW5wdXRcIikpcmV0dXJuIHRoaXMuY2xpY2soKSwhMX0sX2RlZmF1bHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIEIoYS50YXJnZXQsXCJhXCIpfX0sYmVmb3JldW5sb2FkOntwb3N0RGlzcGF0Y2g6ZnVuY3Rpb24oYSl7dm9pZCAwIT09YS5yZXN1bHQmJmEub3JpZ2luYWxFdmVudCYmKGEub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZT1hLnJlc3VsdCl9fX19LHIucmVtb3ZlRXZlbnQ9ZnVuY3Rpb24oYSxiLGMpe2EucmVtb3ZlRXZlbnRMaXN0ZW5lciYmYS5yZW1vdmVFdmVudExpc3RlbmVyKGIsYyl9LHIuRXZlbnQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIHIuRXZlbnQ/KGEmJmEudHlwZT8odGhpcy5vcmlnaW5hbEV2ZW50PWEsdGhpcy50eXBlPWEudHlwZSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1hLmRlZmF1bHRQcmV2ZW50ZWR8fHZvaWQgMD09PWEuZGVmYXVsdFByZXZlbnRlZCYmYS5yZXR1cm5WYWx1ZT09PSExP3ZhOndhLHRoaXMudGFyZ2V0PWEudGFyZ2V0JiYzPT09YS50YXJnZXQubm9kZVR5cGU/YS50YXJnZXQucGFyZW50Tm9kZTphLnRhcmdldCx0aGlzLmN1cnJlbnRUYXJnZXQ9YS5jdXJyZW50VGFyZ2V0LHRoaXMucmVsYXRlZFRhcmdldD1hLnJlbGF0ZWRUYXJnZXQpOnRoaXMudHlwZT1hLGImJnIuZXh0ZW5kKHRoaXMsYiksdGhpcy50aW1lU3RhbXA9YSYmYS50aW1lU3RhbXB8fHIubm93KCksdm9pZCh0aGlzW3IuZXhwYW5kb109ITApKTpuZXcgci5FdmVudChhLGIpfSxyLkV2ZW50LnByb3RvdHlwZT17Y29uc3RydWN0b3I6ci5FdmVudCxpc0RlZmF1bHRQcmV2ZW50ZWQ6d2EsaXNQcm9wYWdhdGlvblN0b3BwZWQ6d2EsaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6d2EsaXNTaW11bGF0ZWQ6ITEscHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9dmEsYSYmIXRoaXMuaXNTaW11bGF0ZWQmJmEucHJldmVudERlZmF1bHQoKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dmEsYSYmIXRoaXMuaXNTaW11bGF0ZWQmJmEuc3RvcFByb3BhZ2F0aW9uKCl9LHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPXZhLGEmJiF0aGlzLmlzU2ltdWxhdGVkJiZhLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHRoaXMuc3RvcFByb3BhZ2F0aW9uKCl9fSxyLmVhY2goe2FsdEtleTohMCxidWJibGVzOiEwLGNhbmNlbGFibGU6ITAsY2hhbmdlZFRvdWNoZXM6ITAsY3RybEtleTohMCxkZXRhaWw6ITAsZXZlbnRQaGFzZTohMCxtZXRhS2V5OiEwLHBhZ2VYOiEwLHBhZ2VZOiEwLHNoaWZ0S2V5OiEwLHZpZXc6ITAsXCJjaGFyXCI6ITAsY2hhckNvZGU6ITAsa2V5OiEwLGtleUNvZGU6ITAsYnV0dG9uOiEwLGJ1dHRvbnM6ITAsY2xpZW50WDohMCxjbGllbnRZOiEwLG9mZnNldFg6ITAsb2Zmc2V0WTohMCxwb2ludGVySWQ6ITAscG9pbnRlclR5cGU6ITAsc2NyZWVuWDohMCxzY3JlZW5ZOiEwLHRhcmdldFRvdWNoZXM6ITAsdG9FbGVtZW50OiEwLHRvdWNoZXM6ITAsd2hpY2g6ZnVuY3Rpb24oYSl7dmFyIGI9YS5idXR0b247cmV0dXJuIG51bGw9PWEud2hpY2gmJnNhLnRlc3QoYS50eXBlKT9udWxsIT1hLmNoYXJDb2RlP2EuY2hhckNvZGU6YS5rZXlDb2RlOiFhLndoaWNoJiZ2b2lkIDAhPT1iJiZ0YS50ZXN0KGEudHlwZSk/MSZiPzE6MiZiPzM6NCZiPzI6MDphLndoaWNofX0sci5ldmVudC5hZGRQcm9wKSxyLmVhY2goe21vdXNlZW50ZXI6XCJtb3VzZW92ZXJcIixtb3VzZWxlYXZlOlwibW91c2VvdXRcIixwb2ludGVyZW50ZXI6XCJwb2ludGVyb3ZlclwiLHBvaW50ZXJsZWF2ZTpcInBvaW50ZXJvdXRcIn0sZnVuY3Rpb24oYSxiKXtyLmV2ZW50LnNwZWNpYWxbYV09e2RlbGVnYXRlVHlwZTpiLGJpbmRUeXBlOmIsaGFuZGxlOmZ1bmN0aW9uKGEpe3ZhciBjLGQ9dGhpcyxlPWEucmVsYXRlZFRhcmdldCxmPWEuaGFuZGxlT2JqO3JldHVybiBlJiYoZT09PWR8fHIuY29udGFpbnMoZCxlKSl8fChhLnR5cGU9Zi5vcmlnVHlwZSxjPWYuaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyksYS50eXBlPWIpLGN9fX0pLHIuZm4uZXh0ZW5kKHtvbjpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4geWEodGhpcyxhLGIsYyxkKX0sb25lOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB5YSh0aGlzLGEsYixjLGQsMSl9LG9mZjpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZTtpZihhJiZhLnByZXZlbnREZWZhdWx0JiZhLmhhbmRsZU9iailyZXR1cm4gZD1hLmhhbmRsZU9iaixyKGEuZGVsZWdhdGVUYXJnZXQpLm9mZihkLm5hbWVzcGFjZT9kLm9yaWdUeXBlK1wiLlwiK2QubmFtZXNwYWNlOmQub3JpZ1R5cGUsZC5zZWxlY3RvcixkLmhhbmRsZXIpLHRoaXM7aWYoXCJvYmplY3RcIj09dHlwZW9mIGEpe2ZvcihlIGluIGEpdGhpcy5vZmYoZSxiLGFbZV0pO3JldHVybiB0aGlzfXJldHVybiBiIT09ITEmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGJ8fChjPWIsYj12b2lkIDApLGM9PT0hMSYmKGM9d2EpLHRoaXMuZWFjaChmdW5jdGlvbigpe3IuZXZlbnQucmVtb3ZlKHRoaXMsYSxjLGIpfSl9fSk7dmFyIHphPS88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLEFhPS88c2NyaXB0fDxzdHlsZXw8bGluay9pLEJhPS9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksQ2E9L150cnVlXFwvKC4qKS8sRGE9L15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO2Z1bmN0aW9uIEVhKGEsYil7cmV0dXJuIEIoYSxcInRhYmxlXCIpJiZCKDExIT09Yi5ub2RlVHlwZT9iOmIuZmlyc3RDaGlsZCxcInRyXCIpP3IoXCI+dGJvZHlcIixhKVswXXx8YTphfWZ1bmN0aW9uIEZhKGEpe3JldHVybiBhLnR5cGU9KG51bGwhPT1hLmdldEF0dHJpYnV0ZShcInR5cGVcIikpK1wiL1wiK2EudHlwZSxhfWZ1bmN0aW9uIEdhKGEpe3ZhciBiPUNhLmV4ZWMoYS50eXBlKTtyZXR1cm4gYj9hLnR5cGU9YlsxXTphLnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIiksYX1mdW5jdGlvbiBIYShhLGIpe3ZhciBjLGQsZSxmLGcsaCxpLGo7aWYoMT09PWIubm9kZVR5cGUpe2lmKFcuaGFzRGF0YShhKSYmKGY9Vy5hY2Nlc3MoYSksZz1XLnNldChiLGYpLGo9Zi5ldmVudHMpKXtkZWxldGUgZy5oYW5kbGUsZy5ldmVudHM9e307Zm9yKGUgaW4gailmb3IoYz0wLGQ9altlXS5sZW5ndGg7YzxkO2MrKylyLmV2ZW50LmFkZChiLGUsaltlXVtjXSl9WC5oYXNEYXRhKGEpJiYoaD1YLmFjY2VzcyhhKSxpPXIuZXh0ZW5kKHt9LGgpLFguc2V0KGIsaSkpfX1mdW5jdGlvbiBJYShhLGIpe3ZhciBjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcImlucHV0XCI9PT1jJiZqYS50ZXN0KGEudHlwZSk/Yi5jaGVja2VkPWEuY2hlY2tlZDpcImlucHV0XCIhPT1jJiZcInRleHRhcmVhXCIhPT1jfHwoYi5kZWZhdWx0VmFsdWU9YS5kZWZhdWx0VmFsdWUpfWZ1bmN0aW9uIEphKGEsYixjLGQpe2I9Zy5hcHBseShbXSxiKTt2YXIgZSxmLGgsaSxqLGssbD0wLG09YS5sZW5ndGgsbj1tLTEscT1iWzBdLHM9ci5pc0Z1bmN0aW9uKHEpO2lmKHN8fG0+MSYmXCJzdHJpbmdcIj09dHlwZW9mIHEmJiFvLmNoZWNrQ2xvbmUmJkJhLnRlc3QocSkpcmV0dXJuIGEuZWFjaChmdW5jdGlvbihlKXt2YXIgZj1hLmVxKGUpO3MmJihiWzBdPXEuY2FsbCh0aGlzLGUsZi5odG1sKCkpKSxKYShmLGIsYyxkKX0pO2lmKG0mJihlPXFhKGIsYVswXS5vd25lckRvY3VtZW50LCExLGEsZCksZj1lLmZpcnN0Q2hpbGQsMT09PWUuY2hpbGROb2Rlcy5sZW5ndGgmJihlPWYpLGZ8fGQpKXtmb3IoaD1yLm1hcChuYShlLFwic2NyaXB0XCIpLEZhKSxpPWgubGVuZ3RoO2w8bTtsKyspaj1lLGwhPT1uJiYoaj1yLmNsb25lKGosITAsITApLGkmJnIubWVyZ2UoaCxuYShqLFwic2NyaXB0XCIpKSksYy5jYWxsKGFbbF0saixsKTtpZihpKWZvcihrPWhbaC5sZW5ndGgtMV0ub3duZXJEb2N1bWVudCxyLm1hcChoLEdhKSxsPTA7bDxpO2wrKylqPWhbbF0sbGEudGVzdChqLnR5cGV8fFwiXCIpJiYhVy5hY2Nlc3MoaixcImdsb2JhbEV2YWxcIikmJnIuY29udGFpbnMoayxqKSYmKGouc3JjP3IuX2V2YWxVcmwmJnIuX2V2YWxVcmwoai5zcmMpOnAoai50ZXh0Q29udGVudC5yZXBsYWNlKERhLFwiXCIpLGspKX1yZXR1cm4gYX1mdW5jdGlvbiBLYShhLGIsYyl7Zm9yKHZhciBkLGU9Yj9yLmZpbHRlcihiLGEpOmEsZj0wO251bGwhPShkPWVbZl0pO2YrKyljfHwxIT09ZC5ub2RlVHlwZXx8ci5jbGVhbkRhdGEobmEoZCkpLGQucGFyZW50Tm9kZSYmKGMmJnIuY29udGFpbnMoZC5vd25lckRvY3VtZW50LGQpJiZvYShuYShkLFwic2NyaXB0XCIpKSxkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZCkpO3JldHVybiBhfXIuZXh0ZW5kKHtodG1sUHJlZmlsdGVyOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoemEsXCI8JDE+PC8kMj5cIil9LGNsb25lOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZyxoPWEuY2xvbmVOb2RlKCEwKSxpPXIuY29udGFpbnMoYS5vd25lckRvY3VtZW50LGEpO2lmKCEoby5ub0Nsb25lQ2hlY2tlZHx8MSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZXx8ci5pc1hNTERvYyhhKSkpZm9yKGc9bmEoaCksZj1uYShhKSxkPTAsZT1mLmxlbmd0aDtkPGU7ZCsrKUlhKGZbZF0sZ1tkXSk7aWYoYilpZihjKWZvcihmPWZ8fG5hKGEpLGc9Z3x8bmEoaCksZD0wLGU9Zi5sZW5ndGg7ZDxlO2QrKylIYShmW2RdLGdbZF0pO2Vsc2UgSGEoYSxoKTtyZXR1cm4gZz1uYShoLFwic2NyaXB0XCIpLGcubGVuZ3RoPjAmJm9hKGcsIWkmJm5hKGEsXCJzY3JpcHRcIikpLGh9LGNsZWFuRGF0YTpmdW5jdGlvbihhKXtmb3IodmFyIGIsYyxkLGU9ci5ldmVudC5zcGVjaWFsLGY9MDt2b2lkIDAhPT0oYz1hW2ZdKTtmKyspaWYoVShjKSl7aWYoYj1jW1cuZXhwYW5kb10pe2lmKGIuZXZlbnRzKWZvcihkIGluIGIuZXZlbnRzKWVbZF0/ci5ldmVudC5yZW1vdmUoYyxkKTpyLnJlbW92ZUV2ZW50KGMsZCxiLmhhbmRsZSk7Y1tXLmV4cGFuZG9dPXZvaWQgMH1jW1guZXhwYW5kb10mJihjW1guZXhwYW5kb109dm9pZCAwKX19fSksci5mbi5leHRlbmQoe2RldGFjaDpmdW5jdGlvbihhKXtyZXR1cm4gS2EodGhpcyxhLCEwKX0scmVtb3ZlOmZ1bmN0aW9uKGEpe3JldHVybiBLYSh0aGlzLGEpfSx0ZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBUKHRoaXMsZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWE/ci50ZXh0KHRoaXMpOnRoaXMuZW1wdHkoKS5lYWNoKGZ1bmN0aW9uKCl7MSE9PXRoaXMubm9kZVR5cGUmJjExIT09dGhpcy5ub2RlVHlwZSYmOSE9PXRoaXMubm9kZVR5cGV8fCh0aGlzLnRleHRDb250ZW50PWEpfSl9LG51bGwsYSxhcmd1bWVudHMubGVuZ3RoKX0sYXBwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIEphKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGEpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgYj1FYSh0aGlzLGEpO2IuYXBwZW5kQ2hpbGQoYSl9fSl9LHByZXBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gSmEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYSl7aWYoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpe3ZhciBiPUVhKHRoaXMsYSk7Yi5pbnNlcnRCZWZvcmUoYSxiLmZpcnN0Q2hpbGQpfX0pfSxiZWZvcmU6ZnVuY3Rpb24oKXtyZXR1cm4gSmEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYSl7dGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsdGhpcyl9KX0sYWZ0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gSmEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYSl7dGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsdGhpcy5uZXh0U2libGluZyl9KX0sZW1wdHk6ZnVuY3Rpb24oKXtmb3IodmFyIGEsYj0wO251bGwhPShhPXRoaXNbYl0pO2IrKykxPT09YS5ub2RlVHlwZSYmKHIuY2xlYW5EYXRhKG5hKGEsITEpKSxhLnRleHRDb250ZW50PVwiXCIpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbihhLGIpe3JldHVybiBhPW51bGwhPWEmJmEsYj1udWxsPT1iP2E6Yix0aGlzLm1hcChmdW5jdGlvbigpe3JldHVybiByLmNsb25lKHRoaXMsYSxiKX0pfSxodG1sOmZ1bmN0aW9uKGEpe3JldHVybiBUKHRoaXMsZnVuY3Rpb24oYSl7dmFyIGI9dGhpc1swXXx8e30sYz0wLGQ9dGhpcy5sZW5ndGg7aWYodm9pZCAwPT09YSYmMT09PWIubm9kZVR5cGUpcmV0dXJuIGIuaW5uZXJIVE1MO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhJiYhQWEudGVzdChhKSYmIW1hWyhrYS5leGVjKGEpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV0pe2E9ci5odG1sUHJlZmlsdGVyKGEpO3RyeXtmb3IoO2M8ZDtjKyspYj10aGlzW2NdfHx7fSwxPT09Yi5ub2RlVHlwZSYmKHIuY2xlYW5EYXRhKG5hKGIsITEpKSxiLmlubmVySFRNTD1hKTtiPTB9Y2F0Y2goZSl7fX1iJiZ0aGlzLmVtcHR5KCkuYXBwZW5kKGEpfSxudWxsLGEsYXJndW1lbnRzLmxlbmd0aCl9LHJlcGxhY2VXaXRoOmZ1bmN0aW9uKCl7dmFyIGE9W107cmV0dXJuIEphKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGIpe3ZhciBjPXRoaXMucGFyZW50Tm9kZTtyLmluQXJyYXkodGhpcyxhKTwwJiYoci5jbGVhbkRhdGEobmEodGhpcykpLGMmJmMucmVwbGFjZUNoaWxkKGIsdGhpcykpfSxhKX19KSxyLmVhY2goe2FwcGVuZFRvOlwiYXBwZW5kXCIscHJlcGVuZFRvOlwicHJlcGVuZFwiLGluc2VydEJlZm9yZTpcImJlZm9yZVwiLGluc2VydEFmdGVyOlwiYWZ0ZXJcIixyZXBsYWNlQWxsOlwicmVwbGFjZVdpdGhcIn0sZnVuY3Rpb24oYSxiKXtyLmZuW2FdPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYyxkPVtdLGU9cihhKSxmPWUubGVuZ3RoLTEsZz0wO2c8PWY7ZysrKWM9Zz09PWY/dGhpczp0aGlzLmNsb25lKCEwKSxyKGVbZ10pW2JdKGMpLGguYXBwbHkoZCxjLmdldCgpKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soZCl9fSk7dmFyIExhPS9ebWFyZ2luLyxNYT1uZXcgUmVnRXhwKFwiXihcIithYStcIikoPyFweClbYS16JV0rJFwiLFwiaVwiKSxOYT1mdW5jdGlvbihiKXt2YXIgYz1iLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7cmV0dXJuIGMmJmMub3BlbmVyfHwoYz1hKSxjLmdldENvbXB1dGVkU3R5bGUoYil9OyFmdW5jdGlvbigpe2Z1bmN0aW9uIGIoKXtpZihpKXtpLnN0eWxlLmNzc1RleHQ9XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jazttYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3RvcDoxJTt3aWR0aDo1MCVcIixpLmlubmVySFRNTD1cIlwiLHJhLmFwcGVuZENoaWxkKGgpO3ZhciBiPWEuZ2V0Q29tcHV0ZWRTdHlsZShpKTtjPVwiMSVcIiE9PWIudG9wLGc9XCIycHhcIj09PWIubWFyZ2luTGVmdCxlPVwiNHB4XCI9PT1iLndpZHRoLGkuc3R5bGUubWFyZ2luUmlnaHQ9XCI1MCVcIixmPVwiNHB4XCI9PT1iLm1hcmdpblJpZ2h0LHJhLnJlbW92ZUNoaWxkKGgpLGk9bnVsbH19dmFyIGMsZSxmLGcsaD1kLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksaT1kLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7aS5zdHlsZSYmKGkuc3R5bGUuYmFja2dyb3VuZENsaXA9XCJjb250ZW50LWJveFwiLGkuY2xvbmVOb2RlKCEwKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD1cIlwiLG8uY2xlYXJDbG9uZVN0eWxlPVwiY29udGVudC1ib3hcIj09PWkuc3R5bGUuYmFja2dyb3VuZENsaXAsaC5zdHlsZS5jc3NUZXh0PVwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtwYWRkaW5nOjA7bWFyZ2luLXRvcDoxcHg7cG9zaXRpb246YWJzb2x1dGVcIixoLmFwcGVuZENoaWxkKGkpLHIuZXh0ZW5kKG8se3BpeGVsUG9zaXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gYigpLGN9LGJveFNpemluZ1JlbGlhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGIoKSxlfSxwaXhlbE1hcmdpblJpZ2h0OmZ1bmN0aW9uKCl7cmV0dXJuIGIoKSxmfSxyZWxpYWJsZU1hcmdpbkxlZnQ6ZnVuY3Rpb24oKXtyZXR1cm4gYigpLGd9fSkpfSgpO2Z1bmN0aW9uIE9hKGEsYixjKXt2YXIgZCxlLGYsZyxoPWEuc3R5bGU7cmV0dXJuIGM9Y3x8TmEoYSksYyYmKGc9Yy5nZXRQcm9wZXJ0eVZhbHVlKGIpfHxjW2JdLFwiXCIhPT1nfHxyLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKXx8KGc9ci5zdHlsZShhLGIpKSwhby5waXhlbE1hcmdpblJpZ2h0KCkmJk1hLnRlc3QoZykmJkxhLnRlc3QoYikmJihkPWgud2lkdGgsZT1oLm1pbldpZHRoLGY9aC5tYXhXaWR0aCxoLm1pbldpZHRoPWgubWF4V2lkdGg9aC53aWR0aD1nLGc9Yy53aWR0aCxoLndpZHRoPWQsaC5taW5XaWR0aD1lLGgubWF4V2lkdGg9ZikpLHZvaWQgMCE9PWc/ZytcIlwiOmd9ZnVuY3Rpb24gUGEoYSxiKXtyZXR1cm57Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGEoKT92b2lkIGRlbGV0ZSB0aGlzLmdldDoodGhpcy5nZXQ9YikuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19dmFyIFFhPS9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxSYT0vXi0tLyxTYT17cG9zaXRpb246XCJhYnNvbHV0ZVwiLHZpc2liaWxpdHk6XCJoaWRkZW5cIixkaXNwbGF5OlwiYmxvY2tcIn0sVGE9e2xldHRlclNwYWNpbmc6XCIwXCIsZm9udFdlaWdodDpcIjQwMFwifSxVYT1bXCJXZWJraXRcIixcIk1velwiLFwibXNcIl0sVmE9ZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlO2Z1bmN0aW9uIFdhKGEpe2lmKGEgaW4gVmEpcmV0dXJuIGE7dmFyIGI9YVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSksYz1VYS5sZW5ndGg7d2hpbGUoYy0tKWlmKGE9VWFbY10rYixhIGluIFZhKXJldHVybiBhfWZ1bmN0aW9uIFhhKGEpe3ZhciBiPXIuY3NzUHJvcHNbYV07cmV0dXJuIGJ8fChiPXIuY3NzUHJvcHNbYV09V2EoYSl8fGEpLGJ9ZnVuY3Rpb24gWWEoYSxiLGMpe3ZhciBkPWJhLmV4ZWMoYik7cmV0dXJuIGQ/TWF0aC5tYXgoMCxkWzJdLShjfHwwKSkrKGRbM118fFwicHhcIik6Yn1mdW5jdGlvbiBaYShhLGIsYyxkLGUpe3ZhciBmLGc9MDtmb3IoZj1jPT09KGQ/XCJib3JkZXJcIjpcImNvbnRlbnRcIik/NDpcIndpZHRoXCI9PT1iPzE6MDtmPDQ7Zis9MilcIm1hcmdpblwiPT09YyYmKGcrPXIuY3NzKGEsYytjYVtmXSwhMCxlKSksZD8oXCJjb250ZW50XCI9PT1jJiYoZy09ci5jc3MoYSxcInBhZGRpbmdcIitjYVtmXSwhMCxlKSksXCJtYXJnaW5cIiE9PWMmJihnLT1yLmNzcyhhLFwiYm9yZGVyXCIrY2FbZl0rXCJXaWR0aFwiLCEwLGUpKSk6KGcrPXIuY3NzKGEsXCJwYWRkaW5nXCIrY2FbZl0sITAsZSksXCJwYWRkaW5nXCIhPT1jJiYoZys9ci5jc3MoYSxcImJvcmRlclwiK2NhW2ZdK1wiV2lkdGhcIiwhMCxlKSkpO3JldHVybiBnfWZ1bmN0aW9uICRhKGEsYixjKXt2YXIgZCxlPU5hKGEpLGY9T2EoYSxiLGUpLGc9XCJib3JkZXItYm94XCI9PT1yLmNzcyhhLFwiYm94U2l6aW5nXCIsITEsZSk7cmV0dXJuIE1hLnRlc3QoZik/ZjooZD1nJiYoby5ib3hTaXppbmdSZWxpYWJsZSgpfHxmPT09YS5zdHlsZVtiXSksXCJhdXRvXCI9PT1mJiYoZj1hW1wib2Zmc2V0XCIrYlswXS50b1VwcGVyQ2FzZSgpK2Iuc2xpY2UoMSldKSxmPXBhcnNlRmxvYXQoZil8fDAsZitaYShhLGIsY3x8KGc/XCJib3JkZXJcIjpcImNvbnRlbnRcIiksZCxlKStcInB4XCIpfXIuZXh0ZW5kKHtjc3NIb29rczp7b3BhY2l0eTp7Z2V0OmZ1bmN0aW9uKGEsYil7aWYoYil7dmFyIGM9T2EoYSxcIm9wYWNpdHlcIik7cmV0dXJuXCJcIj09PWM/XCIxXCI6Y319fX0sY3NzTnVtYmVyOnthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxjb2x1bW5Db3VudDohMCxmaWxsT3BhY2l0eTohMCxmbGV4R3JvdzohMCxmbGV4U2hyaW5rOiEwLGZvbnRXZWlnaHQ6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwfSxjc3NQcm9wczp7XCJmbG9hdFwiOlwiY3NzRmxvYXRcIn0sc3R5bGU6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoYSYmMyE9PWEubm9kZVR5cGUmJjghPT1hLm5vZGVUeXBlJiZhLnN0eWxlKXt2YXIgZSxmLGcsaD1yLmNhbWVsQ2FzZShiKSxpPVJhLnRlc3QoYiksaj1hLnN0eWxlO3JldHVybiBpfHwoYj1YYShoKSksZz1yLmNzc0hvb2tzW2JdfHxyLmNzc0hvb2tzW2hdLHZvaWQgMD09PWM/ZyYmXCJnZXRcImluIGcmJnZvaWQgMCE9PShlPWcuZ2V0KGEsITEsZCkpP2U6altiXTooZj10eXBlb2YgYyxcInN0cmluZ1wiPT09ZiYmKGU9YmEuZXhlYyhjKSkmJmVbMV0mJihjPWZhKGEsYixlKSxmPVwibnVtYmVyXCIpLG51bGwhPWMmJmM9PT1jJiYoXCJudW1iZXJcIj09PWYmJihjKz1lJiZlWzNdfHwoci5jc3NOdW1iZXJbaF0/XCJcIjpcInB4XCIpKSxvLmNsZWFyQ2xvbmVTdHlsZXx8XCJcIiE9PWN8fDAhPT1iLmluZGV4T2YoXCJiYWNrZ3JvdW5kXCIpfHwoaltiXT1cImluaGVyaXRcIiksZyYmXCJzZXRcImluIGcmJnZvaWQgMD09PShjPWcuc2V0KGEsYyxkKSl8fChpP2ouc2V0UHJvcGVydHkoYixjKTpqW2JdPWMpKSx2b2lkIDApfX0sY3NzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlLGYsZyxoPXIuY2FtZWxDYXNlKGIpLGk9UmEudGVzdChiKTtyZXR1cm4gaXx8KGI9WGEoaCkpLGc9ci5jc3NIb29rc1tiXXx8ci5jc3NIb29rc1toXSxnJiZcImdldFwiaW4gZyYmKGU9Zy5nZXQoYSwhMCxjKSksdm9pZCAwPT09ZSYmKGU9T2EoYSxiLGQpKSxcIm5vcm1hbFwiPT09ZSYmYiBpbiBUYSYmKGU9VGFbYl0pLFwiXCI9PT1jfHxjPyhmPXBhcnNlRmxvYXQoZSksYz09PSEwfHxpc0Zpbml0ZShmKT9mfHwwOmUpOmV9fSksci5lYWNoKFtcImhlaWdodFwiLFwid2lkdGhcIl0sZnVuY3Rpb24oYSxiKXtyLmNzc0hvb2tzW2JdPXtnZXQ6ZnVuY3Rpb24oYSxjLGQpe2lmKGMpcmV0dXJuIVFhLnRlc3Qoci5jc3MoYSxcImRpc3BsYXlcIikpfHxhLmdldENsaWVudFJlY3RzKCkubGVuZ3RoJiZhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoPyRhKGEsYixkKTplYShhLFNhLGZ1bmN0aW9uKCl7cmV0dXJuICRhKGEsYixkKX0pfSxzZXQ6ZnVuY3Rpb24oYSxjLGQpe3ZhciBlLGY9ZCYmTmEoYSksZz1kJiZaYShhLGIsZCxcImJvcmRlci1ib3hcIj09PXIuY3NzKGEsXCJib3hTaXppbmdcIiwhMSxmKSxmKTtyZXR1cm4gZyYmKGU9YmEuZXhlYyhjKSkmJlwicHhcIiE9PShlWzNdfHxcInB4XCIpJiYoYS5zdHlsZVtiXT1jLGM9ci5jc3MoYSxiKSksWWEoYSxjLGcpfX19KSxyLmNzc0hvb2tzLm1hcmdpbkxlZnQ9UGEoby5yZWxpYWJsZU1hcmdpbkxlZnQsZnVuY3Rpb24oYSxiKXtpZihiKXJldHVybihwYXJzZUZsb2F0KE9hKGEsXCJtYXJnaW5MZWZ0XCIpKXx8YS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0LWVhKGEse21hcmdpbkxlZnQ6MH0sZnVuY3Rpb24oKXtyZXR1cm4gYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0fSkpK1wicHhcIn0pLHIuZWFjaCh7bWFyZ2luOlwiXCIscGFkZGluZzpcIlwiLGJvcmRlcjpcIldpZHRoXCJ9LGZ1bmN0aW9uKGEsYil7ci5jc3NIb29rc1thK2JdPXtleHBhbmQ6ZnVuY3Rpb24oYyl7Zm9yKHZhciBkPTAsZT17fSxmPVwic3RyaW5nXCI9PXR5cGVvZiBjP2Muc3BsaXQoXCIgXCIpOltjXTtkPDQ7ZCsrKWVbYStjYVtkXStiXT1mW2RdfHxmW2QtMl18fGZbMF07cmV0dXJuIGV9fSxMYS50ZXN0KGEpfHwoci5jc3NIb29rc1thK2JdLnNldD1ZYSl9KSxyLmZuLmV4dGVuZCh7Y3NzOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFQodGhpcyxmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmPXt9LGc9MDtpZihBcnJheS5pc0FycmF5KGIpKXtmb3IoZD1OYShhKSxlPWIubGVuZ3RoO2c8ZTtnKyspZltiW2ddXT1yLmNzcyhhLGJbZ10sITEsZCk7cmV0dXJuIGZ9cmV0dXJuIHZvaWQgMCE9PWM/ci5zdHlsZShhLGIsYyk6ci5jc3MoYSxiKX0sYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9fSk7ZnVuY3Rpb24gX2EoYSxiLGMsZCxlKXtyZXR1cm4gbmV3IF9hLnByb3RvdHlwZS5pbml0KGEsYixjLGQsZSl9ci5Ud2Vlbj1fYSxfYS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOl9hLGluaXQ6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3RoaXMuZWxlbT1hLHRoaXMucHJvcD1jLHRoaXMuZWFzaW5nPWV8fHIuZWFzaW5nLl9kZWZhdWx0LHRoaXMub3B0aW9ucz1iLHRoaXMuc3RhcnQ9dGhpcy5ub3c9dGhpcy5jdXIoKSx0aGlzLmVuZD1kLHRoaXMudW5pdD1mfHwoci5jc3NOdW1iZXJbY10/XCJcIjpcInB4XCIpfSxjdXI6ZnVuY3Rpb24oKXt2YXIgYT1fYS5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gYSYmYS5nZXQ/YS5nZXQodGhpcyk6X2EucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKX0scnVuOmZ1bmN0aW9uKGEpe3ZhciBiLGM9X2EucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMub3B0aW9ucy5kdXJhdGlvbj90aGlzLnBvcz1iPXIuZWFzaW5nW3RoaXMuZWFzaW5nXShhLHRoaXMub3B0aW9ucy5kdXJhdGlvbiphLDAsMSx0aGlzLm9wdGlvbnMuZHVyYXRpb24pOnRoaXMucG9zPWI9YSx0aGlzLm5vdz0odGhpcy5lbmQtdGhpcy5zdGFydCkqYit0aGlzLnN0YXJ0LHRoaXMub3B0aW9ucy5zdGVwJiZ0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSx0aGlzLm5vdyx0aGlzKSxjJiZjLnNldD9jLnNldCh0aGlzKTpfYS5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLHRoaXN9fSxfYS5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGU9X2EucHJvdG90eXBlLF9hLnByb3BIb29rcz17X2RlZmF1bHQ6e2dldDpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gMSE9PWEuZWxlbS5ub2RlVHlwZXx8bnVsbCE9YS5lbGVtW2EucHJvcF0mJm51bGw9PWEuZWxlbS5zdHlsZVthLnByb3BdP2EuZWxlbVthLnByb3BdOihiPXIuY3NzKGEuZWxlbSxhLnByb3AsXCJcIiksYiYmXCJhdXRvXCIhPT1iP2I6MCl9LHNldDpmdW5jdGlvbihhKXtyLmZ4LnN0ZXBbYS5wcm9wXT9yLmZ4LnN0ZXBbYS5wcm9wXShhKToxIT09YS5lbGVtLm5vZGVUeXBlfHxudWxsPT1hLmVsZW0uc3R5bGVbci5jc3NQcm9wc1thLnByb3BdXSYmIXIuY3NzSG9va3NbYS5wcm9wXT9hLmVsZW1bYS5wcm9wXT1hLm5vdzpyLnN0eWxlKGEuZWxlbSxhLnByb3AsYS5ub3crYS51bml0KX19fSxfYS5wcm9wSG9va3Muc2Nyb2xsVG9wPV9hLnByb3BIb29rcy5zY3JvbGxMZWZ0PXtzZXQ6ZnVuY3Rpb24oYSl7YS5lbGVtLm5vZGVUeXBlJiZhLmVsZW0ucGFyZW50Tm9kZSYmKGEuZWxlbVthLnByb3BdPWEubm93KX19LHIuZWFzaW5nPXtsaW5lYXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHN3aW5nOmZ1bmN0aW9uKGEpe3JldHVybi41LU1hdGguY29zKGEqTWF0aC5QSSkvMn0sX2RlZmF1bHQ6XCJzd2luZ1wifSxyLmZ4PV9hLnByb3RvdHlwZS5pbml0LHIuZnguc3RlcD17fTt2YXIgYWIsYmIsY2I9L14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLGRiPS9xdWV1ZUhvb2tzJC87ZnVuY3Rpb24gZWIoKXtiYiYmKGQuaGlkZGVuPT09ITEmJmEucmVxdWVzdEFuaW1hdGlvbkZyYW1lP2EucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGViKTphLnNldFRpbWVvdXQoZWIsci5meC5pbnRlcnZhbCksci5meC50aWNrKCkpfWZ1bmN0aW9uIGZiKCl7cmV0dXJuIGEuc2V0VGltZW91dChmdW5jdGlvbigpe2FiPXZvaWQgMH0pLGFiPXIubm93KCl9ZnVuY3Rpb24gZ2IoYSxiKXt2YXIgYyxkPTAsZT17aGVpZ2h0OmF9O2ZvcihiPWI/MTowO2Q8NDtkKz0yLWIpYz1jYVtkXSxlW1wibWFyZ2luXCIrY109ZVtcInBhZGRpbmdcIitjXT1hO3JldHVybiBiJiYoZS5vcGFjaXR5PWUud2lkdGg9YSksZX1mdW5jdGlvbiBoYihhLGIsYyl7Zm9yKHZhciBkLGU9KGtiLnR3ZWVuZXJzW2JdfHxbXSkuY29uY2F0KGtiLnR3ZWVuZXJzW1wiKlwiXSksZj0wLGc9ZS5sZW5ndGg7ZjxnO2YrKylpZihkPWVbZl0uY2FsbChjLGIsYSkpcmV0dXJuIGR9ZnVuY3Rpb24gaWIoYSxiLGMpe3ZhciBkLGUsZixnLGgsaSxqLGssbD1cIndpZHRoXCJpbiBifHxcImhlaWdodFwiaW4gYixtPXRoaXMsbj17fSxvPWEuc3R5bGUscD1hLm5vZGVUeXBlJiZkYShhKSxxPVcuZ2V0KGEsXCJmeHNob3dcIik7Yy5xdWV1ZXx8KGc9ci5fcXVldWVIb29rcyhhLFwiZnhcIiksbnVsbD09Zy51bnF1ZXVlZCYmKGcudW5xdWV1ZWQ9MCxoPWcuZW1wdHkuZmlyZSxnLmVtcHR5LmZpcmU9ZnVuY3Rpb24oKXtnLnVucXVldWVkfHxoKCl9KSxnLnVucXVldWVkKyssbS5hbHdheXMoZnVuY3Rpb24oKXttLmFsd2F5cyhmdW5jdGlvbigpe2cudW5xdWV1ZWQtLSxyLnF1ZXVlKGEsXCJmeFwiKS5sZW5ndGh8fGcuZW1wdHkuZmlyZSgpfSl9KSk7Zm9yKGQgaW4gYilpZihlPWJbZF0sY2IudGVzdChlKSl7aWYoZGVsZXRlIGJbZF0sZj1mfHxcInRvZ2dsZVwiPT09ZSxlPT09KHA/XCJoaWRlXCI6XCJzaG93XCIpKXtpZihcInNob3dcIiE9PWV8fCFxfHx2b2lkIDA9PT1xW2RdKWNvbnRpbnVlO3A9ITB9bltkXT1xJiZxW2RdfHxyLnN0eWxlKGEsZCl9aWYoaT0hci5pc0VtcHR5T2JqZWN0KGIpLGl8fCFyLmlzRW1wdHlPYmplY3Qobikpe2wmJjE9PT1hLm5vZGVUeXBlJiYoYy5vdmVyZmxvdz1bby5vdmVyZmxvdyxvLm92ZXJmbG93WCxvLm92ZXJmbG93WV0saj1xJiZxLmRpc3BsYXksbnVsbD09aiYmKGo9Vy5nZXQoYSxcImRpc3BsYXlcIikpLGs9ci5jc3MoYSxcImRpc3BsYXlcIiksXCJub25lXCI9PT1rJiYoaj9rPWo6KGlhKFthXSwhMCksaj1hLnN0eWxlLmRpc3BsYXl8fGosaz1yLmNzcyhhLFwiZGlzcGxheVwiKSxpYShbYV0pKSksKFwiaW5saW5lXCI9PT1rfHxcImlubGluZS1ibG9ja1wiPT09ayYmbnVsbCE9aikmJlwibm9uZVwiPT09ci5jc3MoYSxcImZsb2F0XCIpJiYoaXx8KG0uZG9uZShmdW5jdGlvbigpe28uZGlzcGxheT1qfSksbnVsbD09aiYmKGs9by5kaXNwbGF5LGo9XCJub25lXCI9PT1rP1wiXCI6aykpLG8uZGlzcGxheT1cImlubGluZS1ibG9ja1wiKSksYy5vdmVyZmxvdyYmKG8ub3ZlcmZsb3c9XCJoaWRkZW5cIixtLmFsd2F5cyhmdW5jdGlvbigpe28ub3ZlcmZsb3c9Yy5vdmVyZmxvd1swXSxvLm92ZXJmbG93WD1jLm92ZXJmbG93WzFdLG8ub3ZlcmZsb3dZPWMub3ZlcmZsb3dbMl19KSksaT0hMTtmb3IoZCBpbiBuKWl8fChxP1wiaGlkZGVuXCJpbiBxJiYocD1xLmhpZGRlbik6cT1XLmFjY2VzcyhhLFwiZnhzaG93XCIse2Rpc3BsYXk6an0pLGYmJihxLmhpZGRlbj0hcCkscCYmaWEoW2FdLCEwKSxtLmRvbmUoZnVuY3Rpb24oKXtwfHxpYShbYV0pLFcucmVtb3ZlKGEsXCJmeHNob3dcIik7Zm9yKGQgaW4gbilyLnN0eWxlKGEsZCxuW2RdKX0pKSxpPWhiKHA/cVtkXTowLGQsbSksZCBpbiBxfHwocVtkXT1pLnN0YXJ0LHAmJihpLmVuZD1pLnN0YXJ0LGkuc3RhcnQ9MCkpfX1mdW5jdGlvbiBqYihhLGIpe3ZhciBjLGQsZSxmLGc7Zm9yKGMgaW4gYSlpZihkPXIuY2FtZWxDYXNlKGMpLGU9YltkXSxmPWFbY10sQXJyYXkuaXNBcnJheShmKSYmKGU9ZlsxXSxmPWFbY109ZlswXSksYyE9PWQmJihhW2RdPWYsZGVsZXRlIGFbY10pLGc9ci5jc3NIb29rc1tkXSxnJiZcImV4cGFuZFwiaW4gZyl7Zj1nLmV4cGFuZChmKSxkZWxldGUgYVtkXTtmb3IoYyBpbiBmKWMgaW4gYXx8KGFbY109ZltjXSxiW2NdPWUpfWVsc2UgYltkXT1lfWZ1bmN0aW9uIGtiKGEsYixjKXt2YXIgZCxlLGY9MCxnPWtiLnByZWZpbHRlcnMubGVuZ3RoLGg9ci5EZWZlcnJlZCgpLmFsd2F5cyhmdW5jdGlvbigpe2RlbGV0ZSBpLmVsZW19KSxpPWZ1bmN0aW9uKCl7aWYoZSlyZXR1cm4hMTtmb3IodmFyIGI9YWJ8fGZiKCksYz1NYXRoLm1heCgwLGouc3RhcnRUaW1lK2ouZHVyYXRpb24tYiksZD1jL2ouZHVyYXRpb258fDAsZj0xLWQsZz0wLGk9ai50d2VlbnMubGVuZ3RoO2c8aTtnKyspai50d2VlbnNbZ10ucnVuKGYpO3JldHVybiBoLm5vdGlmeVdpdGgoYSxbaixmLGNdKSxmPDEmJmk/YzooaXx8aC5ub3RpZnlXaXRoKGEsW2osMSwwXSksaC5yZXNvbHZlV2l0aChhLFtqXSksITEpfSxqPWgucHJvbWlzZSh7ZWxlbTphLHByb3BzOnIuZXh0ZW5kKHt9LGIpLG9wdHM6ci5leHRlbmQoITAse3NwZWNpYWxFYXNpbmc6e30sZWFzaW5nOnIuZWFzaW5nLl9kZWZhdWx0fSxjKSxvcmlnaW5hbFByb3BlcnRpZXM6YixvcmlnaW5hbE9wdGlvbnM6YyxzdGFydFRpbWU6YWJ8fGZiKCksZHVyYXRpb246Yy5kdXJhdGlvbix0d2VlbnM6W10sY3JlYXRlVHdlZW46ZnVuY3Rpb24oYixjKXt2YXIgZD1yLlR3ZWVuKGEsai5vcHRzLGIsYyxqLm9wdHMuc3BlY2lhbEVhc2luZ1tiXXx8ai5vcHRzLmVhc2luZyk7cmV0dXJuIGoudHdlZW5zLnB1c2goZCksZH0sc3RvcDpmdW5jdGlvbihiKXt2YXIgYz0wLGQ9Yj9qLnR3ZWVucy5sZW5ndGg6MDtpZihlKXJldHVybiB0aGlzO2ZvcihlPSEwO2M8ZDtjKyspai50d2VlbnNbY10ucnVuKDEpO3JldHVybiBiPyhoLm5vdGlmeVdpdGgoYSxbaiwxLDBdKSxoLnJlc29sdmVXaXRoKGEsW2osYl0pKTpoLnJlamVjdFdpdGgoYSxbaixiXSksdGhpc319KSxrPWoucHJvcHM7Zm9yKGpiKGssai5vcHRzLnNwZWNpYWxFYXNpbmcpO2Y8ZztmKyspaWYoZD1rYi5wcmVmaWx0ZXJzW2ZdLmNhbGwoaixhLGssai5vcHRzKSlyZXR1cm4gci5pc0Z1bmN0aW9uKGQuc3RvcCkmJihyLl9xdWV1ZUhvb2tzKGouZWxlbSxqLm9wdHMucXVldWUpLnN0b3A9ci5wcm94eShkLnN0b3AsZCkpLGQ7cmV0dXJuIHIubWFwKGssaGIsaiksci5pc0Z1bmN0aW9uKGoub3B0cy5zdGFydCkmJmoub3B0cy5zdGFydC5jYWxsKGEsaiksai5wcm9ncmVzcyhqLm9wdHMucHJvZ3Jlc3MpLmRvbmUoai5vcHRzLmRvbmUsai5vcHRzLmNvbXBsZXRlKS5mYWlsKGoub3B0cy5mYWlsKS5hbHdheXMoai5vcHRzLmFsd2F5cyksci5meC50aW1lcihyLmV4dGVuZChpLHtlbGVtOmEsYW5pbTpqLHF1ZXVlOmoub3B0cy5xdWV1ZX0pKSxqfXIuQW5pbWF0aW9uPXIuZXh0ZW5kKGtiLHt0d2VlbmVyczp7XCIqXCI6W2Z1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5jcmVhdGVUd2VlbihhLGIpO3JldHVybiBmYShjLmVsZW0sYSxiYS5leGVjKGIpLGMpLGN9XX0sdHdlZW5lcjpmdW5jdGlvbihhLGIpe3IuaXNGdW5jdGlvbihhKT8oYj1hLGE9W1wiKlwiXSk6YT1hLm1hdGNoKEwpO2Zvcih2YXIgYyxkPTAsZT1hLmxlbmd0aDtkPGU7ZCsrKWM9YVtkXSxrYi50d2VlbmVyc1tjXT1rYi50d2VlbmVyc1tjXXx8W10sa2IudHdlZW5lcnNbY10udW5zaGlmdChiKX0scHJlZmlsdGVyczpbaWJdLHByZWZpbHRlcjpmdW5jdGlvbihhLGIpe2I/a2IucHJlZmlsdGVycy51bnNoaWZ0KGEpOmtiLnByZWZpbHRlcnMucHVzaChhKX19KSxyLnNwZWVkPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hJiZcIm9iamVjdFwiPT10eXBlb2YgYT9yLmV4dGVuZCh7fSxhKTp7Y29tcGxldGU6Y3x8IWMmJmJ8fHIuaXNGdW5jdGlvbihhKSYmYSxkdXJhdGlvbjphLGVhc2luZzpjJiZifHxiJiYhci5pc0Z1bmN0aW9uKGIpJiZifTtyZXR1cm4gci5meC5vZmY/ZC5kdXJhdGlvbj0wOlwibnVtYmVyXCIhPXR5cGVvZiBkLmR1cmF0aW9uJiYoZC5kdXJhdGlvbiBpbiByLmZ4LnNwZWVkcz9kLmR1cmF0aW9uPXIuZnguc3BlZWRzW2QuZHVyYXRpb25dOmQuZHVyYXRpb249ci5meC5zcGVlZHMuX2RlZmF1bHQpLG51bGwhPWQucXVldWUmJmQucXVldWUhPT0hMHx8KGQucXVldWU9XCJmeFwiKSxkLm9sZD1kLmNvbXBsZXRlLGQuY29tcGxldGU9ZnVuY3Rpb24oKXtyLmlzRnVuY3Rpb24oZC5vbGQpJiZkLm9sZC5jYWxsKHRoaXMpLGQucXVldWUmJnIuZGVxdWV1ZSh0aGlzLGQucXVldWUpfSxkfSxyLmZuLmV4dGVuZCh7ZmFkZVRvOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLmZpbHRlcihkYSkuY3NzKFwib3BhY2l0eVwiLDApLnNob3coKS5lbmQoKS5hbmltYXRlKHtvcGFjaXR5OmJ9LGEsYyxkKX0sYW5pbWF0ZTpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1yLmlzRW1wdHlPYmplY3QoYSksZj1yLnNwZWVkKGIsYyxkKSxnPWZ1bmN0aW9uKCl7dmFyIGI9a2IodGhpcyxyLmV4dGVuZCh7fSxhKSxmKTsoZXx8Vy5nZXQodGhpcyxcImZpbmlzaFwiKSkmJmIuc3RvcCghMCl9O3JldHVybiBnLmZpbmlzaD1nLGV8fGYucXVldWU9PT0hMT90aGlzLmVhY2goZyk6dGhpcy5xdWV1ZShmLnF1ZXVlLGcpfSxzdG9wOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1mdW5jdGlvbihhKXt2YXIgYj1hLnN0b3A7ZGVsZXRlIGEuc3RvcCxiKGMpfTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgYSYmKGM9YixiPWEsYT12b2lkIDApLGImJmEhPT0hMSYmdGhpcy5xdWV1ZShhfHxcImZ4XCIsW10pLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBiPSEwLGU9bnVsbCE9YSYmYStcInF1ZXVlSG9va3NcIixmPXIudGltZXJzLGc9Vy5nZXQodGhpcyk7aWYoZSlnW2VdJiZnW2VdLnN0b3AmJmQoZ1tlXSk7ZWxzZSBmb3IoZSBpbiBnKWdbZV0mJmdbZV0uc3RvcCYmZGIudGVzdChlKSYmZChnW2VdKTtmb3IoZT1mLmxlbmd0aDtlLS07KWZbZV0uZWxlbSE9PXRoaXN8fG51bGwhPWEmJmZbZV0ucXVldWUhPT1hfHwoZltlXS5hbmltLnN0b3AoYyksYj0hMSxmLnNwbGljZShlLDEpKTshYiYmY3x8ci5kZXF1ZXVlKHRoaXMsYSl9KX0sZmluaXNoOmZ1bmN0aW9uKGEpe3JldHVybiBhIT09ITEmJihhPWF8fFwiZnhcIiksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGIsYz1XLmdldCh0aGlzKSxkPWNbYStcInF1ZXVlXCJdLGU9Y1thK1wicXVldWVIb29rc1wiXSxmPXIudGltZXJzLGc9ZD9kLmxlbmd0aDowO2ZvcihjLmZpbmlzaD0hMCxyLnF1ZXVlKHRoaXMsYSxbXSksZSYmZS5zdG9wJiZlLnN0b3AuY2FsbCh0aGlzLCEwKSxiPWYubGVuZ3RoO2ItLTspZltiXS5lbGVtPT09dGhpcyYmZltiXS5xdWV1ZT09PWEmJihmW2JdLmFuaW0uc3RvcCghMCksZi5zcGxpY2UoYiwxKSk7Zm9yKGI9MDtiPGc7YisrKWRbYl0mJmRbYl0uZmluaXNoJiZkW2JdLmZpbmlzaC5jYWxsKHRoaXMpO2RlbGV0ZSBjLmZpbmlzaH0pfX0pLHIuZWFjaChbXCJ0b2dnbGVcIixcInNob3dcIixcImhpZGVcIl0sZnVuY3Rpb24oYSxiKXt2YXIgYz1yLmZuW2JdO3IuZm5bYl09ZnVuY3Rpb24oYSxkLGUpe3JldHVybiBudWxsPT1hfHxcImJvb2xlYW5cIj09dHlwZW9mIGE/Yy5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKGdiKGIsITApLGEsZCxlKX19KSxyLmVhY2goe3NsaWRlRG93bjpnYihcInNob3dcIiksc2xpZGVVcDpnYihcImhpZGVcIiksc2xpZGVUb2dnbGU6Z2IoXCJ0b2dnbGVcIiksZmFkZUluOntvcGFjaXR5Olwic2hvd1wifSxmYWRlT3V0OntvcGFjaXR5OlwiaGlkZVwifSxmYWRlVG9nZ2xlOntvcGFjaXR5OlwidG9nZ2xlXCJ9fSxmdW5jdGlvbihhLGIpe3IuZm5bYV09ZnVuY3Rpb24oYSxjLGQpe3JldHVybiB0aGlzLmFuaW1hdGUoYixhLGMsZCl9fSksci50aW1lcnM9W10sci5meC50aWNrPWZ1bmN0aW9uKCl7dmFyIGEsYj0wLGM9ci50aW1lcnM7Zm9yKGFiPXIubm93KCk7YjxjLmxlbmd0aDtiKyspYT1jW2JdLGEoKXx8Y1tiXSE9PWF8fGMuc3BsaWNlKGItLSwxKTtjLmxlbmd0aHx8ci5meC5zdG9wKCksYWI9dm9pZCAwfSxyLmZ4LnRpbWVyPWZ1bmN0aW9uKGEpe3IudGltZXJzLnB1c2goYSksci5meC5zdGFydCgpfSxyLmZ4LmludGVydmFsPTEzLHIuZnguc3RhcnQ9ZnVuY3Rpb24oKXtiYnx8KGJiPSEwLGViKCkpfSxyLmZ4LnN0b3A9ZnVuY3Rpb24oKXtiYj1udWxsfSxyLmZ4LnNwZWVkcz17c2xvdzo2MDAsZmFzdDoyMDAsX2RlZmF1bHQ6NDAwfSxyLmZuLmRlbGF5PWZ1bmN0aW9uKGIsYyl7cmV0dXJuIGI9ci5meD9yLmZ4LnNwZWVkc1tiXXx8YjpiLGM9Y3x8XCJmeFwiLHRoaXMucXVldWUoYyxmdW5jdGlvbihjLGQpe3ZhciBlPWEuc2V0VGltZW91dChjLGIpO2Quc3RvcD1mdW5jdGlvbigpe2EuY2xlYXJUaW1lb3V0KGUpfX0pfSxmdW5jdGlvbigpe3ZhciBhPWQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLGI9ZC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpLGM9Yi5hcHBlbmRDaGlsZChkLmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpO2EudHlwZT1cImNoZWNrYm94XCIsby5jaGVja09uPVwiXCIhPT1hLnZhbHVlLG8ub3B0U2VsZWN0ZWQ9Yy5zZWxlY3RlZCxhPWQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLGEudmFsdWU9XCJ0XCIsYS50eXBlPVwicmFkaW9cIixvLnJhZGlvVmFsdWU9XCJ0XCI9PT1hLnZhbHVlfSgpO3ZhciBsYixtYj1yLmV4cHIuYXR0ckhhbmRsZTtyLmZuLmV4dGVuZCh7YXR0cjpmdW5jdGlvbihhLGIpe3JldHVybiBUKHRoaXMsci5hdHRyLGEsYixhcmd1bWVudHMubGVuZ3RoPjEpfSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtyLnJlbW92ZUF0dHIodGhpcyxhKX0pfX0pLHIuZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9YS5ub2RlVHlwZTtpZigzIT09ZiYmOCE9PWYmJjIhPT1mKXJldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBhLmdldEF0dHJpYnV0ZT9yLnByb3AoYSxiLGMpOigxPT09ZiYmci5pc1hNTERvYyhhKXx8KGU9ci5hdHRySG9va3NbYi50b0xvd2VyQ2FzZSgpXXx8KHIuZXhwci5tYXRjaC5ib29sLnRlc3QoYik/bGI6dm9pZCAwKSksdm9pZCAwIT09Yz9udWxsPT09Yz92b2lkIHIucmVtb3ZlQXR0cihhLGIpOmUmJlwic2V0XCJpbiBlJiZ2b2lkIDAhPT0oZD1lLnNldChhLGMsYikpP2Q6KGEuc2V0QXR0cmlidXRlKGIsYytcIlwiKSxjKTplJiZcImdldFwiaW4gZSYmbnVsbCE9PShkPWUuZ2V0KGEsYikpP2Q6KGQ9ci5maW5kLmF0dHIoYSxiKSxcbm51bGw9PWQ/dm9pZCAwOmQpKX0sYXR0ckhvb2tzOnt0eXBlOntzZXQ6ZnVuY3Rpb24oYSxiKXtpZighby5yYWRpb1ZhbHVlJiZcInJhZGlvXCI9PT1iJiZCKGEsXCJpbnB1dFwiKSl7dmFyIGM9YS52YWx1ZTtyZXR1cm4gYS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsYiksYyYmKGEudmFsdWU9YyksYn19fX0scmVtb3ZlQXR0cjpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9MCxlPWImJmIubWF0Y2goTCk7aWYoZSYmMT09PWEubm9kZVR5cGUpd2hpbGUoYz1lW2QrK10pYS5yZW1vdmVBdHRyaWJ1dGUoYyl9fSksbGI9e3NldDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGI9PT0hMT9yLnJlbW92ZUF0dHIoYSxjKTphLnNldEF0dHJpYnV0ZShjLGMpLGN9fSxyLmVhY2goci5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cXHcrL2cpLGZ1bmN0aW9uKGEsYil7dmFyIGM9bWJbYl18fHIuZmluZC5hdHRyO21iW2JdPWZ1bmN0aW9uKGEsYixkKXt2YXIgZSxmLGc9Yi50b0xvd2VyQ2FzZSgpO3JldHVybiBkfHwoZj1tYltnXSxtYltnXT1lLGU9bnVsbCE9YyhhLGIsZCk/ZzpudWxsLG1iW2ddPWYpLGV9fSk7dmFyIG5iPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksb2I9L14oPzphfGFyZWEpJC9pO3IuZm4uZXh0ZW5kKHtwcm9wOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFQodGhpcyxyLnByb3AsYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZVByb3A6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2RlbGV0ZSB0aGlzW3IucHJvcEZpeFthXXx8YV19KX19KSxyLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmPWEubm9kZVR5cGU7aWYoMyE9PWYmJjghPT1mJiYyIT09ZilyZXR1cm4gMT09PWYmJnIuaXNYTUxEb2MoYSl8fChiPXIucHJvcEZpeFtiXXx8YixlPXIucHJvcEhvb2tzW2JdKSx2b2lkIDAhPT1jP2UmJlwic2V0XCJpbiBlJiZ2b2lkIDAhPT0oZD1lLnNldChhLGMsYikpP2Q6YVtiXT1jOmUmJlwiZ2V0XCJpbiBlJiZudWxsIT09KGQ9ZS5nZXQoYSxiKSk/ZDphW2JdfSxwcm9wSG9va3M6e3RhYkluZGV4OntnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9ci5maW5kLmF0dHIoYSxcInRhYmluZGV4XCIpO3JldHVybiBiP3BhcnNlSW50KGIsMTApOm5iLnRlc3QoYS5ub2RlTmFtZSl8fG9iLnRlc3QoYS5ub2RlTmFtZSkmJmEuaHJlZj8wOi0xfX19LHByb3BGaXg6e1wiZm9yXCI6XCJodG1sRm9yXCIsXCJjbGFzc1wiOlwiY2xhc3NOYW1lXCJ9fSksby5vcHRTZWxlY3RlZHx8KHIucHJvcEhvb2tzLnNlbGVjdGVkPXtnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5wYXJlbnROb2RlO3JldHVybiBiJiZiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LG51bGx9LHNldDpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudE5vZGU7YiYmKGIuc2VsZWN0ZWRJbmRleCxiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4KX19KSxyLmVhY2goW1widGFiSW5kZXhcIixcInJlYWRPbmx5XCIsXCJtYXhMZW5ndGhcIixcImNlbGxTcGFjaW5nXCIsXCJjZWxsUGFkZGluZ1wiLFwicm93U3BhblwiLFwiY29sU3BhblwiLFwidXNlTWFwXCIsXCJmcmFtZUJvcmRlclwiLFwiY29udGVudEVkaXRhYmxlXCJdLGZ1bmN0aW9uKCl7ci5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV09dGhpc30pO2Z1bmN0aW9uIHBiKGEpe3ZhciBiPWEubWF0Y2goTCl8fFtdO3JldHVybiBiLmpvaW4oXCIgXCIpfWZ1bmN0aW9uIHFiKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZSYmYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIn1yLmZuLmV4dGVuZCh7YWRkQ2xhc3M6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGgsaT0wO2lmKHIuaXNGdW5jdGlvbihhKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGIpe3IodGhpcykuYWRkQ2xhc3MoYS5jYWxsKHRoaXMsYixxYih0aGlzKSkpfSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEmJmEpe2I9YS5tYXRjaChMKXx8W107d2hpbGUoYz10aGlzW2krK10paWYoZT1xYihjKSxkPTE9PT1jLm5vZGVUeXBlJiZcIiBcIitwYihlKStcIiBcIil7Zz0wO3doaWxlKGY9YltnKytdKWQuaW5kZXhPZihcIiBcIitmK1wiIFwiKTwwJiYoZCs9ZitcIiBcIik7aD1wYihkKSxlIT09aCYmYy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGgpfX1yZXR1cm4gdGhpc30scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGgsaT0wO2lmKHIuaXNGdW5jdGlvbihhKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGIpe3IodGhpcykucmVtb3ZlQ2xhc3MoYS5jYWxsKHRoaXMsYixxYih0aGlzKSkpfSk7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuYXR0cihcImNsYXNzXCIsXCJcIik7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEmJmEpe2I9YS5tYXRjaChMKXx8W107d2hpbGUoYz10aGlzW2krK10paWYoZT1xYihjKSxkPTE9PT1jLm5vZGVUeXBlJiZcIiBcIitwYihlKStcIiBcIil7Zz0wO3doaWxlKGY9YltnKytdKXdoaWxlKGQuaW5kZXhPZihcIiBcIitmK1wiIFwiKT4tMSlkPWQucmVwbGFjZShcIiBcIitmK1wiIFwiLFwiIFwiKTtoPXBiKGQpLGUhPT1oJiZjLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsaCl9fXJldHVybiB0aGlzfSx0b2dnbGVDbGFzczpmdW5jdGlvbihhLGIpe3ZhciBjPXR5cGVvZiBhO3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgYiYmXCJzdHJpbmdcIj09PWM/Yj90aGlzLmFkZENsYXNzKGEpOnRoaXMucmVtb3ZlQ2xhc3MoYSk6ci5pc0Z1bmN0aW9uKGEpP3RoaXMuZWFjaChmdW5jdGlvbihjKXtyKHRoaXMpLnRvZ2dsZUNsYXNzKGEuY2FsbCh0aGlzLGMscWIodGhpcyksYiksYil9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYixkLGUsZjtpZihcInN0cmluZ1wiPT09Yyl7ZD0wLGU9cih0aGlzKSxmPWEubWF0Y2goTCl8fFtdO3doaWxlKGI9ZltkKytdKWUuaGFzQ2xhc3MoYik/ZS5yZW1vdmVDbGFzcyhiKTplLmFkZENsYXNzKGIpfWVsc2Ugdm9pZCAwIT09YSYmXCJib29sZWFuXCIhPT1jfHwoYj1xYih0aGlzKSxiJiZXLnNldCh0aGlzLFwiX19jbGFzc05hbWVfX1wiLGIpLHRoaXMuc2V0QXR0cmlidXRlJiZ0aGlzLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsYnx8YT09PSExP1wiXCI6Vy5nZXQodGhpcyxcIl9fY2xhc3NOYW1lX19cIil8fFwiXCIpKX0pfSxoYXNDbGFzczpmdW5jdGlvbihhKXt2YXIgYixjLGQ9MDtiPVwiIFwiK2ErXCIgXCI7d2hpbGUoYz10aGlzW2QrK10paWYoMT09PWMubm9kZVR5cGUmJihcIiBcIitwYihxYihjKSkrXCIgXCIpLmluZGV4T2YoYik+LTEpcmV0dXJuITA7cmV0dXJuITF9fSk7dmFyIHJiPS9cXHIvZztyLmZuLmV4dGVuZCh7dmFsOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlPXRoaXNbMF07e2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQ9ci5pc0Z1bmN0aW9uKGEpLHRoaXMuZWFjaChmdW5jdGlvbihjKXt2YXIgZTsxPT09dGhpcy5ub2RlVHlwZSYmKGU9ZD9hLmNhbGwodGhpcyxjLHIodGhpcykudmFsKCkpOmEsbnVsbD09ZT9lPVwiXCI6XCJudW1iZXJcIj09dHlwZW9mIGU/ZSs9XCJcIjpBcnJheS5pc0FycmF5KGUpJiYoZT1yLm1hcChlLGZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP1wiXCI6YStcIlwifSkpLGI9ci52YWxIb29rc1t0aGlzLnR5cGVdfHxyLnZhbEhvb2tzW3RoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0sYiYmXCJzZXRcImluIGImJnZvaWQgMCE9PWIuc2V0KHRoaXMsZSxcInZhbHVlXCIpfHwodGhpcy52YWx1ZT1lKSl9KTtpZihlKXJldHVybiBiPXIudmFsSG9va3NbZS50eXBlXXx8ci52YWxIb29rc1tlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldLGImJlwiZ2V0XCJpbiBiJiZ2b2lkIDAhPT0oYz1iLmdldChlLFwidmFsdWVcIikpP2M6KGM9ZS52YWx1ZSxcInN0cmluZ1wiPT10eXBlb2YgYz9jLnJlcGxhY2UocmIsXCJcIik6bnVsbD09Yz9cIlwiOmMpfX19KSxyLmV4dGVuZCh7dmFsSG9va3M6e29wdGlvbjp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiPXIuZmluZC5hdHRyKGEsXCJ2YWx1ZVwiKTtyZXR1cm4gbnVsbCE9Yj9iOnBiKHIudGV4dChhKSl9fSxzZWxlY3Q6e2dldDpmdW5jdGlvbihhKXt2YXIgYixjLGQsZT1hLm9wdGlvbnMsZj1hLnNlbGVjdGVkSW5kZXgsZz1cInNlbGVjdC1vbmVcIj09PWEudHlwZSxoPWc/bnVsbDpbXSxpPWc/ZisxOmUubGVuZ3RoO2ZvcihkPWY8MD9pOmc/ZjowO2Q8aTtkKyspaWYoYz1lW2RdLChjLnNlbGVjdGVkfHxkPT09ZikmJiFjLmRpc2FibGVkJiYoIWMucGFyZW50Tm9kZS5kaXNhYmxlZHx8IUIoYy5wYXJlbnROb2RlLFwib3B0Z3JvdXBcIikpKXtpZihiPXIoYykudmFsKCksZylyZXR1cm4gYjtoLnB1c2goYil9cmV0dXJuIGh9LHNldDpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZT1hLm9wdGlvbnMsZj1yLm1ha2VBcnJheShiKSxnPWUubGVuZ3RoO3doaWxlKGctLSlkPWVbZ10sKGQuc2VsZWN0ZWQ9ci5pbkFycmF5KHIudmFsSG9va3Mub3B0aW9uLmdldChkKSxmKT4tMSkmJihjPSEwKTtyZXR1cm4gY3x8KGEuc2VsZWN0ZWRJbmRleD0tMSksZn19fX0pLHIuZWFjaChbXCJyYWRpb1wiLFwiY2hlY2tib3hcIl0sZnVuY3Rpb24oKXtyLnZhbEhvb2tzW3RoaXNdPXtzZXQ6ZnVuY3Rpb24oYSxiKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLmNoZWNrZWQ9ci5pbkFycmF5KHIoYSkudmFsKCksYik+LTF9fSxvLmNoZWNrT258fChyLnZhbEhvb2tzW3RoaXNdLmdldD1mdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09PWEuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik/XCJvblwiOmEudmFsdWV9KX0pO3ZhciBzYj0vXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87ci5leHRlbmQoci5ldmVudCx7dHJpZ2dlcjpmdW5jdGlvbihiLGMsZSxmKXt2YXIgZyxoLGksaixrLG0sbixvPVtlfHxkXSxwPWwuY2FsbChiLFwidHlwZVwiKT9iLnR5cGU6YixxPWwuY2FsbChiLFwibmFtZXNwYWNlXCIpP2IubmFtZXNwYWNlLnNwbGl0KFwiLlwiKTpbXTtpZihoPWk9ZT1lfHxkLDMhPT1lLm5vZGVUeXBlJiY4IT09ZS5ub2RlVHlwZSYmIXNiLnRlc3QocCtyLmV2ZW50LnRyaWdnZXJlZCkmJihwLmluZGV4T2YoXCIuXCIpPi0xJiYocT1wLnNwbGl0KFwiLlwiKSxwPXEuc2hpZnQoKSxxLnNvcnQoKSksaz1wLmluZGV4T2YoXCI6XCIpPDAmJlwib25cIitwLGI9YltyLmV4cGFuZG9dP2I6bmV3IHIuRXZlbnQocCxcIm9iamVjdFwiPT10eXBlb2YgYiYmYiksYi5pc1RyaWdnZXI9Zj8yOjMsYi5uYW1lc3BhY2U9cS5qb2luKFwiLlwiKSxiLnJuYW1lc3BhY2U9Yi5uYW1lc3BhY2U/bmV3IFJlZ0V4cChcIihefFxcXFwuKVwiK3Euam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpK1wiKFxcXFwufCQpXCIpOm51bGwsYi5yZXN1bHQ9dm9pZCAwLGIudGFyZ2V0fHwoYi50YXJnZXQ9ZSksYz1udWxsPT1jP1tiXTpyLm1ha2VBcnJheShjLFtiXSksbj1yLmV2ZW50LnNwZWNpYWxbcF18fHt9LGZ8fCFuLnRyaWdnZXJ8fG4udHJpZ2dlci5hcHBseShlLGMpIT09ITEpKXtpZighZiYmIW4ubm9CdWJibGUmJiFyLmlzV2luZG93KGUpKXtmb3Ioaj1uLmRlbGVnYXRlVHlwZXx8cCxzYi50ZXN0KGorcCl8fChoPWgucGFyZW50Tm9kZSk7aDtoPWgucGFyZW50Tm9kZSlvLnB1c2goaCksaT1oO2k9PT0oZS5vd25lckRvY3VtZW50fHxkKSYmby5wdXNoKGkuZGVmYXVsdFZpZXd8fGkucGFyZW50V2luZG93fHxhKX1nPTA7d2hpbGUoKGg9b1tnKytdKSYmIWIuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSliLnR5cGU9Zz4xP2o6bi5iaW5kVHlwZXx8cCxtPShXLmdldChoLFwiZXZlbnRzXCIpfHx7fSlbYi50eXBlXSYmVy5nZXQoaCxcImhhbmRsZVwiKSxtJiZtLmFwcGx5KGgsYyksbT1rJiZoW2tdLG0mJm0uYXBwbHkmJlUoaCkmJihiLnJlc3VsdD1tLmFwcGx5KGgsYyksYi5yZXN1bHQ9PT0hMSYmYi5wcmV2ZW50RGVmYXVsdCgpKTtyZXR1cm4gYi50eXBlPXAsZnx8Yi5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8bi5fZGVmYXVsdCYmbi5fZGVmYXVsdC5hcHBseShvLnBvcCgpLGMpIT09ITF8fCFVKGUpfHxrJiZyLmlzRnVuY3Rpb24oZVtwXSkmJiFyLmlzV2luZG93KGUpJiYoaT1lW2tdLGkmJihlW2tdPW51bGwpLHIuZXZlbnQudHJpZ2dlcmVkPXAsZVtwXSgpLHIuZXZlbnQudHJpZ2dlcmVkPXZvaWQgMCxpJiYoZVtrXT1pKSksYi5yZXN1bHR9fSxzaW11bGF0ZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9ci5leHRlbmQobmV3IHIuRXZlbnQsYyx7dHlwZTphLGlzU2ltdWxhdGVkOiEwfSk7ci5ldmVudC50cmlnZ2VyKGQsbnVsbCxiKX19KSxyLmZuLmV4dGVuZCh7dHJpZ2dlcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtyLmV2ZW50LnRyaWdnZXIoYSxiLHRoaXMpfSl9LHRyaWdnZXJIYW5kbGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpc1swXTtpZihjKXJldHVybiByLmV2ZW50LnRyaWdnZXIoYSxiLGMsITApfX0pLHIuZWFjaChcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIGNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oYSxiKXtyLmZuW2JdPWZ1bmN0aW9uKGEsYyl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MD90aGlzLm9uKGIsbnVsbCxhLGMpOnRoaXMudHJpZ2dlcihiKX19KSxyLmZuLmV4dGVuZCh7aG92ZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5tb3VzZWVudGVyKGEpLm1vdXNlbGVhdmUoYnx8YSl9fSksby5mb2N1c2luPVwib25mb2N1c2luXCJpbiBhLG8uZm9jdXNpbnx8ci5lYWNoKHtmb2N1czpcImZvY3VzaW5cIixibHVyOlwiZm9jdXNvdXRcIn0sZnVuY3Rpb24oYSxiKXt2YXIgYz1mdW5jdGlvbihhKXtyLmV2ZW50LnNpbXVsYXRlKGIsYS50YXJnZXQsci5ldmVudC5maXgoYSkpfTtyLmV2ZW50LnNwZWNpYWxbYl09e3NldHVwOmZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5vd25lckRvY3VtZW50fHx0aGlzLGU9Vy5hY2Nlc3MoZCxiKTtlfHxkLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKSxXLmFjY2VzcyhkLGIsKGV8fDApKzEpfSx0ZWFyZG93bjpmdW5jdGlvbigpe3ZhciBkPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyxlPVcuYWNjZXNzKGQsYiktMTtlP1cuYWNjZXNzKGQsYixlKTooZC5yZW1vdmVFdmVudExpc3RlbmVyKGEsYywhMCksVy5yZW1vdmUoZCxiKSl9fX0pO3ZhciB0Yj1hLmxvY2F0aW9uLHViPXIubm93KCksdmI9L1xcPy87ci5wYXJzZVhNTD1mdW5jdGlvbihiKXt2YXIgYztpZighYnx8XCJzdHJpbmdcIiE9dHlwZW9mIGIpcmV0dXJuIG51bGw7dHJ5e2M9KG5ldyBhLkRPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKGIsXCJ0ZXh0L3htbFwiKX1jYXRjaChkKXtjPXZvaWQgMH1yZXR1cm4gYyYmIWMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXJzZXJlcnJvclwiKS5sZW5ndGh8fHIuZXJyb3IoXCJJbnZhbGlkIFhNTDogXCIrYiksY307dmFyIHdiPS9cXFtcXF0kLyx4Yj0vXFxyP1xcbi9nLHliPS9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSx6Yj0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7ZnVuY3Rpb24gQWIoYSxiLGMsZCl7dmFyIGU7aWYoQXJyYXkuaXNBcnJheShiKSlyLmVhY2goYixmdW5jdGlvbihiLGUpe2N8fHdiLnRlc3QoYSk/ZChhLGUpOkFiKGErXCJbXCIrKFwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT1lP2I6XCJcIikrXCJdXCIsZSxjLGQpfSk7ZWxzZSBpZihjfHxcIm9iamVjdFwiIT09ci50eXBlKGIpKWQoYSxiKTtlbHNlIGZvcihlIGluIGIpQWIoYStcIltcIitlK1wiXVwiLGJbZV0sYyxkKX1yLnBhcmFtPWZ1bmN0aW9uKGEsYil7dmFyIGMsZD1bXSxlPWZ1bmN0aW9uKGEsYil7dmFyIGM9ci5pc0Z1bmN0aW9uKGIpP2IoKTpiO2RbZC5sZW5ndGhdPWVuY29kZVVSSUNvbXBvbmVudChhKStcIj1cIitlbmNvZGVVUklDb21wb25lbnQobnVsbD09Yz9cIlwiOmMpfTtpZihBcnJheS5pc0FycmF5KGEpfHxhLmpxdWVyeSYmIXIuaXNQbGFpbk9iamVjdChhKSlyLmVhY2goYSxmdW5jdGlvbigpe2UodGhpcy5uYW1lLHRoaXMudmFsdWUpfSk7ZWxzZSBmb3IoYyBpbiBhKUFiKGMsYVtjXSxiLGUpO3JldHVybiBkLmpvaW4oXCImXCIpfSxyLmZuLmV4dGVuZCh7c2VyaWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHIucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKX0sc2VyaWFsaXplQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT1yLnByb3AodGhpcyxcImVsZW1lbnRzXCIpO3JldHVybiBhP3IubWFrZUFycmF5KGEpOnRoaXN9KS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgYT10aGlzLnR5cGU7cmV0dXJuIHRoaXMubmFtZSYmIXIodGhpcykuaXMoXCI6ZGlzYWJsZWRcIikmJnpiLnRlc3QodGhpcy5ub2RlTmFtZSkmJiF5Yi50ZXN0KGEpJiYodGhpcy5jaGVja2VkfHwhamEudGVzdChhKSl9KS5tYXAoZnVuY3Rpb24oYSxiKXt2YXIgYz1yKHRoaXMpLnZhbCgpO3JldHVybiBudWxsPT1jP251bGw6QXJyYXkuaXNBcnJheShjKT9yLm1hcChjLGZ1bmN0aW9uKGEpe3JldHVybntuYW1lOmIubmFtZSx2YWx1ZTphLnJlcGxhY2UoeGIsXCJcXHJcXG5cIil9fSk6e25hbWU6Yi5uYW1lLHZhbHVlOmMucmVwbGFjZSh4YixcIlxcclxcblwiKX19KS5nZXQoKX19KTt2YXIgQmI9LyUyMC9nLENiPS8jLiokLyxEYj0vKFs/Jl0pXz1bXiZdKi8sRWI9L14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9nbSxGYj0vXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxHYj0vXig/OkdFVHxIRUFEKSQvLEhiPS9eXFwvXFwvLyxJYj17fSxKYj17fSxLYj1cIiovXCIuY29uY2F0KFwiKlwiKSxMYj1kLmNyZWF0ZUVsZW1lbnQoXCJhXCIpO0xiLmhyZWY9dGIuaHJlZjtmdW5jdGlvbiBNYihhKXtyZXR1cm4gZnVuY3Rpb24oYixjKXtcInN0cmluZ1wiIT10eXBlb2YgYiYmKGM9YixiPVwiKlwiKTt2YXIgZCxlPTAsZj1iLnRvTG93ZXJDYXNlKCkubWF0Y2goTCl8fFtdO2lmKHIuaXNGdW5jdGlvbihjKSl3aGlsZShkPWZbZSsrXSlcIitcIj09PWRbMF0/KGQ9ZC5zbGljZSgxKXx8XCIqXCIsKGFbZF09YVtkXXx8W10pLnVuc2hpZnQoYykpOihhW2RdPWFbZF18fFtdKS5wdXNoKGMpfX1mdW5jdGlvbiBOYihhLGIsYyxkKXt2YXIgZT17fSxmPWE9PT1KYjtmdW5jdGlvbiBnKGgpe3ZhciBpO3JldHVybiBlW2hdPSEwLHIuZWFjaChhW2hdfHxbXSxmdW5jdGlvbihhLGgpe3ZhciBqPWgoYixjLGQpO3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBqfHxmfHxlW2pdP2Y/IShpPWopOnZvaWQgMDooYi5kYXRhVHlwZXMudW5zaGlmdChqKSxnKGopLCExKX0pLGl9cmV0dXJuIGcoYi5kYXRhVHlwZXNbMF0pfHwhZVtcIipcIl0mJmcoXCIqXCIpfWZ1bmN0aW9uIE9iKGEsYil7dmFyIGMsZCxlPXIuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zfHx7fTtmb3IoYyBpbiBiKXZvaWQgMCE9PWJbY10mJigoZVtjXT9hOmR8fChkPXt9KSlbY109YltjXSk7cmV0dXJuIGQmJnIuZXh0ZW5kKCEwLGEsZCksYX1mdW5jdGlvbiBQYihhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLmNvbnRlbnRzLGk9YS5kYXRhVHlwZXM7d2hpbGUoXCIqXCI9PT1pWzBdKWkuc2hpZnQoKSx2b2lkIDA9PT1kJiYoZD1hLm1pbWVUeXBlfHxiLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpKTtpZihkKWZvcihlIGluIGgpaWYoaFtlXSYmaFtlXS50ZXN0KGQpKXtpLnVuc2hpZnQoZSk7YnJlYWt9aWYoaVswXWluIGMpZj1pWzBdO2Vsc2V7Zm9yKGUgaW4gYyl7aWYoIWlbMF18fGEuY29udmVydGVyc1tlK1wiIFwiK2lbMF1dKXtmPWU7YnJlYWt9Z3x8KGc9ZSl9Zj1mfHxnfWlmKGYpcmV0dXJuIGYhPT1pWzBdJiZpLnVuc2hpZnQoZiksY1tmXX1mdW5jdGlvbiBRYihhLGIsYyxkKXt2YXIgZSxmLGcsaCxpLGo9e30saz1hLmRhdGFUeXBlcy5zbGljZSgpO2lmKGtbMV0pZm9yKGcgaW4gYS5jb252ZXJ0ZXJzKWpbZy50b0xvd2VyQ2FzZSgpXT1hLmNvbnZlcnRlcnNbZ107Zj1rLnNoaWZ0KCk7d2hpbGUoZilpZihhLnJlc3BvbnNlRmllbGRzW2ZdJiYoY1thLnJlc3BvbnNlRmllbGRzW2ZdXT1iKSwhaSYmZCYmYS5kYXRhRmlsdGVyJiYoYj1hLmRhdGFGaWx0ZXIoYixhLmRhdGFUeXBlKSksaT1mLGY9ay5zaGlmdCgpKWlmKFwiKlwiPT09ZilmPWk7ZWxzZSBpZihcIipcIiE9PWkmJmkhPT1mKXtpZihnPWpbaStcIiBcIitmXXx8altcIiogXCIrZl0sIWcpZm9yKGUgaW4gailpZihoPWUuc3BsaXQoXCIgXCIpLGhbMV09PT1mJiYoZz1qW2krXCIgXCIraFswXV18fGpbXCIqIFwiK2hbMF1dKSl7Zz09PSEwP2c9altlXTpqW2VdIT09ITAmJihmPWhbMF0say51bnNoaWZ0KGhbMV0pKTticmVha31pZihnIT09ITApaWYoZyYmYVtcInRocm93c1wiXSliPWcoYik7ZWxzZSB0cnl7Yj1nKGIpfWNhdGNoKGwpe3JldHVybntzdGF0ZTpcInBhcnNlcmVycm9yXCIsZXJyb3I6Zz9sOlwiTm8gY29udmVyc2lvbiBmcm9tIFwiK2krXCIgdG8gXCIrZn19fXJldHVybntzdGF0ZTpcInN1Y2Nlc3NcIixkYXRhOmJ9fXIuZXh0ZW5kKHthY3RpdmU6MCxsYXN0TW9kaWZpZWQ6e30sZXRhZzp7fSxhamF4U2V0dGluZ3M6e3VybDp0Yi5ocmVmLHR5cGU6XCJHRVRcIixpc0xvY2FsOkZiLnRlc3QodGIucHJvdG9jb2wpLGdsb2JhbDohMCxwcm9jZXNzRGF0YTohMCxhc3luYzohMCxjb250ZW50VHlwZTpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLGFjY2VwdHM6e1wiKlwiOktiLHRleHQ6XCJ0ZXh0L3BsYWluXCIsaHRtbDpcInRleHQvaHRtbFwiLHhtbDpcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixqc29uOlwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJ9LGNvbnRlbnRzOnt4bWw6L1xcYnhtbFxcYi8saHRtbDovXFxiaHRtbC8sanNvbjovXFxianNvblxcYi99LHJlc3BvbnNlRmllbGRzOnt4bWw6XCJyZXNwb25zZVhNTFwiLHRleHQ6XCJyZXNwb25zZVRleHRcIixqc29uOlwicmVzcG9uc2VKU09OXCJ9LGNvbnZlcnRlcnM6e1wiKiB0ZXh0XCI6U3RyaW5nLFwidGV4dCBodG1sXCI6ITAsXCJ0ZXh0IGpzb25cIjpKU09OLnBhcnNlLFwidGV4dCB4bWxcIjpyLnBhcnNlWE1MfSxmbGF0T3B0aW9uczp7dXJsOiEwLGNvbnRleHQ6ITB9fSxhamF4U2V0dXA6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYj9PYihPYihhLHIuYWpheFNldHRpbmdzKSxiKTpPYihyLmFqYXhTZXR0aW5ncyxhKX0sYWpheFByZWZpbHRlcjpNYihJYiksYWpheFRyYW5zcG9ydDpNYihKYiksYWpheDpmdW5jdGlvbihiLGMpe1wib2JqZWN0XCI9PXR5cGVvZiBiJiYoYz1iLGI9dm9pZCAwKSxjPWN8fHt9O3ZhciBlLGYsZyxoLGksaixrLGwsbSxuLG89ci5hamF4U2V0dXAoe30sYykscD1vLmNvbnRleHR8fG8scT1vLmNvbnRleHQmJihwLm5vZGVUeXBlfHxwLmpxdWVyeSk/cihwKTpyLmV2ZW50LHM9ci5EZWZlcnJlZCgpLHQ9ci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSx1PW8uc3RhdHVzQ29kZXx8e30sdj17fSx3PXt9LHg9XCJjYW5jZWxlZFwiLHk9e3JlYWR5U3RhdGU6MCxnZXRSZXNwb25zZUhlYWRlcjpmdW5jdGlvbihhKXt2YXIgYjtpZihrKXtpZighaCl7aD17fTt3aGlsZShiPUViLmV4ZWMoZykpaFtiWzFdLnRvTG93ZXJDYXNlKCldPWJbMl19Yj1oW2EudG9Mb3dlckNhc2UoKV19cmV0dXJuIG51bGw9PWI/bnVsbDpifSxnZXRBbGxSZXNwb25zZUhlYWRlcnM6ZnVuY3Rpb24oKXtyZXR1cm4gaz9nOm51bGx9LHNldFJlcXVlc3RIZWFkZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbnVsbD09ayYmKGE9d1thLnRvTG93ZXJDYXNlKCldPXdbYS50b0xvd2VyQ2FzZSgpXXx8YSx2W2FdPWIpLHRoaXN9LG92ZXJyaWRlTWltZVR5cGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWsmJihvLm1pbWVUeXBlPWEpLHRoaXN9LHN0YXR1c0NvZGU6ZnVuY3Rpb24oYSl7dmFyIGI7aWYoYSlpZihrKXkuYWx3YXlzKGFbeS5zdGF0dXNdKTtlbHNlIGZvcihiIGluIGEpdVtiXT1bdVtiXSxhW2JdXTtyZXR1cm4gdGhpc30sYWJvcnQ6ZnVuY3Rpb24oYSl7dmFyIGI9YXx8eDtyZXR1cm4gZSYmZS5hYm9ydChiKSxBKDAsYiksdGhpc319O2lmKHMucHJvbWlzZSh5KSxvLnVybD0oKGJ8fG8udXJsfHx0Yi5ocmVmKStcIlwiKS5yZXBsYWNlKEhiLHRiLnByb3RvY29sK1wiLy9cIiksby50eXBlPWMubWV0aG9kfHxjLnR5cGV8fG8ubWV0aG9kfHxvLnR5cGUsby5kYXRhVHlwZXM9KG8uZGF0YVR5cGV8fFwiKlwiKS50b0xvd2VyQ2FzZSgpLm1hdGNoKEwpfHxbXCJcIl0sbnVsbD09by5jcm9zc0RvbWFpbil7aj1kLmNyZWF0ZUVsZW1lbnQoXCJhXCIpO3RyeXtqLmhyZWY9by51cmwsai5ocmVmPWouaHJlZixvLmNyb3NzRG9tYWluPUxiLnByb3RvY29sK1wiLy9cIitMYi5ob3N0IT1qLnByb3RvY29sK1wiLy9cIitqLmhvc3R9Y2F0Y2goeil7by5jcm9zc0RvbWFpbj0hMH19aWYoby5kYXRhJiZvLnByb2Nlc3NEYXRhJiZcInN0cmluZ1wiIT10eXBlb2Ygby5kYXRhJiYoby5kYXRhPXIucGFyYW0oby5kYXRhLG8udHJhZGl0aW9uYWwpKSxOYihJYixvLGMseSksaylyZXR1cm4geTtsPXIuZXZlbnQmJm8uZ2xvYmFsLGwmJjA9PT1yLmFjdGl2ZSsrJiZyLmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIiksby50eXBlPW8udHlwZS50b1VwcGVyQ2FzZSgpLG8uaGFzQ29udGVudD0hR2IudGVzdChvLnR5cGUpLGY9by51cmwucmVwbGFjZShDYixcIlwiKSxvLmhhc0NvbnRlbnQ/by5kYXRhJiZvLnByb2Nlc3NEYXRhJiYwPT09KG8uY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJihvLmRhdGE9by5kYXRhLnJlcGxhY2UoQmIsXCIrXCIpKToobj1vLnVybC5zbGljZShmLmxlbmd0aCksby5kYXRhJiYoZis9KHZiLnRlc3QoZik/XCImXCI6XCI/XCIpK28uZGF0YSxkZWxldGUgby5kYXRhKSxvLmNhY2hlPT09ITEmJihmPWYucmVwbGFjZShEYixcIiQxXCIpLG49KHZiLnRlc3QoZik/XCImXCI6XCI/XCIpK1wiXz1cIit1YisrICtuKSxvLnVybD1mK24pLG8uaWZNb2RpZmllZCYmKHIubGFzdE1vZGlmaWVkW2ZdJiZ5LnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Nb2RpZmllZC1TaW5jZVwiLHIubGFzdE1vZGlmaWVkW2ZdKSxyLmV0YWdbZl0mJnkuc2V0UmVxdWVzdEhlYWRlcihcIklmLU5vbmUtTWF0Y2hcIixyLmV0YWdbZl0pKSwoby5kYXRhJiZvLmhhc0NvbnRlbnQmJm8uY29udGVudFR5cGUhPT0hMXx8Yy5jb250ZW50VHlwZSkmJnkuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLG8uY29udGVudFR5cGUpLHkuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLG8uZGF0YVR5cGVzWzBdJiZvLmFjY2VwdHNbby5kYXRhVHlwZXNbMF1dP28uYWNjZXB0c1tvLmRhdGFUeXBlc1swXV0rKFwiKlwiIT09by5kYXRhVHlwZXNbMF0/XCIsIFwiK0tiK1wiOyBxPTAuMDFcIjpcIlwiKTpvLmFjY2VwdHNbXCIqXCJdKTtmb3IobSBpbiBvLmhlYWRlcnMpeS5zZXRSZXF1ZXN0SGVhZGVyKG0sby5oZWFkZXJzW21dKTtpZihvLmJlZm9yZVNlbmQmJihvLmJlZm9yZVNlbmQuY2FsbChwLHksbyk9PT0hMXx8aykpcmV0dXJuIHkuYWJvcnQoKTtpZih4PVwiYWJvcnRcIix0LmFkZChvLmNvbXBsZXRlKSx5LmRvbmUoby5zdWNjZXNzKSx5LmZhaWwoby5lcnJvciksZT1OYihKYixvLGMseSkpe2lmKHkucmVhZHlTdGF0ZT0xLGwmJnEudHJpZ2dlcihcImFqYXhTZW5kXCIsW3ksb10pLGspcmV0dXJuIHk7by5hc3luYyYmby50aW1lb3V0PjAmJihpPWEuc2V0VGltZW91dChmdW5jdGlvbigpe3kuYWJvcnQoXCJ0aW1lb3V0XCIpfSxvLnRpbWVvdXQpKTt0cnl7az0hMSxlLnNlbmQodixBKX1jYXRjaCh6KXtpZihrKXRocm93IHo7QSgtMSx6KX19ZWxzZSBBKC0xLFwiTm8gVHJhbnNwb3J0XCIpO2Z1bmN0aW9uIEEoYixjLGQsaCl7dmFyIGosbSxuLHYsdyx4PWM7a3x8KGs9ITAsaSYmYS5jbGVhclRpbWVvdXQoaSksZT12b2lkIDAsZz1ofHxcIlwiLHkucmVhZHlTdGF0ZT1iPjA/NDowLGo9Yj49MjAwJiZiPDMwMHx8MzA0PT09YixkJiYodj1QYihvLHksZCkpLHY9UWIobyx2LHksaiksaj8oby5pZk1vZGlmaWVkJiYodz15LmdldFJlc3BvbnNlSGVhZGVyKFwiTGFzdC1Nb2RpZmllZFwiKSx3JiYoci5sYXN0TW9kaWZpZWRbZl09dyksdz15LmdldFJlc3BvbnNlSGVhZGVyKFwiZXRhZ1wiKSx3JiYoci5ldGFnW2ZdPXcpKSwyMDQ9PT1ifHxcIkhFQURcIj09PW8udHlwZT94PVwibm9jb250ZW50XCI6MzA0PT09Yj94PVwibm90bW9kaWZpZWRcIjooeD12LnN0YXRlLG09di5kYXRhLG49di5lcnJvcixqPSFuKSk6KG49eCwhYiYmeHx8KHg9XCJlcnJvclwiLGI8MCYmKGI9MCkpKSx5LnN0YXR1cz1iLHkuc3RhdHVzVGV4dD0oY3x8eCkrXCJcIixqP3MucmVzb2x2ZVdpdGgocCxbbSx4LHldKTpzLnJlamVjdFdpdGgocCxbeSx4LG5dKSx5LnN0YXR1c0NvZGUodSksdT12b2lkIDAsbCYmcS50cmlnZ2VyKGo/XCJhamF4U3VjY2Vzc1wiOlwiYWpheEVycm9yXCIsW3ksbyxqP206bl0pLHQuZmlyZVdpdGgocCxbeSx4XSksbCYmKHEudHJpZ2dlcihcImFqYXhDb21wbGV0ZVwiLFt5LG9dKSwtLXIuYWN0aXZlfHxyLmV2ZW50LnRyaWdnZXIoXCJhamF4U3RvcFwiKSkpfXJldHVybiB5fSxnZXRKU09OOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gci5nZXQoYSxiLGMsXCJqc29uXCIpfSxnZXRTY3JpcHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gci5nZXQoYSx2b2lkIDAsYixcInNjcmlwdFwiKX19KSxyLmVhY2goW1wiZ2V0XCIsXCJwb3N0XCJdLGZ1bmN0aW9uKGEsYil7cltiXT1mdW5jdGlvbihhLGMsZCxlKXtyZXR1cm4gci5pc0Z1bmN0aW9uKGMpJiYoZT1lfHxkLGQ9YyxjPXZvaWQgMCksci5hamF4KHIuZXh0ZW5kKHt1cmw6YSx0eXBlOmIsZGF0YVR5cGU6ZSxkYXRhOmMsc3VjY2VzczpkfSxyLmlzUGxhaW5PYmplY3QoYSkmJmEpKX19KSxyLl9ldmFsVXJsPWZ1bmN0aW9uKGEpe3JldHVybiByLmFqYXgoe3VybDphLHR5cGU6XCJHRVRcIixkYXRhVHlwZTpcInNjcmlwdFwiLGNhY2hlOiEwLGFzeW5jOiExLGdsb2JhbDohMSxcInRocm93c1wiOiEwfSl9LHIuZm4uZXh0ZW5kKHt3cmFwQWxsOmZ1bmN0aW9uKGEpe3ZhciBiO3JldHVybiB0aGlzWzBdJiYoci5pc0Z1bmN0aW9uKGEpJiYoYT1hLmNhbGwodGhpc1swXSkpLGI9cihhLHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUoITApLHRoaXNbMF0ucGFyZW50Tm9kZSYmYi5pbnNlcnRCZWZvcmUodGhpc1swXSksYi5tYXAoZnVuY3Rpb24oKXt2YXIgYT10aGlzO3doaWxlKGEuZmlyc3RFbGVtZW50Q2hpbGQpYT1hLmZpcnN0RWxlbWVudENoaWxkO3JldHVybiBhfSkuYXBwZW5kKHRoaXMpKSx0aGlzfSx3cmFwSW5uZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIHIuaXNGdW5jdGlvbihhKT90aGlzLmVhY2goZnVuY3Rpb24oYil7cih0aGlzKS53cmFwSW5uZXIoYS5jYWxsKHRoaXMsYikpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGI9cih0aGlzKSxjPWIuY29udGVudHMoKTtjLmxlbmd0aD9jLndyYXBBbGwoYSk6Yi5hcHBlbmQoYSl9KX0sd3JhcDpmdW5jdGlvbihhKXt2YXIgYj1yLmlzRnVuY3Rpb24oYSk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihjKXtyKHRoaXMpLndyYXBBbGwoYj9hLmNhbGwodGhpcyxjKTphKX0pfSx1bndyYXA6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucGFyZW50KGEpLm5vdChcImJvZHlcIikuZWFjaChmdW5jdGlvbigpe3IodGhpcykucmVwbGFjZVdpdGgodGhpcy5jaGlsZE5vZGVzKX0pLHRoaXN9fSksci5leHByLnBzZXVkb3MuaGlkZGVuPWZ1bmN0aW9uKGEpe3JldHVybiFyLmV4cHIucHNldWRvcy52aXNpYmxlKGEpfSxyLmV4cHIucHNldWRvcy52aXNpYmxlPWZ1bmN0aW9uKGEpe3JldHVybiEhKGEub2Zmc2V0V2lkdGh8fGEub2Zmc2V0SGVpZ2h0fHxhLmdldENsaWVudFJlY3RzKCkubGVuZ3RoKX0sci5hamF4U2V0dGluZ3MueGhyPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBuZXcgYS5YTUxIdHRwUmVxdWVzdH1jYXRjaChiKXt9fTt2YXIgUmI9ezA6MjAwLDEyMjM6MjA0fSxTYj1yLmFqYXhTZXR0aW5ncy54aHIoKTtvLmNvcnM9ISFTYiYmXCJ3aXRoQ3JlZGVudGlhbHNcImluIFNiLG8uYWpheD1TYj0hIVNiLHIuYWpheFRyYW5zcG9ydChmdW5jdGlvbihiKXt2YXIgYyxkO2lmKG8uY29yc3x8U2ImJiFiLmNyb3NzRG9tYWluKXJldHVybntzZW5kOmZ1bmN0aW9uKGUsZil7dmFyIGcsaD1iLnhocigpO2lmKGgub3BlbihiLnR5cGUsYi51cmwsYi5hc3luYyxiLnVzZXJuYW1lLGIucGFzc3dvcmQpLGIueGhyRmllbGRzKWZvcihnIGluIGIueGhyRmllbGRzKWhbZ109Yi54aHJGaWVsZHNbZ107Yi5taW1lVHlwZSYmaC5vdmVycmlkZU1pbWVUeXBlJiZoLm92ZXJyaWRlTWltZVR5cGUoYi5taW1lVHlwZSksYi5jcm9zc0RvbWFpbnx8ZVtcIlgtUmVxdWVzdGVkLVdpdGhcIl18fChlW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXT1cIlhNTEh0dHBSZXF1ZXN0XCIpO2ZvcihnIGluIGUpaC5zZXRSZXF1ZXN0SGVhZGVyKGcsZVtnXSk7Yz1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXtjJiYoYz1kPWgub25sb2FkPWgub25lcnJvcj1oLm9uYWJvcnQ9aC5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCxcImFib3J0XCI9PT1hP2guYWJvcnQoKTpcImVycm9yXCI9PT1hP1wibnVtYmVyXCIhPXR5cGVvZiBoLnN0YXR1cz9mKDAsXCJlcnJvclwiKTpmKGguc3RhdHVzLGguc3RhdHVzVGV4dCk6ZihSYltoLnN0YXR1c118fGguc3RhdHVzLGguc3RhdHVzVGV4dCxcInRleHRcIiE9PShoLnJlc3BvbnNlVHlwZXx8XCJ0ZXh0XCIpfHxcInN0cmluZ1wiIT10eXBlb2YgaC5yZXNwb25zZVRleHQ/e2JpbmFyeTpoLnJlc3BvbnNlfTp7dGV4dDpoLnJlc3BvbnNlVGV4dH0saC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpfX0saC5vbmxvYWQ9YygpLGQ9aC5vbmVycm9yPWMoXCJlcnJvclwiKSx2b2lkIDAhPT1oLm9uYWJvcnQ/aC5vbmFib3J0PWQ6aC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXs0PT09aC5yZWFkeVN0YXRlJiZhLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtjJiZkKCl9KX0sYz1jKFwiYWJvcnRcIik7dHJ5e2guc2VuZChiLmhhc0NvbnRlbnQmJmIuZGF0YXx8bnVsbCl9Y2F0Y2goaSl7aWYoYyl0aHJvdyBpfX0sYWJvcnQ6ZnVuY3Rpb24oKXtjJiZjKCl9fX0pLHIuYWpheFByZWZpbHRlcihmdW5jdGlvbihhKXthLmNyb3NzRG9tYWluJiYoYS5jb250ZW50cy5zY3JpcHQ9ITEpfSksci5hamF4U2V0dXAoe2FjY2VwdHM6e3NjcmlwdDpcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJ9LGNvbnRlbnRzOntzY3JpcHQ6L1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvfSxjb252ZXJ0ZXJzOntcInRleHQgc2NyaXB0XCI6ZnVuY3Rpb24oYSl7cmV0dXJuIHIuZ2xvYmFsRXZhbChhKSxhfX19KSxyLmFqYXhQcmVmaWx0ZXIoXCJzY3JpcHRcIixmdW5jdGlvbihhKXt2b2lkIDA9PT1hLmNhY2hlJiYoYS5jYWNoZT0hMSksYS5jcm9zc0RvbWFpbiYmKGEudHlwZT1cIkdFVFwiKX0pLHIuYWpheFRyYW5zcG9ydChcInNjcmlwdFwiLGZ1bmN0aW9uKGEpe2lmKGEuY3Jvc3NEb21haW4pe3ZhciBiLGM7cmV0dXJue3NlbmQ6ZnVuY3Rpb24oZSxmKXtiPXIoXCI8c2NyaXB0PlwiKS5wcm9wKHtjaGFyc2V0OmEuc2NyaXB0Q2hhcnNldCxzcmM6YS51cmx9KS5vbihcImxvYWQgZXJyb3JcIixjPWZ1bmN0aW9uKGEpe2IucmVtb3ZlKCksYz1udWxsLGEmJmYoXCJlcnJvclwiPT09YS50eXBlPzQwNDoyMDAsYS50eXBlKX0pLGQuaGVhZC5hcHBlbmRDaGlsZChiWzBdKX0sYWJvcnQ6ZnVuY3Rpb24oKXtjJiZjKCl9fX19KTt2YXIgVGI9W10sVWI9Lyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztyLmFqYXhTZXR1cCh7anNvbnA6XCJjYWxsYmFja1wiLGpzb25wQ2FsbGJhY2s6ZnVuY3Rpb24oKXt2YXIgYT1UYi5wb3AoKXx8ci5leHBhbmRvK1wiX1wiK3ViKys7cmV0dXJuIHRoaXNbYV09ITAsYX19KSxyLmFqYXhQcmVmaWx0ZXIoXCJqc29uIGpzb25wXCIsZnVuY3Rpb24oYixjLGQpe3ZhciBlLGYsZyxoPWIuanNvbnAhPT0hMSYmKFViLnRlc3QoYi51cmwpP1widXJsXCI6XCJzdHJpbmdcIj09dHlwZW9mIGIuZGF0YSYmMD09PShiLmNvbnRlbnRUeXBlfHxcIlwiKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpJiZVYi50ZXN0KGIuZGF0YSkmJlwiZGF0YVwiKTtpZihofHxcImpzb25wXCI9PT1iLmRhdGFUeXBlc1swXSlyZXR1cm4gZT1iLmpzb25wQ2FsbGJhY2s9ci5pc0Z1bmN0aW9uKGIuanNvbnBDYWxsYmFjayk/Yi5qc29ucENhbGxiYWNrKCk6Yi5qc29ucENhbGxiYWNrLGg/YltoXT1iW2hdLnJlcGxhY2UoVWIsXCIkMVwiK2UpOmIuanNvbnAhPT0hMSYmKGIudXJsKz0odmIudGVzdChiLnVybCk/XCImXCI6XCI/XCIpK2IuanNvbnArXCI9XCIrZSksYi5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl09ZnVuY3Rpb24oKXtyZXR1cm4gZ3x8ci5lcnJvcihlK1wiIHdhcyBub3QgY2FsbGVkXCIpLGdbMF19LGIuZGF0YVR5cGVzWzBdPVwianNvblwiLGY9YVtlXSxhW2VdPWZ1bmN0aW9uKCl7Zz1hcmd1bWVudHN9LGQuYWx3YXlzKGZ1bmN0aW9uKCl7dm9pZCAwPT09Zj9yKGEpLnJlbW92ZVByb3AoZSk6YVtlXT1mLGJbZV0mJihiLmpzb25wQ2FsbGJhY2s9Yy5qc29ucENhbGxiYWNrLFRiLnB1c2goZSkpLGcmJnIuaXNGdW5jdGlvbihmKSYmZihnWzBdKSxnPWY9dm9pZCAwfSksXCJzY3JpcHRcIn0pLG8uY3JlYXRlSFRNTERvY3VtZW50PWZ1bmN0aW9uKCl7dmFyIGE9ZC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoXCJcIikuYm9keTtyZXR1cm4gYS5pbm5lckhUTUw9XCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiLDI9PT1hLmNoaWxkTm9kZXMubGVuZ3RofSgpLHIucGFyc2VIVE1MPWZ1bmN0aW9uKGEsYixjKXtpZihcInN0cmluZ1wiIT10eXBlb2YgYSlyZXR1cm5bXTtcImJvb2xlYW5cIj09dHlwZW9mIGImJihjPWIsYj0hMSk7dmFyIGUsZixnO3JldHVybiBifHwoby5jcmVhdGVIVE1MRG9jdW1lbnQ/KGI9ZC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoXCJcIiksZT1iLmNyZWF0ZUVsZW1lbnQoXCJiYXNlXCIpLGUuaHJlZj1kLmxvY2F0aW9uLmhyZWYsYi5oZWFkLmFwcGVuZENoaWxkKGUpKTpiPWQpLGY9Qy5leGVjKGEpLGc9IWMmJltdLGY/W2IuY3JlYXRlRWxlbWVudChmWzFdKV06KGY9cWEoW2FdLGIsZyksZyYmZy5sZW5ndGgmJnIoZykucmVtb3ZlKCksci5tZXJnZShbXSxmLmNoaWxkTm9kZXMpKX0sci5mbi5sb2FkPWZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZz10aGlzLGg9YS5pbmRleE9mKFwiIFwiKTtyZXR1cm4gaD4tMSYmKGQ9cGIoYS5zbGljZShoKSksYT1hLnNsaWNlKDAsaCkpLHIuaXNGdW5jdGlvbihiKT8oYz1iLGI9dm9pZCAwKTpiJiZcIm9iamVjdFwiPT10eXBlb2YgYiYmKGU9XCJQT1NUXCIpLGcubGVuZ3RoPjAmJnIuYWpheCh7dXJsOmEsdHlwZTplfHxcIkdFVFwiLGRhdGFUeXBlOlwiaHRtbFwiLGRhdGE6Yn0pLmRvbmUoZnVuY3Rpb24oYSl7Zj1hcmd1bWVudHMsZy5odG1sKGQ/cihcIjxkaXY+XCIpLmFwcGVuZChyLnBhcnNlSFRNTChhKSkuZmluZChkKTphKX0pLmFsd2F5cyhjJiZmdW5jdGlvbihhLGIpe2cuZWFjaChmdW5jdGlvbigpe2MuYXBwbHkodGhpcyxmfHxbYS5yZXNwb25zZVRleHQsYixhXSl9KX0pLHRoaXN9LHIuZWFjaChbXCJhamF4U3RhcnRcIixcImFqYXhTdG9wXCIsXCJhamF4Q29tcGxldGVcIixcImFqYXhFcnJvclwiLFwiYWpheFN1Y2Nlc3NcIixcImFqYXhTZW5kXCJdLGZ1bmN0aW9uKGEsYil7ci5mbltiXT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5vbihiLGEpfX0pLHIuZXhwci5wc2V1ZG9zLmFuaW1hdGVkPWZ1bmN0aW9uKGEpe3JldHVybiByLmdyZXAoci50aW1lcnMsZnVuY3Rpb24oYil7cmV0dXJuIGE9PT1iLmVsZW19KS5sZW5ndGh9LHIub2Zmc2V0PXtzZXRPZmZzZXQ6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnLGgsaSxqLGs9ci5jc3MoYSxcInBvc2l0aW9uXCIpLGw9cihhKSxtPXt9O1wic3RhdGljXCI9PT1rJiYoYS5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIpLGg9bC5vZmZzZXQoKSxmPXIuY3NzKGEsXCJ0b3BcIiksaT1yLmNzcyhhLFwibGVmdFwiKSxqPShcImFic29sdXRlXCI9PT1rfHxcImZpeGVkXCI9PT1rKSYmKGYraSkuaW5kZXhPZihcImF1dG9cIik+LTEsaj8oZD1sLnBvc2l0aW9uKCksZz1kLnRvcCxlPWQubGVmdCk6KGc9cGFyc2VGbG9hdChmKXx8MCxlPXBhcnNlRmxvYXQoaSl8fDApLHIuaXNGdW5jdGlvbihiKSYmKGI9Yi5jYWxsKGEsYyxyLmV4dGVuZCh7fSxoKSkpLG51bGwhPWIudG9wJiYobS50b3A9Yi50b3AtaC50b3ArZyksbnVsbCE9Yi5sZWZ0JiYobS5sZWZ0PWIubGVmdC1oLmxlZnQrZSksXCJ1c2luZ1wiaW4gYj9iLnVzaW5nLmNhbGwoYSxtKTpsLmNzcyhtKX19LHIuZm4uZXh0ZW5kKHtvZmZzZXQ6ZnVuY3Rpb24oYSl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09YT90aGlzOnRoaXMuZWFjaChmdW5jdGlvbihiKXtyLm9mZnNldC5zZXRPZmZzZXQodGhpcyxhLGIpfSk7dmFyIGIsYyxkLGUsZj10aGlzWzBdO2lmKGYpcmV0dXJuIGYuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGg/KGQ9Zi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxiPWYub3duZXJEb2N1bWVudCxjPWIuZG9jdW1lbnRFbGVtZW50LGU9Yi5kZWZhdWx0Vmlldyx7dG9wOmQudG9wK2UucGFnZVlPZmZzZXQtYy5jbGllbnRUb3AsbGVmdDpkLmxlZnQrZS5wYWdlWE9mZnNldC1jLmNsaWVudExlZnR9KTp7dG9wOjAsbGVmdDowfX0scG9zaXRpb246ZnVuY3Rpb24oKXtpZih0aGlzWzBdKXt2YXIgYSxiLGM9dGhpc1swXSxkPXt0b3A6MCxsZWZ0OjB9O3JldHVyblwiZml4ZWRcIj09PXIuY3NzKGMsXCJwb3NpdGlvblwiKT9iPWMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk6KGE9dGhpcy5vZmZzZXRQYXJlbnQoKSxiPXRoaXMub2Zmc2V0KCksQihhWzBdLFwiaHRtbFwiKXx8KGQ9YS5vZmZzZXQoKSksZD17dG9wOmQudG9wK3IuY3NzKGFbMF0sXCJib3JkZXJUb3BXaWR0aFwiLCEwKSxsZWZ0OmQubGVmdCtyLmNzcyhhWzBdLFwiYm9yZGVyTGVmdFdpZHRoXCIsITApfSkse3RvcDpiLnRvcC1kLnRvcC1yLmNzcyhjLFwibWFyZ2luVG9wXCIsITApLGxlZnQ6Yi5sZWZ0LWQubGVmdC1yLmNzcyhjLFwibWFyZ2luTGVmdFwiLCEwKX19fSxvZmZzZXRQYXJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9mZnNldFBhcmVudDt3aGlsZShhJiZcInN0YXRpY1wiPT09ci5jc3MoYSxcInBvc2l0aW9uXCIpKWE9YS5vZmZzZXRQYXJlbnQ7cmV0dXJuIGF8fHJhfSl9fSksci5lYWNoKHtzY3JvbGxMZWZ0OlwicGFnZVhPZmZzZXRcIixzY3JvbGxUb3A6XCJwYWdlWU9mZnNldFwifSxmdW5jdGlvbihhLGIpe3ZhciBjPVwicGFnZVlPZmZzZXRcIj09PWI7ci5mblthXT1mdW5jdGlvbihkKXtyZXR1cm4gVCh0aGlzLGZ1bmN0aW9uKGEsZCxlKXt2YXIgZjtyZXR1cm4gci5pc1dpbmRvdyhhKT9mPWE6OT09PWEubm9kZVR5cGUmJihmPWEuZGVmYXVsdFZpZXcpLHZvaWQgMD09PWU/Zj9mW2JdOmFbZF06dm9pZChmP2Yuc2Nyb2xsVG8oYz9mLnBhZ2VYT2Zmc2V0OmUsYz9lOmYucGFnZVlPZmZzZXQpOmFbZF09ZSl9LGEsZCxhcmd1bWVudHMubGVuZ3RoKX19KSxyLmVhY2goW1widG9wXCIsXCJsZWZ0XCJdLGZ1bmN0aW9uKGEsYil7ci5jc3NIb29rc1tiXT1QYShvLnBpeGVsUG9zaXRpb24sZnVuY3Rpb24oYSxjKXtpZihjKXJldHVybiBjPU9hKGEsYiksTWEudGVzdChjKT9yKGEpLnBvc2l0aW9uKClbYl0rXCJweFwiOmN9KX0pLHIuZWFjaCh7SGVpZ2h0OlwiaGVpZ2h0XCIsV2lkdGg6XCJ3aWR0aFwifSxmdW5jdGlvbihhLGIpe3IuZWFjaCh7cGFkZGluZzpcImlubmVyXCIrYSxjb250ZW50OmIsXCJcIjpcIm91dGVyXCIrYX0sZnVuY3Rpb24oYyxkKXtyLmZuW2RdPWZ1bmN0aW9uKGUsZil7dmFyIGc9YXJndW1lbnRzLmxlbmd0aCYmKGN8fFwiYm9vbGVhblwiIT10eXBlb2YgZSksaD1jfHwoZT09PSEwfHxmPT09ITA/XCJtYXJnaW5cIjpcImJvcmRlclwiKTtyZXR1cm4gVCh0aGlzLGZ1bmN0aW9uKGIsYyxlKXt2YXIgZjtyZXR1cm4gci5pc1dpbmRvdyhiKT8wPT09ZC5pbmRleE9mKFwib3V0ZXJcIik/YltcImlubmVyXCIrYV06Yi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIithXTo5PT09Yi5ub2RlVHlwZT8oZj1iLmRvY3VtZW50RWxlbWVudCxNYXRoLm1heChiLmJvZHlbXCJzY3JvbGxcIithXSxmW1wic2Nyb2xsXCIrYV0sYi5ib2R5W1wib2Zmc2V0XCIrYV0sZltcIm9mZnNldFwiK2FdLGZbXCJjbGllbnRcIithXSkpOnZvaWQgMD09PWU/ci5jc3MoYixjLGgpOnIuc3R5bGUoYixjLGUsaCl9LGIsZz9lOnZvaWQgMCxnKX19KX0pLHIuZm4uZXh0ZW5kKHtiaW5kOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdGhpcy5vbihhLG51bGwsYixjKX0sdW5iaW5kOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMub2ZmKGEsbnVsbCxiKX0sZGVsZWdhdGU6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMub24oYixhLGMsZCl9LHVuZGVsZWdhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aD90aGlzLm9mZihhLFwiKipcIik6dGhpcy5vZmYoYixhfHxcIioqXCIsYyl9fSksci5ob2xkUmVhZHk9ZnVuY3Rpb24oYSl7YT9yLnJlYWR5V2FpdCsrOnIucmVhZHkoITApfSxyLmlzQXJyYXk9QXJyYXkuaXNBcnJheSxyLnBhcnNlSlNPTj1KU09OLnBhcnNlLHIubm9kZU5hbWU9QixcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQmJmRlZmluZShcImpxdWVyeVwiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIHJ9KTt2YXIgVmI9YS5qUXVlcnksV2I9YS4kO3JldHVybiByLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oYil7cmV0dXJuIGEuJD09PXImJihhLiQ9V2IpLGImJmEualF1ZXJ5PT09ciYmKGEualF1ZXJ5PVZiKSxyfSxifHwoYS5qUXVlcnk9YS4kPXIpLHJ9KTtcblxuOyBicm93c2VyaWZ5X3NoaW1fX2RlZmluZV9fbW9kdWxlX19leHBvcnRfXyh0eXBlb2YgJCAhPSBcInVuZGVmaW5lZFwiID8gJCA6IHdpbmRvdy4kKTtcblxufSkuY2FsbChnbG9iYWwsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24gZGVmaW5lRXhwb3J0KGV4KSB7IG1vZHVsZS5leHBvcnRzID0gZXg7IH0pO1xuIiwiXG47IGpRdWVyeSA9IGdsb2JhbC5qUXVlcnkgPSByZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxcU2FyYXlcXFxccHJvamVjdHNcXFxcZG9uYXNob3BcXFxcc3JjXFxcXGpzXFxcXGRlcHNcXFxcanF1ZXJ5Lm1pbi5qc1wiKTtcbjsgdmFyIF9fYnJvd3NlcmlmeV9zaGltX3JlcXVpcmVfXz1yZXF1aXJlOyhmdW5jdGlvbiBicm93c2VyaWZ5U2hpbShtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUsIGRlZmluZSwgYnJvd3NlcmlmeV9zaGltX19kZWZpbmVfX21vZHVsZV9fZXhwb3J0X18pIHtcbi8qKlxuICogT3dsIENhcm91c2VsIHYyLjIuMVxuICogQ29weXJpZ2h0IDIwMTMtMjAxNyBEYXZpZCBEZXV0c2NoXG4gKiBMaWNlbnNlZCB1bmRlciAgKClcbiAqL1xuIWZ1bmN0aW9uKGEsYixjLGQpe2Z1bmN0aW9uIGUoYixjKXt0aGlzLnNldHRpbmdzPW51bGwsdGhpcy5vcHRpb25zPWEuZXh0ZW5kKHt9LGUuRGVmYXVsdHMsYyksdGhpcy4kZWxlbWVudD1hKGIpLHRoaXMuX2hhbmRsZXJzPXt9LHRoaXMuX3BsdWdpbnM9e30sdGhpcy5fc3VwcmVzcz17fSx0aGlzLl9jdXJyZW50PW51bGwsdGhpcy5fc3BlZWQ9bnVsbCx0aGlzLl9jb29yZGluYXRlcz1bXSx0aGlzLl9icmVha3BvaW50PW51bGwsdGhpcy5fd2lkdGg9bnVsbCx0aGlzLl9pdGVtcz1bXSx0aGlzLl9jbG9uZXM9W10sdGhpcy5fbWVyZ2Vycz1bXSx0aGlzLl93aWR0aHM9W10sdGhpcy5faW52YWxpZGF0ZWQ9e30sdGhpcy5fcGlwZT1bXSx0aGlzLl9kcmFnPXt0aW1lOm51bGwsdGFyZ2V0Om51bGwscG9pbnRlcjpudWxsLHN0YWdlOntzdGFydDpudWxsLGN1cnJlbnQ6bnVsbH0sZGlyZWN0aW9uOm51bGx9LHRoaXMuX3N0YXRlcz17Y3VycmVudDp7fSx0YWdzOntpbml0aWFsaXppbmc6W1wiYnVzeVwiXSxhbmltYXRpbmc6W1wiYnVzeVwiXSxkcmFnZ2luZzpbXCJpbnRlcmFjdGluZ1wiXX19LGEuZWFjaChbXCJvblJlc2l6ZVwiLFwib25UaHJvdHRsZWRSZXNpemVcIl0sYS5wcm94eShmdW5jdGlvbihiLGMpe3RoaXMuX2hhbmRsZXJzW2NdPWEucHJveHkodGhpc1tjXSx0aGlzKX0sdGhpcykpLGEuZWFjaChlLlBsdWdpbnMsYS5wcm94eShmdW5jdGlvbihhLGIpe3RoaXMuX3BsdWdpbnNbYS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSthLnNsaWNlKDEpXT1uZXcgYih0aGlzKX0sdGhpcykpLGEuZWFjaChlLldvcmtlcnMsYS5wcm94eShmdW5jdGlvbihiLGMpe3RoaXMuX3BpcGUucHVzaCh7ZmlsdGVyOmMuZmlsdGVyLHJ1bjphLnByb3h5KGMucnVuLHRoaXMpfSl9LHRoaXMpKSx0aGlzLnNldHVwKCksdGhpcy5pbml0aWFsaXplKCl9ZS5EZWZhdWx0cz17aXRlbXM6Myxsb29wOiExLGNlbnRlcjohMSxyZXdpbmQ6ITEsbW91c2VEcmFnOiEwLHRvdWNoRHJhZzohMCxwdWxsRHJhZzohMCxmcmVlRHJhZzohMSxtYXJnaW46MCxzdGFnZVBhZGRpbmc6MCxtZXJnZTohMSxtZXJnZUZpdDohMCxhdXRvV2lkdGg6ITEsc3RhcnRQb3NpdGlvbjowLHJ0bDohMSxzbWFydFNwZWVkOjI1MCxmbHVpZFNwZWVkOiExLGRyYWdFbmRTcGVlZDohMSxyZXNwb25zaXZlOnt9LHJlc3BvbnNpdmVSZWZyZXNoUmF0ZToyMDAscmVzcG9uc2l2ZUJhc2VFbGVtZW50OmIsZmFsbGJhY2tFYXNpbmc6XCJzd2luZ1wiLGluZm86ITEsbmVzdGVkSXRlbVNlbGVjdG9yOiExLGl0ZW1FbGVtZW50OlwiZGl2XCIsc3RhZ2VFbGVtZW50OlwiZGl2XCIscmVmcmVzaENsYXNzOlwib3dsLXJlZnJlc2hcIixsb2FkZWRDbGFzczpcIm93bC1sb2FkZWRcIixsb2FkaW5nQ2xhc3M6XCJvd2wtbG9hZGluZ1wiLHJ0bENsYXNzOlwib3dsLXJ0bFwiLHJlc3BvbnNpdmVDbGFzczpcIm93bC1yZXNwb25zaXZlXCIsZHJhZ0NsYXNzOlwib3dsLWRyYWdcIixpdGVtQ2xhc3M6XCJvd2wtaXRlbVwiLHN0YWdlQ2xhc3M6XCJvd2wtc3RhZ2VcIixzdGFnZU91dGVyQ2xhc3M6XCJvd2wtc3RhZ2Utb3V0ZXJcIixncmFiQ2xhc3M6XCJvd2wtZ3JhYlwifSxlLldpZHRoPXtEZWZhdWx0OlwiZGVmYXVsdFwiLElubmVyOlwiaW5uZXJcIixPdXRlcjpcIm91dGVyXCJ9LGUuVHlwZT17RXZlbnQ6XCJldmVudFwiLFN0YXRlOlwic3RhdGVcIn0sZS5QbHVnaW5zPXt9LGUuV29ya2Vycz1be2ZpbHRlcjpbXCJ3aWR0aFwiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKCl7dGhpcy5fd2lkdGg9dGhpcy4kZWxlbWVudC53aWR0aCgpfX0se2ZpbHRlcjpbXCJ3aWR0aFwiLFwiaXRlbXNcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbihhKXthLmN1cnJlbnQ9dGhpcy5faXRlbXMmJnRoaXMuX2l0ZW1zW3RoaXMucmVsYXRpdmUodGhpcy5fY3VycmVudCldfX0se2ZpbHRlcjpbXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKCl7dGhpcy4kc3RhZ2UuY2hpbGRyZW4oXCIuY2xvbmVkXCIpLnJlbW92ZSgpfX0se2ZpbHRlcjpbXCJ3aWR0aFwiLFwiaXRlbXNcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnNldHRpbmdzLm1hcmdpbnx8XCJcIixjPSF0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCxkPXRoaXMuc2V0dGluZ3MucnRsLGU9e3dpZHRoOlwiYXV0b1wiLFwibWFyZ2luLWxlZnRcIjpkP2I6XCJcIixcIm1hcmdpbi1yaWdodFwiOmQ/XCJcIjpifTshYyYmdGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS5jc3MoZSksYS5jc3M9ZX19LHtmaWx0ZXI6W1wid2lkdGhcIixcIml0ZW1zXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oYSl7dmFyIGI9KHRoaXMud2lkdGgoKS90aGlzLnNldHRpbmdzLml0ZW1zKS50b0ZpeGVkKDMpLXRoaXMuc2V0dGluZ3MubWFyZ2luLGM9bnVsbCxkPXRoaXMuX2l0ZW1zLmxlbmd0aCxlPSF0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCxmPVtdO2ZvcihhLml0ZW1zPXttZXJnZTohMSx3aWR0aDpifTtkLS07KWM9dGhpcy5fbWVyZ2Vyc1tkXSxjPXRoaXMuc2V0dGluZ3MubWVyZ2VGaXQmJk1hdGgubWluKGMsdGhpcy5zZXR0aW5ncy5pdGVtcyl8fGMsYS5pdGVtcy5tZXJnZT1jPjF8fGEuaXRlbXMubWVyZ2UsZltkXT1lP2IqYzp0aGlzLl9pdGVtc1tkXS53aWR0aCgpO3RoaXMuX3dpZHRocz1mfX0se2ZpbHRlcjpbXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKCl7dmFyIGI9W10sYz10aGlzLl9pdGVtcyxkPXRoaXMuc2V0dGluZ3MsZT1NYXRoLm1heCgyKmQuaXRlbXMsNCksZj0yKk1hdGguY2VpbChjLmxlbmd0aC8yKSxnPWQubG9vcCYmYy5sZW5ndGg/ZC5yZXdpbmQ/ZTpNYXRoLm1heChlLGYpOjAsaD1cIlwiLGk9XCJcIjtmb3IoZy89MjtnLS07KWIucHVzaCh0aGlzLm5vcm1hbGl6ZShiLmxlbmd0aC8yLCEwKSksaCs9Y1tiW2IubGVuZ3RoLTFdXVswXS5vdXRlckhUTUwsYi5wdXNoKHRoaXMubm9ybWFsaXplKGMubGVuZ3RoLTEtKGIubGVuZ3RoLTEpLzIsITApKSxpPWNbYltiLmxlbmd0aC0xXV1bMF0ub3V0ZXJIVE1MK2k7dGhpcy5fY2xvbmVzPWIsYShoKS5hZGRDbGFzcyhcImNsb25lZFwiKS5hcHBlbmRUbyh0aGlzLiRzdGFnZSksYShpKS5hZGRDbGFzcyhcImNsb25lZFwiKS5wcmVwZW5kVG8odGhpcy4kc3RhZ2UpfX0se2ZpbHRlcjpbXCJ3aWR0aFwiLFwiaXRlbXNcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLnNldHRpbmdzLnJ0bD8xOi0xLGI9dGhpcy5fY2xvbmVzLmxlbmd0aCt0aGlzLl9pdGVtcy5sZW5ndGgsYz0tMSxkPTAsZT0wLGY9W107KytjPGI7KWQ9ZltjLTFdfHwwLGU9dGhpcy5fd2lkdGhzW3RoaXMucmVsYXRpdmUoYyldK3RoaXMuc2V0dGluZ3MubWFyZ2luLGYucHVzaChkK2UqYSk7dGhpcy5fY29vcmRpbmF0ZXM9Zn19LHtmaWx0ZXI6W1wid2lkdGhcIixcIml0ZW1zXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnNldHRpbmdzLnN0YWdlUGFkZGluZyxiPXRoaXMuX2Nvb3JkaW5hdGVzLGM9e3dpZHRoOk1hdGguY2VpbChNYXRoLmFicyhiW2IubGVuZ3RoLTFdKSkrMiphLFwicGFkZGluZy1sZWZ0XCI6YXx8XCJcIixcInBhZGRpbmctcmlnaHRcIjphfHxcIlwifTt0aGlzLiRzdGFnZS5jc3MoYyl9fSx7ZmlsdGVyOltcIndpZHRoXCIsXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aCxjPSF0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCxkPXRoaXMuJHN0YWdlLmNoaWxkcmVuKCk7aWYoYyYmYS5pdGVtcy5tZXJnZSlmb3IoO2ItLTspYS5jc3Mud2lkdGg9dGhpcy5fd2lkdGhzW3RoaXMucmVsYXRpdmUoYildLGQuZXEoYikuY3NzKGEuY3NzKTtlbHNlIGMmJihhLmNzcy53aWR0aD1hLml0ZW1zLndpZHRoLGQuY3NzKGEuY3NzKSl9fSx7ZmlsdGVyOltcIml0ZW1zXCJdLHJ1bjpmdW5jdGlvbigpe3RoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aDwxJiZ0aGlzLiRzdGFnZS5yZW1vdmVBdHRyKFwic3R5bGVcIil9fSx7ZmlsdGVyOltcIndpZHRoXCIsXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKGEpe2EuY3VycmVudD1hLmN1cnJlbnQ/dGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS5pbmRleChhLmN1cnJlbnQpOjAsYS5jdXJyZW50PU1hdGgubWF4KHRoaXMubWluaW11bSgpLE1hdGgubWluKHRoaXMubWF4aW11bSgpLGEuY3VycmVudCkpLHRoaXMucmVzZXQoYS5jdXJyZW50KX19LHtmaWx0ZXI6W1wicG9zaXRpb25cIl0scnVuOmZ1bmN0aW9uKCl7dGhpcy5hbmltYXRlKHRoaXMuY29vcmRpbmF0ZXModGhpcy5fY3VycmVudCkpfX0se2ZpbHRlcjpbXCJ3aWR0aFwiLFwicG9zaXRpb25cIixcIml0ZW1zXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oKXt2YXIgYSxiLGMsZCxlPXRoaXMuc2V0dGluZ3MucnRsPzE6LTEsZj0yKnRoaXMuc2V0dGluZ3Muc3RhZ2VQYWRkaW5nLGc9dGhpcy5jb29yZGluYXRlcyh0aGlzLmN1cnJlbnQoKSkrZixoPWcrdGhpcy53aWR0aCgpKmUsaT1bXTtmb3IoYz0wLGQ9dGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoO2M8ZDtjKyspYT10aGlzLl9jb29yZGluYXRlc1tjLTFdfHwwLGI9TWF0aC5hYnModGhpcy5fY29vcmRpbmF0ZXNbY10pK2YqZSwodGhpcy5vcChhLFwiPD1cIixnKSYmdGhpcy5vcChhLFwiPlwiLGgpfHx0aGlzLm9wKGIsXCI8XCIsZykmJnRoaXMub3AoYixcIj5cIixoKSkmJmkucHVzaChjKTt0aGlzLiRzdGFnZS5jaGlsZHJlbihcIi5hY3RpdmVcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIiksdGhpcy4kc3RhZ2UuY2hpbGRyZW4oXCI6ZXEoXCIraS5qb2luKFwiKSwgOmVxKFwiKStcIilcIikuYWRkQ2xhc3MoXCJhY3RpdmVcIiksdGhpcy5zZXR0aW5ncy5jZW50ZXImJih0aGlzLiRzdGFnZS5jaGlsZHJlbihcIi5jZW50ZXJcIikucmVtb3ZlQ2xhc3MoXCJjZW50ZXJcIiksdGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS5lcSh0aGlzLmN1cnJlbnQoKSkuYWRkQ2xhc3MoXCJjZW50ZXJcIikpfX1dLGUucHJvdG90eXBlLmluaXRpYWxpemU9ZnVuY3Rpb24oKXtpZih0aGlzLmVudGVyKFwiaW5pdGlhbGl6aW5nXCIpLHRoaXMudHJpZ2dlcihcImluaXRpYWxpemVcIiksdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLnNldHRpbmdzLnJ0bENsYXNzLHRoaXMuc2V0dGluZ3MucnRsKSx0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCYmIXRoaXMuaXMoXCJwcmUtbG9hZGluZ1wiKSl7dmFyIGIsYyxlO2I9dGhpcy4kZWxlbWVudC5maW5kKFwiaW1nXCIpLGM9dGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3I/XCIuXCIrdGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3I6ZCxlPXRoaXMuJGVsZW1lbnQuY2hpbGRyZW4oYykud2lkdGgoKSxiLmxlbmd0aCYmZTw9MCYmdGhpcy5wcmVsb2FkQXV0b1dpZHRoSW1hZ2VzKGIpfXRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRpbmdDbGFzcyksdGhpcy4kc3RhZ2U9YShcIjxcIit0aGlzLnNldHRpbmdzLnN0YWdlRWxlbWVudCsnIGNsYXNzPVwiJyt0aGlzLnNldHRpbmdzLnN0YWdlQ2xhc3MrJ1wiLz4nKS53cmFwKCc8ZGl2IGNsYXNzPVwiJyt0aGlzLnNldHRpbmdzLnN0YWdlT3V0ZXJDbGFzcysnXCIvPicpLHRoaXMuJGVsZW1lbnQuYXBwZW5kKHRoaXMuJHN0YWdlLnBhcmVudCgpKSx0aGlzLnJlcGxhY2UodGhpcy4kZWxlbWVudC5jaGlsZHJlbigpLm5vdCh0aGlzLiRzdGFnZS5wYXJlbnQoKSkpLHRoaXMuJGVsZW1lbnQuaXMoXCI6dmlzaWJsZVwiKT90aGlzLnJlZnJlc2goKTp0aGlzLmludmFsaWRhdGUoXCJ3aWR0aFwiKSx0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sb2FkaW5nQ2xhc3MpLmFkZENsYXNzKHRoaXMub3B0aW9ucy5sb2FkZWRDbGFzcyksdGhpcy5yZWdpc3RlckV2ZW50SGFuZGxlcnMoKSx0aGlzLmxlYXZlKFwiaW5pdGlhbGl6aW5nXCIpLHRoaXMudHJpZ2dlcihcImluaXRpYWxpemVkXCIpfSxlLnByb3RvdHlwZS5zZXR1cD1mdW5jdGlvbigpe3ZhciBiPXRoaXMudmlld3BvcnQoKSxjPXRoaXMub3B0aW9ucy5yZXNwb25zaXZlLGQ9LTEsZT1udWxsO2M/KGEuZWFjaChjLGZ1bmN0aW9uKGEpe2E8PWImJmE+ZCYmKGQ9TnVtYmVyKGEpKX0pLGU9YS5leHRlbmQoe30sdGhpcy5vcHRpb25zLGNbZF0pLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuc3RhZ2VQYWRkaW5nJiYoZS5zdGFnZVBhZGRpbmc9ZS5zdGFnZVBhZGRpbmcoKSksZGVsZXRlIGUucmVzcG9uc2l2ZSxlLnJlc3BvbnNpdmVDbGFzcyYmdGhpcy4kZWxlbWVudC5hdHRyKFwiY2xhc3NcIix0aGlzLiRlbGVtZW50LmF0dHIoXCJjbGFzc1wiKS5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoXCIrdGhpcy5vcHRpb25zLnJlc3BvbnNpdmVDbGFzcytcIi0pXFxcXFMrXFxcXHNcIixcImdcIiksXCIkMVwiK2QpKSk6ZT1hLmV4dGVuZCh7fSx0aGlzLm9wdGlvbnMpLHRoaXMudHJpZ2dlcihcImNoYW5nZVwiLHtwcm9wZXJ0eTp7bmFtZTpcInNldHRpbmdzXCIsdmFsdWU6ZX19KSx0aGlzLl9icmVha3BvaW50PWQsdGhpcy5zZXR0aW5ncz1lLHRoaXMuaW52YWxpZGF0ZShcInNldHRpbmdzXCIpLHRoaXMudHJpZ2dlcihcImNoYW5nZWRcIix7cHJvcGVydHk6e25hbWU6XCJzZXR0aW5nc1wiLHZhbHVlOnRoaXMuc2V0dGluZ3N9fSl9LGUucHJvdG90eXBlLm9wdGlvbnNMb2dpYz1mdW5jdGlvbigpe3RoaXMuc2V0dGluZ3MuYXV0b1dpZHRoJiYodGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmc9ITEsdGhpcy5zZXR0aW5ncy5tZXJnZT0hMSl9LGUucHJvdG90eXBlLnByZXBhcmU9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcy50cmlnZ2VyKFwicHJlcGFyZVwiLHtjb250ZW50OmJ9KTtyZXR1cm4gYy5kYXRhfHwoYy5kYXRhPWEoXCI8XCIrdGhpcy5zZXR0aW5ncy5pdGVtRWxlbWVudCtcIi8+XCIpLmFkZENsYXNzKHRoaXMub3B0aW9ucy5pdGVtQ2xhc3MpLmFwcGVuZChiKSksdGhpcy50cmlnZ2VyKFwicHJlcGFyZWRcIix7Y29udGVudDpjLmRhdGF9KSxjLmRhdGF9LGUucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe2Zvcih2YXIgYj0wLGM9dGhpcy5fcGlwZS5sZW5ndGgsZD1hLnByb3h5KGZ1bmN0aW9uKGEpe3JldHVybiB0aGlzW2FdfSx0aGlzLl9pbnZhbGlkYXRlZCksZT17fTtiPGM7KSh0aGlzLl9pbnZhbGlkYXRlZC5hbGx8fGEuZ3JlcCh0aGlzLl9waXBlW2JdLmZpbHRlcixkKS5sZW5ndGg+MCkmJnRoaXMuX3BpcGVbYl0ucnVuKGUpLGIrKzt0aGlzLl9pbnZhbGlkYXRlZD17fSwhdGhpcy5pcyhcInZhbGlkXCIpJiZ0aGlzLmVudGVyKFwidmFsaWRcIil9LGUucHJvdG90eXBlLndpZHRoPWZ1bmN0aW9uKGEpe3N3aXRjaChhPWF8fGUuV2lkdGguRGVmYXVsdCl7Y2FzZSBlLldpZHRoLklubmVyOmNhc2UgZS5XaWR0aC5PdXRlcjpyZXR1cm4gdGhpcy5fd2lkdGg7ZGVmYXVsdDpyZXR1cm4gdGhpcy5fd2lkdGgtMip0aGlzLnNldHRpbmdzLnN0YWdlUGFkZGluZyt0aGlzLnNldHRpbmdzLm1hcmdpbn19LGUucHJvdG90eXBlLnJlZnJlc2g9ZnVuY3Rpb24oKXt0aGlzLmVudGVyKFwicmVmcmVzaGluZ1wiKSx0aGlzLnRyaWdnZXIoXCJyZWZyZXNoXCIpLHRoaXMuc2V0dXAoKSx0aGlzLm9wdGlvbnNMb2dpYygpLHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLnJlZnJlc2hDbGFzcyksdGhpcy51cGRhdGUoKSx0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5yZWZyZXNoQ2xhc3MpLHRoaXMubGVhdmUoXCJyZWZyZXNoaW5nXCIpLHRoaXMudHJpZ2dlcihcInJlZnJlc2hlZFwiKX0sZS5wcm90b3R5cGUub25UaHJvdHRsZWRSZXNpemU9ZnVuY3Rpb24oKXtiLmNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRpbWVyKSx0aGlzLnJlc2l6ZVRpbWVyPWIuc2V0VGltZW91dCh0aGlzLl9oYW5kbGVycy5vblJlc2l6ZSx0aGlzLnNldHRpbmdzLnJlc3BvbnNpdmVSZWZyZXNoUmF0ZSl9LGUucHJvdG90eXBlLm9uUmVzaXplPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLl9pdGVtcy5sZW5ndGgmJih0aGlzLl93aWR0aCE9PXRoaXMuJGVsZW1lbnQud2lkdGgoKSYmKCEhdGhpcy4kZWxlbWVudC5pcyhcIjp2aXNpYmxlXCIpJiYodGhpcy5lbnRlcihcInJlc2l6aW5nXCIpLHRoaXMudHJpZ2dlcihcInJlc2l6ZVwiKS5pc0RlZmF1bHRQcmV2ZW50ZWQoKT8odGhpcy5sZWF2ZShcInJlc2l6aW5nXCIpLCExKToodGhpcy5pbnZhbGlkYXRlKFwid2lkdGhcIiksdGhpcy5yZWZyZXNoKCksdGhpcy5sZWF2ZShcInJlc2l6aW5nXCIpLHZvaWQgdGhpcy50cmlnZ2VyKFwicmVzaXplZFwiKSkpKSl9LGUucHJvdG90eXBlLnJlZ2lzdGVyRXZlbnRIYW5kbGVycz1mdW5jdGlvbigpe2Euc3VwcG9ydC50cmFuc2l0aW9uJiZ0aGlzLiRzdGFnZS5vbihhLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQrXCIub3dsLmNvcmVcIixhLnByb3h5KHRoaXMub25UcmFuc2l0aW9uRW5kLHRoaXMpKSx0aGlzLnNldHRpbmdzLnJlc3BvbnNpdmUhPT0hMSYmdGhpcy5vbihiLFwicmVzaXplXCIsdGhpcy5faGFuZGxlcnMub25UaHJvdHRsZWRSZXNpemUpLHRoaXMuc2V0dGluZ3MubW91c2VEcmFnJiYodGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZHJhZ0NsYXNzKSx0aGlzLiRzdGFnZS5vbihcIm1vdXNlZG93bi5vd2wuY29yZVwiLGEucHJveHkodGhpcy5vbkRyYWdTdGFydCx0aGlzKSksdGhpcy4kc3RhZ2Uub24oXCJkcmFnc3RhcnQub3dsLmNvcmUgc2VsZWN0c3RhcnQub3dsLmNvcmVcIixmdW5jdGlvbigpe3JldHVybiExfSkpLHRoaXMuc2V0dGluZ3MudG91Y2hEcmFnJiYodGhpcy4kc3RhZ2Uub24oXCJ0b3VjaHN0YXJ0Lm93bC5jb3JlXCIsYS5wcm94eSh0aGlzLm9uRHJhZ1N0YXJ0LHRoaXMpKSx0aGlzLiRzdGFnZS5vbihcInRvdWNoY2FuY2VsLm93bC5jb3JlXCIsYS5wcm94eSh0aGlzLm9uRHJhZ0VuZCx0aGlzKSkpfSxlLnByb3RvdHlwZS5vbkRyYWdTdGFydD1mdW5jdGlvbihiKXt2YXIgZD1udWxsOzMhPT1iLndoaWNoJiYoYS5zdXBwb3J0LnRyYW5zZm9ybT8oZD10aGlzLiRzdGFnZS5jc3MoXCJ0cmFuc2Zvcm1cIikucmVwbGFjZSgvLipcXCh8XFwpfCAvZyxcIlwiKS5zcGxpdChcIixcIiksZD17eDpkWzE2PT09ZC5sZW5ndGg/MTI6NF0seTpkWzE2PT09ZC5sZW5ndGg/MTM6NV19KTooZD10aGlzLiRzdGFnZS5wb3NpdGlvbigpLGQ9e3g6dGhpcy5zZXR0aW5ncy5ydGw/ZC5sZWZ0K3RoaXMuJHN0YWdlLndpZHRoKCktdGhpcy53aWR0aCgpK3RoaXMuc2V0dGluZ3MubWFyZ2luOmQubGVmdCx5OmQudG9wfSksdGhpcy5pcyhcImFuaW1hdGluZ1wiKSYmKGEuc3VwcG9ydC50cmFuc2Zvcm0/dGhpcy5hbmltYXRlKGQueCk6dGhpcy4kc3RhZ2Uuc3RvcCgpLHRoaXMuaW52YWxpZGF0ZShcInBvc2l0aW9uXCIpKSx0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMub3B0aW9ucy5ncmFiQ2xhc3MsXCJtb3VzZWRvd25cIj09PWIudHlwZSksdGhpcy5zcGVlZCgwKSx0aGlzLl9kcmFnLnRpbWU9KG5ldyBEYXRlKS5nZXRUaW1lKCksdGhpcy5fZHJhZy50YXJnZXQ9YShiLnRhcmdldCksdGhpcy5fZHJhZy5zdGFnZS5zdGFydD1kLHRoaXMuX2RyYWcuc3RhZ2UuY3VycmVudD1kLHRoaXMuX2RyYWcucG9pbnRlcj10aGlzLnBvaW50ZXIoYiksYShjKS5vbihcIm1vdXNldXAub3dsLmNvcmUgdG91Y2hlbmQub3dsLmNvcmVcIixhLnByb3h5KHRoaXMub25EcmFnRW5kLHRoaXMpKSxhKGMpLm9uZShcIm1vdXNlbW92ZS5vd2wuY29yZSB0b3VjaG1vdmUub3dsLmNvcmVcIixhLnByb3h5KGZ1bmN0aW9uKGIpe3ZhciBkPXRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnBvaW50ZXIsdGhpcy5wb2ludGVyKGIpKTthKGMpLm9uKFwibW91c2Vtb3ZlLm93bC5jb3JlIHRvdWNobW92ZS5vd2wuY29yZVwiLGEucHJveHkodGhpcy5vbkRyYWdNb3ZlLHRoaXMpKSxNYXRoLmFicyhkLngpPE1hdGguYWJzKGQueSkmJnRoaXMuaXMoXCJ2YWxpZFwiKXx8KGIucHJldmVudERlZmF1bHQoKSx0aGlzLmVudGVyKFwiZHJhZ2dpbmdcIiksdGhpcy50cmlnZ2VyKFwiZHJhZ1wiKSl9LHRoaXMpKSl9LGUucHJvdG90eXBlLm9uRHJhZ01vdmU9ZnVuY3Rpb24oYSl7dmFyIGI9bnVsbCxjPW51bGwsZD1udWxsLGU9dGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlcix0aGlzLnBvaW50ZXIoYSkpLGY9dGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcuc3RhZ2Uuc3RhcnQsZSk7dGhpcy5pcyhcImRyYWdnaW5nXCIpJiYoYS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuc2V0dGluZ3MubG9vcD8oYj10aGlzLmNvb3JkaW5hdGVzKHRoaXMubWluaW11bSgpKSxjPXRoaXMuY29vcmRpbmF0ZXModGhpcy5tYXhpbXVtKCkrMSktYixmLng9KChmLngtYiklYytjKSVjK2IpOihiPXRoaXMuc2V0dGluZ3MucnRsP3RoaXMuY29vcmRpbmF0ZXModGhpcy5tYXhpbXVtKCkpOnRoaXMuY29vcmRpbmF0ZXModGhpcy5taW5pbXVtKCkpLGM9dGhpcy5zZXR0aW5ncy5ydGw/dGhpcy5jb29yZGluYXRlcyh0aGlzLm1pbmltdW0oKSk6dGhpcy5jb29yZGluYXRlcyh0aGlzLm1heGltdW0oKSksZD10aGlzLnNldHRpbmdzLnB1bGxEcmFnPy0xKmUueC81OjAsZi54PU1hdGgubWF4KE1hdGgubWluKGYueCxiK2QpLGMrZCkpLHRoaXMuX2RyYWcuc3RhZ2UuY3VycmVudD1mLHRoaXMuYW5pbWF0ZShmLngpKX0sZS5wcm90b3R5cGUub25EcmFnRW5kPWZ1bmN0aW9uKGIpe3ZhciBkPXRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnBvaW50ZXIsdGhpcy5wb2ludGVyKGIpKSxlPXRoaXMuX2RyYWcuc3RhZ2UuY3VycmVudCxmPWQueD4wXnRoaXMuc2V0dGluZ3MucnRsP1wibGVmdFwiOlwicmlnaHRcIjthKGMpLm9mZihcIi5vd2wuY29yZVwiKSx0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ncmFiQ2xhc3MpLCgwIT09ZC54JiZ0aGlzLmlzKFwiZHJhZ2dpbmdcIil8fCF0aGlzLmlzKFwidmFsaWRcIikpJiYodGhpcy5zcGVlZCh0aGlzLnNldHRpbmdzLmRyYWdFbmRTcGVlZHx8dGhpcy5zZXR0aW5ncy5zbWFydFNwZWVkKSx0aGlzLmN1cnJlbnQodGhpcy5jbG9zZXN0KGUueCwwIT09ZC54P2Y6dGhpcy5fZHJhZy5kaXJlY3Rpb24pKSx0aGlzLmludmFsaWRhdGUoXCJwb3NpdGlvblwiKSx0aGlzLnVwZGF0ZSgpLHRoaXMuX2RyYWcuZGlyZWN0aW9uPWYsKE1hdGguYWJzKGQueCk+M3x8KG5ldyBEYXRlKS5nZXRUaW1lKCktdGhpcy5fZHJhZy50aW1lPjMwMCkmJnRoaXMuX2RyYWcudGFyZ2V0Lm9uZShcImNsaWNrLm93bC5jb3JlXCIsZnVuY3Rpb24oKXtyZXR1cm4hMX0pKSx0aGlzLmlzKFwiZHJhZ2dpbmdcIikmJih0aGlzLmxlYXZlKFwiZHJhZ2dpbmdcIiksdGhpcy50cmlnZ2VyKFwiZHJhZ2dlZFwiKSl9LGUucHJvdG90eXBlLmNsb3Nlc3Q9ZnVuY3Rpb24oYixjKXt2YXIgZD0tMSxlPTMwLGY9dGhpcy53aWR0aCgpLGc9dGhpcy5jb29yZGluYXRlcygpO3JldHVybiB0aGlzLnNldHRpbmdzLmZyZWVEcmFnfHxhLmVhY2goZyxhLnByb3h5KGZ1bmN0aW9uKGEsaCl7cmV0dXJuXCJsZWZ0XCI9PT1jJiZiPmgtZSYmYjxoK2U/ZD1hOlwicmlnaHRcIj09PWMmJmI+aC1mLWUmJmI8aC1mK2U/ZD1hKzE6dGhpcy5vcChiLFwiPFwiLGgpJiZ0aGlzLm9wKGIsXCI+XCIsZ1thKzFdfHxoLWYpJiYoZD1cImxlZnRcIj09PWM/YSsxOmEpLGQ9PT0tMX0sdGhpcykpLHRoaXMuc2V0dGluZ3MubG9vcHx8KHRoaXMub3AoYixcIj5cIixnW3RoaXMubWluaW11bSgpXSk/ZD1iPXRoaXMubWluaW11bSgpOnRoaXMub3AoYixcIjxcIixnW3RoaXMubWF4aW11bSgpXSkmJihkPWI9dGhpcy5tYXhpbXVtKCkpKSxkfSxlLnByb3RvdHlwZS5hbmltYXRlPWZ1bmN0aW9uKGIpe3ZhciBjPXRoaXMuc3BlZWQoKT4wO3RoaXMuaXMoXCJhbmltYXRpbmdcIikmJnRoaXMub25UcmFuc2l0aW9uRW5kKCksYyYmKHRoaXMuZW50ZXIoXCJhbmltYXRpbmdcIiksdGhpcy50cmlnZ2VyKFwidHJhbnNsYXRlXCIpKSxhLnN1cHBvcnQudHJhbnNmb3JtM2QmJmEuc3VwcG9ydC50cmFuc2l0aW9uP3RoaXMuJHN0YWdlLmNzcyh7dHJhbnNmb3JtOlwidHJhbnNsYXRlM2QoXCIrYitcInB4LDBweCwwcHgpXCIsdHJhbnNpdGlvbjp0aGlzLnNwZWVkKCkvMWUzK1wic1wifSk6Yz90aGlzLiRzdGFnZS5hbmltYXRlKHtsZWZ0OmIrXCJweFwifSx0aGlzLnNwZWVkKCksdGhpcy5zZXR0aW5ncy5mYWxsYmFja0Vhc2luZyxhLnByb3h5KHRoaXMub25UcmFuc2l0aW9uRW5kLHRoaXMpKTp0aGlzLiRzdGFnZS5jc3Moe2xlZnQ6YitcInB4XCJ9KX0sZS5wcm90b3R5cGUuaXM9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuX3N0YXRlcy5jdXJyZW50W2FdJiZ0aGlzLl9zdGF0ZXMuY3VycmVudFthXT4wfSxlLnByb3RvdHlwZS5jdXJyZW50PWZ1bmN0aW9uKGEpe2lmKGE9PT1kKXJldHVybiB0aGlzLl9jdXJyZW50O2lmKDA9PT10aGlzLl9pdGVtcy5sZW5ndGgpcmV0dXJuIGQ7aWYoYT10aGlzLm5vcm1hbGl6ZShhKSx0aGlzLl9jdXJyZW50IT09YSl7dmFyIGI9dGhpcy50cmlnZ2VyKFwiY2hhbmdlXCIse3Byb3BlcnR5OntuYW1lOlwicG9zaXRpb25cIix2YWx1ZTphfX0pO2IuZGF0YSE9PWQmJihhPXRoaXMubm9ybWFsaXplKGIuZGF0YSkpLHRoaXMuX2N1cnJlbnQ9YSx0aGlzLmludmFsaWRhdGUoXCJwb3NpdGlvblwiKSx0aGlzLnRyaWdnZXIoXCJjaGFuZ2VkXCIse3Byb3BlcnR5OntuYW1lOlwicG9zaXRpb25cIix2YWx1ZTp0aGlzLl9jdXJyZW50fX0pfXJldHVybiB0aGlzLl9jdXJyZW50fSxlLnByb3RvdHlwZS5pbnZhbGlkYXRlPWZ1bmN0aW9uKGIpe3JldHVyblwic3RyaW5nXCI9PT1hLnR5cGUoYikmJih0aGlzLl9pbnZhbGlkYXRlZFtiXT0hMCx0aGlzLmlzKFwidmFsaWRcIikmJnRoaXMubGVhdmUoXCJ2YWxpZFwiKSksYS5tYXAodGhpcy5faW52YWxpZGF0ZWQsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYn0pfSxlLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbihhKXthPXRoaXMubm9ybWFsaXplKGEpLGEhPT1kJiYodGhpcy5fc3BlZWQ9MCx0aGlzLl9jdXJyZW50PWEsdGhpcy5zdXBwcmVzcyhbXCJ0cmFuc2xhdGVcIixcInRyYW5zbGF0ZWRcIl0pLHRoaXMuYW5pbWF0ZSh0aGlzLmNvb3JkaW5hdGVzKGEpKSx0aGlzLnJlbGVhc2UoW1widHJhbnNsYXRlXCIsXCJ0cmFuc2xhdGVkXCJdKSl9LGUucHJvdG90eXBlLm5vcm1hbGl6ZT1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2l0ZW1zLmxlbmd0aCxlPWI/MDp0aGlzLl9jbG9uZXMubGVuZ3RoO3JldHVybiF0aGlzLmlzTnVtZXJpYyhhKXx8YzwxP2E9ZDooYTwwfHxhPj1jK2UpJiYoYT0oKGEtZS8yKSVjK2MpJWMrZS8yKSxhfSxlLnByb3RvdHlwZS5yZWxhdGl2ZT1mdW5jdGlvbihhKXtyZXR1cm4gYS09dGhpcy5fY2xvbmVzLmxlbmd0aC8yLHRoaXMubm9ybWFsaXplKGEsITApfSxlLnByb3RvdHlwZS5tYXhpbXVtPWZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlPXRoaXMuc2V0dGluZ3MsZj10aGlzLl9jb29yZGluYXRlcy5sZW5ndGg7aWYoZS5sb29wKWY9dGhpcy5fY2xvbmVzLmxlbmd0aC8yK3RoaXMuX2l0ZW1zLmxlbmd0aC0xO2Vsc2UgaWYoZS5hdXRvV2lkdGh8fGUubWVyZ2Upe2ZvcihiPXRoaXMuX2l0ZW1zLmxlbmd0aCxjPXRoaXMuX2l0ZW1zWy0tYl0ud2lkdGgoKSxkPXRoaXMuJGVsZW1lbnQud2lkdGgoKTtiLS0mJihjKz10aGlzLl9pdGVtc1tiXS53aWR0aCgpK3RoaXMuc2V0dGluZ3MubWFyZ2luLCEoYz5kKSk7KTtmPWIrMX1lbHNlIGY9ZS5jZW50ZXI/dGhpcy5faXRlbXMubGVuZ3RoLTE6dGhpcy5faXRlbXMubGVuZ3RoLWUuaXRlbXM7cmV0dXJuIGEmJihmLT10aGlzLl9jbG9uZXMubGVuZ3RoLzIpLE1hdGgubWF4KGYsMCl9LGUucHJvdG90eXBlLm1pbmltdW09ZnVuY3Rpb24oYSl7cmV0dXJuIGE/MDp0aGlzLl9jbG9uZXMubGVuZ3RoLzJ9LGUucHJvdG90eXBlLml0ZW1zPWZ1bmN0aW9uKGEpe3JldHVybiBhPT09ZD90aGlzLl9pdGVtcy5zbGljZSgpOihhPXRoaXMubm9ybWFsaXplKGEsITApLHRoaXMuX2l0ZW1zW2FdKX0sZS5wcm90b3R5cGUubWVyZ2Vycz1mdW5jdGlvbihhKXtyZXR1cm4gYT09PWQ/dGhpcy5fbWVyZ2Vycy5zbGljZSgpOihhPXRoaXMubm9ybWFsaXplKGEsITApLHRoaXMuX21lcmdlcnNbYV0pfSxlLnByb3RvdHlwZS5jbG9uZXM9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5fY2xvbmVzLmxlbmd0aC8yLGU9Yyt0aGlzLl9pdGVtcy5sZW5ndGgsZj1mdW5jdGlvbihhKXtyZXR1cm4gYSUyPT09MD9lK2EvMjpjLShhKzEpLzJ9O3JldHVybiBiPT09ZD9hLm1hcCh0aGlzLl9jbG9uZXMsZnVuY3Rpb24oYSxiKXtyZXR1cm4gZihiKX0pOmEubWFwKHRoaXMuX2Nsb25lcyxmdW5jdGlvbihhLGMpe3JldHVybiBhPT09Yj9mKGMpOm51bGx9KX0sZS5wcm90b3R5cGUuc3BlZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGEhPT1kJiYodGhpcy5fc3BlZWQ9YSksdGhpcy5fc3BlZWR9LGUucHJvdG90eXBlLmNvb3JkaW5hdGVzPWZ1bmN0aW9uKGIpe3ZhciBjLGU9MSxmPWItMTtyZXR1cm4gYj09PWQ/YS5tYXAodGhpcy5fY29vcmRpbmF0ZXMsYS5wcm94eShmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmNvb3JkaW5hdGVzKGIpfSx0aGlzKSk6KHRoaXMuc2V0dGluZ3MuY2VudGVyPyh0aGlzLnNldHRpbmdzLnJ0bCYmKGU9LTEsZj1iKzEpLGM9dGhpcy5fY29vcmRpbmF0ZXNbYl0sYys9KHRoaXMud2lkdGgoKS1jKyh0aGlzLl9jb29yZGluYXRlc1tmXXx8MCkpLzIqZSk6Yz10aGlzLl9jb29yZGluYXRlc1tmXXx8MCxjPU1hdGguY2VpbChjKSl9LGUucHJvdG90eXBlLmR1cmF0aW9uPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gMD09PWM/MDpNYXRoLm1pbihNYXRoLm1heChNYXRoLmFicyhiLWEpLDEpLDYpKk1hdGguYWJzKGN8fHRoaXMuc2V0dGluZ3Muc21hcnRTcGVlZCl9LGUucHJvdG90eXBlLnRvPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5jdXJyZW50KCksZD1udWxsLGU9YS10aGlzLnJlbGF0aXZlKGMpLGY9KGU+MCktKGU8MCksZz10aGlzLl9pdGVtcy5sZW5ndGgsaD10aGlzLm1pbmltdW0oKSxpPXRoaXMubWF4aW11bSgpO3RoaXMuc2V0dGluZ3MubG9vcD8oIXRoaXMuc2V0dGluZ3MucmV3aW5kJiZNYXRoLmFicyhlKT5nLzImJihlKz1mKi0xKmcpLGE9YytlLGQ9KChhLWgpJWcrZyklZytoLGQhPT1hJiZkLWU8PWkmJmQtZT4wJiYoYz1kLWUsYT1kLHRoaXMucmVzZXQoYykpKTp0aGlzLnNldHRpbmdzLnJld2luZD8oaSs9MSxhPShhJWkraSklaSk6YT1NYXRoLm1heChoLE1hdGgubWluKGksYSkpLHRoaXMuc3BlZWQodGhpcy5kdXJhdGlvbihjLGEsYikpLHRoaXMuY3VycmVudChhKSx0aGlzLiRlbGVtZW50LmlzKFwiOnZpc2libGVcIikmJnRoaXMudXBkYXRlKCl9LGUucHJvdG90eXBlLm5leHQ9ZnVuY3Rpb24oYSl7YT1hfHwhMSx0aGlzLnRvKHRoaXMucmVsYXRpdmUodGhpcy5jdXJyZW50KCkpKzEsYSl9LGUucHJvdG90eXBlLnByZXY9ZnVuY3Rpb24oYSl7YT1hfHwhMSx0aGlzLnRvKHRoaXMucmVsYXRpdmUodGhpcy5jdXJyZW50KCkpLTEsYSl9LGUucHJvdG90eXBlLm9uVHJhbnNpdGlvbkVuZD1mdW5jdGlvbihhKXtpZihhIT09ZCYmKGEuc3RvcFByb3BhZ2F0aW9uKCksKGEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fGEub3JpZ2luYWxUYXJnZXQpIT09dGhpcy4kc3RhZ2UuZ2V0KDApKSlyZXR1cm4hMTt0aGlzLmxlYXZlKFwiYW5pbWF0aW5nXCIpLHRoaXMudHJpZ2dlcihcInRyYW5zbGF0ZWRcIil9LGUucHJvdG90eXBlLnZpZXdwb3J0PWZ1bmN0aW9uKCl7dmFyIGQ7cmV0dXJuIHRoaXMub3B0aW9ucy5yZXNwb25zaXZlQmFzZUVsZW1lbnQhPT1iP2Q9YSh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUJhc2VFbGVtZW50KS53aWR0aCgpOmIuaW5uZXJXaWR0aD9kPWIuaW5uZXJXaWR0aDpjLmRvY3VtZW50RWxlbWVudCYmYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg/ZD1jLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDpjb25zb2xlLndhcm4oXCJDYW4gbm90IGRldGVjdCB2aWV3cG9ydCB3aWR0aC5cIiksZH0sZS5wcm90b3R5cGUucmVwbGFjZT1mdW5jdGlvbihiKXt0aGlzLiRzdGFnZS5lbXB0eSgpLHRoaXMuX2l0ZW1zPVtdLGImJihiPWIgaW5zdGFuY2VvZiBqUXVlcnk/YjphKGIpKSx0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3RvciYmKGI9Yi5maW5kKFwiLlwiK3RoaXMuc2V0dGluZ3MubmVzdGVkSXRlbVNlbGVjdG9yKSksYi5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4gMT09PXRoaXMubm9kZVR5cGV9KS5lYWNoKGEucHJveHkoZnVuY3Rpb24oYSxiKXtiPXRoaXMucHJlcGFyZShiKSx0aGlzLiRzdGFnZS5hcHBlbmQoYiksdGhpcy5faXRlbXMucHVzaChiKSx0aGlzLl9tZXJnZXJzLnB1c2goMSpiLmZpbmQoXCJbZGF0YS1tZXJnZV1cIikuYWRkQmFjayhcIltkYXRhLW1lcmdlXVwiKS5hdHRyKFwiZGF0YS1tZXJnZVwiKXx8MSl9LHRoaXMpKSx0aGlzLnJlc2V0KHRoaXMuaXNOdW1lcmljKHRoaXMuc2V0dGluZ3Muc3RhcnRQb3NpdGlvbik/dGhpcy5zZXR0aW5ncy5zdGFydFBvc2l0aW9uOjApLHRoaXMuaW52YWxpZGF0ZShcIml0ZW1zXCIpfSxlLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oYixjKXt2YXIgZT10aGlzLnJlbGF0aXZlKHRoaXMuX2N1cnJlbnQpO2M9Yz09PWQ/dGhpcy5faXRlbXMubGVuZ3RoOnRoaXMubm9ybWFsaXplKGMsITApLGI9YiBpbnN0YW5jZW9mIGpRdWVyeT9iOmEoYiksdGhpcy50cmlnZ2VyKFwiYWRkXCIse2NvbnRlbnQ6Yixwb3NpdGlvbjpjfSksYj10aGlzLnByZXBhcmUoYiksMD09PXRoaXMuX2l0ZW1zLmxlbmd0aHx8Yz09PXRoaXMuX2l0ZW1zLmxlbmd0aD8oMD09PXRoaXMuX2l0ZW1zLmxlbmd0aCYmdGhpcy4kc3RhZ2UuYXBwZW5kKGIpLDAhPT10aGlzLl9pdGVtcy5sZW5ndGgmJnRoaXMuX2l0ZW1zW2MtMV0uYWZ0ZXIoYiksdGhpcy5faXRlbXMucHVzaChiKSx0aGlzLl9tZXJnZXJzLnB1c2goMSpiLmZpbmQoXCJbZGF0YS1tZXJnZV1cIikuYWRkQmFjayhcIltkYXRhLW1lcmdlXVwiKS5hdHRyKFwiZGF0YS1tZXJnZVwiKXx8MSkpOih0aGlzLl9pdGVtc1tjXS5iZWZvcmUoYiksdGhpcy5faXRlbXMuc3BsaWNlKGMsMCxiKSx0aGlzLl9tZXJnZXJzLnNwbGljZShjLDAsMSpiLmZpbmQoXCJbZGF0YS1tZXJnZV1cIikuYWRkQmFjayhcIltkYXRhLW1lcmdlXVwiKS5hdHRyKFwiZGF0YS1tZXJnZVwiKXx8MSkpLHRoaXMuX2l0ZW1zW2VdJiZ0aGlzLnJlc2V0KHRoaXMuX2l0ZW1zW2VdLmluZGV4KCkpLHRoaXMuaW52YWxpZGF0ZShcIml0ZW1zXCIpLHRoaXMudHJpZ2dlcihcImFkZGVkXCIse2NvbnRlbnQ6Yixwb3NpdGlvbjpjfSl9LGUucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbihhKXthPXRoaXMubm9ybWFsaXplKGEsITApLGEhPT1kJiYodGhpcy50cmlnZ2VyKFwicmVtb3ZlXCIse2NvbnRlbnQ6dGhpcy5faXRlbXNbYV0scG9zaXRpb246YX0pLHRoaXMuX2l0ZW1zW2FdLnJlbW92ZSgpLHRoaXMuX2l0ZW1zLnNwbGljZShhLDEpLHRoaXMuX21lcmdlcnMuc3BsaWNlKGEsMSksdGhpcy5pbnZhbGlkYXRlKFwiaXRlbXNcIiksdGhpcy50cmlnZ2VyKFwicmVtb3ZlZFwiLHtjb250ZW50Om51bGwscG9zaXRpb246YX0pKX0sZS5wcm90b3R5cGUucHJlbG9hZEF1dG9XaWR0aEltYWdlcz1mdW5jdGlvbihiKXtiLmVhY2goYS5wcm94eShmdW5jdGlvbihiLGMpe3RoaXMuZW50ZXIoXCJwcmUtbG9hZGluZ1wiKSxjPWEoYyksYShuZXcgSW1hZ2UpLm9uZShcImxvYWRcIixhLnByb3h5KGZ1bmN0aW9uKGEpe2MuYXR0cihcInNyY1wiLGEudGFyZ2V0LnNyYyksYy5jc3MoXCJvcGFjaXR5XCIsMSksdGhpcy5sZWF2ZShcInByZS1sb2FkaW5nXCIpLCF0aGlzLmlzKFwicHJlLWxvYWRpbmdcIikmJiF0aGlzLmlzKFwiaW5pdGlhbGl6aW5nXCIpJiZ0aGlzLnJlZnJlc2goKX0sdGhpcykpLmF0dHIoXCJzcmNcIixjLmF0dHIoXCJzcmNcIil8fGMuYXR0cihcImRhdGEtc3JjXCIpfHxjLmF0dHIoXCJkYXRhLXNyYy1yZXRpbmFcIikpfSx0aGlzKSl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt0aGlzLiRlbGVtZW50Lm9mZihcIi5vd2wuY29yZVwiKSx0aGlzLiRzdGFnZS5vZmYoXCIub3dsLmNvcmVcIiksYShjKS5vZmYoXCIub3dsLmNvcmVcIiksdGhpcy5zZXR0aW5ncy5yZXNwb25zaXZlIT09ITEmJihiLmNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRpbWVyKSx0aGlzLm9mZihiLFwicmVzaXplXCIsdGhpcy5faGFuZGxlcnMub25UaHJvdHRsZWRSZXNpemUpKTtmb3IodmFyIGQgaW4gdGhpcy5fcGx1Z2lucyl0aGlzLl9wbHVnaW5zW2RdLmRlc3Ryb3koKTt0aGlzLiRzdGFnZS5jaGlsZHJlbihcIi5jbG9uZWRcIikucmVtb3ZlKCksdGhpcy4kc3RhZ2UudW53cmFwKCksdGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS5jb250ZW50cygpLnVud3JhcCgpLHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkudW53cmFwKCksdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMucmVmcmVzaENsYXNzKS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGluZ0NsYXNzKS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGVkQ2xhc3MpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ydGxDbGFzcykucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmRyYWdDbGFzcykucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmdyYWJDbGFzcykuYXR0cihcImNsYXNzXCIsdGhpcy4kZWxlbWVudC5hdHRyKFwiY2xhc3NcIikucmVwbGFjZShuZXcgUmVnRXhwKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlQ2xhc3MrXCItXFxcXFMrXFxcXHNcIixcImdcIiksXCJcIikpLnJlbW92ZURhdGEoXCJvd2wuY2Fyb3VzZWxcIil9LGUucHJvdG90eXBlLm9wPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLnNldHRpbmdzLnJ0bDtzd2l0Y2goYil7Y2FzZVwiPFwiOnJldHVybiBkP2E+YzphPGM7Y2FzZVwiPlwiOnJldHVybiBkP2E8YzphPmM7Y2FzZVwiPj1cIjpyZXR1cm4gZD9hPD1jOmE+PWM7Y2FzZVwiPD1cIjpyZXR1cm4gZD9hPj1jOmE8PWN9fSxlLnByb3RvdHlwZS5vbj1mdW5jdGlvbihhLGIsYyxkKXthLmFkZEV2ZW50TGlzdGVuZXI/YS5hZGRFdmVudExpc3RlbmVyKGIsYyxkKTphLmF0dGFjaEV2ZW50JiZhLmF0dGFjaEV2ZW50KFwib25cIitiLGMpfSxlLnByb3RvdHlwZS5vZmY9ZnVuY3Rpb24oYSxiLGMsZCl7YS5yZW1vdmVFdmVudExpc3RlbmVyP2EucmVtb3ZlRXZlbnRMaXN0ZW5lcihiLGMsZCk6YS5kZXRhY2hFdmVudCYmYS5kZXRhY2hFdmVudChcIm9uXCIrYixjKX0sZS5wcm90b3R5cGUudHJpZ2dlcj1mdW5jdGlvbihiLGMsZCxmLGcpe3ZhciBoPXtpdGVtOntjb3VudDp0aGlzLl9pdGVtcy5sZW5ndGgsaW5kZXg6dGhpcy5jdXJyZW50KCl9fSxpPWEuY2FtZWxDYXNlKGEuZ3JlcChbXCJvblwiLGIsZF0sZnVuY3Rpb24oYSl7cmV0dXJuIGF9KS5qb2luKFwiLVwiKS50b0xvd2VyQ2FzZSgpKSxqPWEuRXZlbnQoW2IsXCJvd2xcIixkfHxcImNhcm91c2VsXCJdLmpvaW4oXCIuXCIpLnRvTG93ZXJDYXNlKCksYS5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6dGhpc30saCxjKSk7cmV0dXJuIHRoaXMuX3N1cHJlc3NbYl18fChhLmVhY2godGhpcy5fcGx1Z2lucyxmdW5jdGlvbihhLGIpe2Iub25UcmlnZ2VyJiZiLm9uVHJpZ2dlcihqKX0pLHRoaXMucmVnaXN0ZXIoe3R5cGU6ZS5UeXBlLkV2ZW50LG5hbWU6Yn0pLHRoaXMuJGVsZW1lbnQudHJpZ2dlcihqKSx0aGlzLnNldHRpbmdzJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLnNldHRpbmdzW2ldJiZ0aGlzLnNldHRpbmdzW2ldLmNhbGwodGhpcyxqKSksan0sZS5wcm90b3R5cGUuZW50ZXI9ZnVuY3Rpb24oYil7YS5lYWNoKFtiXS5jb25jYXQodGhpcy5fc3RhdGVzLnRhZ3NbYl18fFtdKSxhLnByb3h5KGZ1bmN0aW9uKGEsYil7dGhpcy5fc3RhdGVzLmN1cnJlbnRbYl09PT1kJiYodGhpcy5fc3RhdGVzLmN1cnJlbnRbYl09MCksdGhpcy5fc3RhdGVzLmN1cnJlbnRbYl0rK30sdGhpcykpfSxlLnByb3RvdHlwZS5sZWF2ZT1mdW5jdGlvbihiKXthLmVhY2goW2JdLmNvbmNhdCh0aGlzLl9zdGF0ZXMudGFnc1tiXXx8W10pLGEucHJveHkoZnVuY3Rpb24oYSxiKXt0aGlzLl9zdGF0ZXMuY3VycmVudFtiXS0tfSx0aGlzKSl9LGUucHJvdG90eXBlLnJlZ2lzdGVyPWZ1bmN0aW9uKGIpe2lmKGIudHlwZT09PWUuVHlwZS5FdmVudCl7aWYoYS5ldmVudC5zcGVjaWFsW2IubmFtZV18fChhLmV2ZW50LnNwZWNpYWxbYi5uYW1lXT17fSksIWEuZXZlbnQuc3BlY2lhbFtiLm5hbWVdLm93bCl7dmFyIGM9YS5ldmVudC5zcGVjaWFsW2IubmFtZV0uX2RlZmF1bHQ7YS5ldmVudC5zcGVjaWFsW2IubmFtZV0uX2RlZmF1bHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIWN8fCFjLmFwcGx5fHxhLm5hbWVzcGFjZSYmYS5uYW1lc3BhY2UuaW5kZXhPZihcIm93bFwiKSE9PS0xP2EubmFtZXNwYWNlJiZhLm5hbWVzcGFjZS5pbmRleE9mKFwib3dsXCIpPi0xOmMuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxhLmV2ZW50LnNwZWNpYWxbYi5uYW1lXS5vd2w9ITB9fWVsc2UgYi50eXBlPT09ZS5UeXBlLlN0YXRlJiYodGhpcy5fc3RhdGVzLnRhZ3NbYi5uYW1lXT90aGlzLl9zdGF0ZXMudGFnc1tiLm5hbWVdPXRoaXMuX3N0YXRlcy50YWdzW2IubmFtZV0uY29uY2F0KGIudGFncyk6dGhpcy5fc3RhdGVzLnRhZ3NbYi5uYW1lXT1iLnRhZ3MsdGhpcy5fc3RhdGVzLnRhZ3NbYi5uYW1lXT1hLmdyZXAodGhpcy5fc3RhdGVzLnRhZ3NbYi5uYW1lXSxhLnByb3h5KGZ1bmN0aW9uKGMsZCl7cmV0dXJuIGEuaW5BcnJheShjLHRoaXMuX3N0YXRlcy50YWdzW2IubmFtZV0pPT09ZH0sdGhpcykpKX0sZS5wcm90b3R5cGUuc3VwcHJlc3M9ZnVuY3Rpb24oYil7YS5lYWNoKGIsYS5wcm94eShmdW5jdGlvbihhLGIpe3RoaXMuX3N1cHJlc3NbYl09ITB9LHRoaXMpKX0sZS5wcm90b3R5cGUucmVsZWFzZT1mdW5jdGlvbihiKXthLmVhY2goYixhLnByb3h5KGZ1bmN0aW9uKGEsYil7ZGVsZXRlIHRoaXMuX3N1cHJlc3NbYl19LHRoaXMpKX0sZS5wcm90b3R5cGUucG9pbnRlcj1mdW5jdGlvbihhKXt2YXIgYz17eDpudWxsLHk6bnVsbH07cmV0dXJuIGE9YS5vcmlnaW5hbEV2ZW50fHxhfHxiLmV2ZW50LGE9YS50b3VjaGVzJiZhLnRvdWNoZXMubGVuZ3RoP2EudG91Y2hlc1swXTphLmNoYW5nZWRUb3VjaGVzJiZhLmNoYW5nZWRUb3VjaGVzLmxlbmd0aD9hLmNoYW5nZWRUb3VjaGVzWzBdOmEsYS5wYWdlWD8oYy54PWEucGFnZVgsYy55PWEucGFnZVkpOihjLng9YS5jbGllbnRYLGMueT1hLmNsaWVudFkpLGN9LGUucHJvdG90eXBlLmlzTnVtZXJpYz1mdW5jdGlvbihhKXtyZXR1cm4haXNOYU4ocGFyc2VGbG9hdChhKSl9LGUucHJvdG90eXBlLmRpZmZlcmVuY2U9ZnVuY3Rpb24oYSxiKXtyZXR1cm57eDphLngtYi54LHk6YS55LWIueX19LGEuZm4ub3dsQ2Fyb3VzZWw9ZnVuY3Rpb24oYil7dmFyIGM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZD1hKHRoaXMpLGY9ZC5kYXRhKFwib3dsLmNhcm91c2VsXCIpO2Z8fChmPW5ldyBlKHRoaXMsXCJvYmplY3RcIj09dHlwZW9mIGImJmIpLGQuZGF0YShcIm93bC5jYXJvdXNlbFwiLGYpLGEuZWFjaChbXCJuZXh0XCIsXCJwcmV2XCIsXCJ0b1wiLFwiZGVzdHJveVwiLFwicmVmcmVzaFwiLFwicmVwbGFjZVwiLFwiYWRkXCIsXCJyZW1vdmVcIl0sZnVuY3Rpb24oYixjKXtmLnJlZ2lzdGVyKHt0eXBlOmUuVHlwZS5FdmVudCxuYW1lOmN9KSxmLiRlbGVtZW50Lm9uKGMrXCIub3dsLmNhcm91c2VsLmNvcmVcIixhLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZhLnJlbGF0ZWRUYXJnZXQhPT10aGlzJiYodGhpcy5zdXBwcmVzcyhbY10pLGZbY10uYXBwbHkodGhpcyxbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSksdGhpcy5yZWxlYXNlKFtjXSkpfSxmKSl9KSksXCJzdHJpbmdcIj09dHlwZW9mIGImJlwiX1wiIT09Yi5jaGFyQXQoMCkmJmZbYl0uYXBwbHkoZixjKX0pfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yPWV9KHdpbmRvdy5aZXB0b3x8d2luZG93LmpRdWVyeSx3aW5kb3csZG9jdW1lbnQpLGZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWZ1bmN0aW9uKGIpe3RoaXMuX2NvcmU9Yix0aGlzLl9pbnRlcnZhbD1udWxsLHRoaXMuX3Zpc2libGU9bnVsbCx0aGlzLl9oYW5kbGVycz17XCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9SZWZyZXNoJiZ0aGlzLndhdGNoKCl9LHRoaXMpfSx0aGlzLl9jb3JlLm9wdGlvbnM9YS5leHRlbmQoe30sZS5EZWZhdWx0cyx0aGlzLl9jb3JlLm9wdGlvbnMpLHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpfTtlLkRlZmF1bHRzPXthdXRvUmVmcmVzaDohMCxhdXRvUmVmcmVzaEludGVydmFsOjUwMH0sZS5wcm90b3R5cGUud2F0Y2g9ZnVuY3Rpb24oKXt0aGlzLl9pbnRlcnZhbHx8KHRoaXMuX3Zpc2libGU9dGhpcy5fY29yZS4kZWxlbWVudC5pcyhcIjp2aXNpYmxlXCIpLHRoaXMuX2ludGVydmFsPWIuc2V0SW50ZXJ2YWwoYS5wcm94eSh0aGlzLnJlZnJlc2gsdGhpcyksdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvUmVmcmVzaEludGVydmFsKSl9LGUucHJvdG90eXBlLnJlZnJlc2g9ZnVuY3Rpb24oKXt0aGlzLl9jb3JlLiRlbGVtZW50LmlzKFwiOnZpc2libGVcIikhPT10aGlzLl92aXNpYmxlJiYodGhpcy5fdmlzaWJsZT0hdGhpcy5fdmlzaWJsZSx0aGlzLl9jb3JlLiRlbGVtZW50LnRvZ2dsZUNsYXNzKFwib3dsLWhpZGRlblwiLCF0aGlzLl92aXNpYmxlKSx0aGlzLl92aXNpYmxlJiZ0aGlzLl9jb3JlLmludmFsaWRhdGUoXCJ3aWR0aFwiKSYmdGhpcy5fY29yZS5yZWZyZXNoKCkpfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGEsYztiLmNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO2ZvcihhIGluIHRoaXMuX2hhbmRsZXJzKXRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGEsdGhpcy5faGFuZGxlcnNbYV0pO2ZvcihjIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbY10mJih0aGlzW2NdPW51bGwpfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQXV0b1JlZnJlc2g9ZX0od2luZG93LlplcHRvfHx3aW5kb3cualF1ZXJ5LHdpbmRvdyxkb2N1bWVudCksZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZnVuY3Rpb24oYil7dGhpcy5fY29yZT1iLHRoaXMuX2xvYWRlZD1bXSx0aGlzLl9oYW5kbGVycz17XCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwgY2hhbmdlLm93bC5jYXJvdXNlbCByZXNpemVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYil7aWYoYi5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MmJnRoaXMuX2NvcmUuc2V0dGluZ3MubGF6eUxvYWQmJihiLnByb3BlcnR5JiZcInBvc2l0aW9uXCI9PWIucHJvcGVydHkubmFtZXx8XCJpbml0aWFsaXplZFwiPT1iLnR5cGUpKWZvcih2YXIgYz10aGlzLl9jb3JlLnNldHRpbmdzLGU9Yy5jZW50ZXImJk1hdGguY2VpbChjLml0ZW1zLzIpfHxjLml0ZW1zLGY9Yy5jZW50ZXImJmUqLTF8fDAsZz0oYi5wcm9wZXJ0eSYmYi5wcm9wZXJ0eS52YWx1ZSE9PWQ/Yi5wcm9wZXJ0eS52YWx1ZTp0aGlzLl9jb3JlLmN1cnJlbnQoKSkrZixoPXRoaXMuX2NvcmUuY2xvbmVzKCkubGVuZ3RoLGk9YS5wcm94eShmdW5jdGlvbihhLGIpe3RoaXMubG9hZChiKX0sdGhpcyk7ZisrPGU7KXRoaXMubG9hZChoLzIrdGhpcy5fY29yZS5yZWxhdGl2ZShnKSksaCYmYS5lYWNoKHRoaXMuX2NvcmUuY2xvbmVzKHRoaXMuX2NvcmUucmVsYXRpdmUoZykpLGkpLGcrK30sdGhpcyl9LHRoaXMuX2NvcmUub3B0aW9ucz1hLmV4dGVuZCh7fSxlLkRlZmF1bHRzLHRoaXMuX2NvcmUub3B0aW9ucyksdGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyl9O2UuRGVmYXVsdHM9e2xhenlMb2FkOiExfSxlLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGMpe3ZhciBkPXRoaXMuX2NvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEoYyksZT1kJiZkLmZpbmQoXCIub3dsLWxhenlcIik7IWV8fGEuaW5BcnJheShkLmdldCgwKSx0aGlzLl9sb2FkZWQpPi0xfHwoZS5lYWNoKGEucHJveHkoZnVuY3Rpb24oYyxkKXt2YXIgZSxmPWEoZCksZz1iLmRldmljZVBpeGVsUmF0aW8+MSYmZi5hdHRyKFwiZGF0YS1zcmMtcmV0aW5hXCIpfHxmLmF0dHIoXCJkYXRhLXNyY1wiKTt0aGlzLl9jb3JlLnRyaWdnZXIoXCJsb2FkXCIse2VsZW1lbnQ6Zix1cmw6Z30sXCJsYXp5XCIpLGYuaXMoXCJpbWdcIik/Zi5vbmUoXCJsb2FkLm93bC5sYXp5XCIsYS5wcm94eShmdW5jdGlvbigpe2YuY3NzKFwib3BhY2l0eVwiLDEpLHRoaXMuX2NvcmUudHJpZ2dlcihcImxvYWRlZFwiLHtlbGVtZW50OmYsdXJsOmd9LFwibGF6eVwiKX0sdGhpcykpLmF0dHIoXCJzcmNcIixnKTooZT1uZXcgSW1hZ2UsZS5vbmxvYWQ9YS5wcm94eShmdW5jdGlvbigpe2YuY3NzKHtcImJhY2tncm91bmQtaW1hZ2VcIjondXJsKFwiJytnKydcIiknLG9wYWNpdHk6XCIxXCJ9KSx0aGlzLl9jb3JlLnRyaWdnZXIoXCJsb2FkZWRcIix7ZWxlbWVudDpmLHVybDpnfSxcImxhenlcIil9LHRoaXMpLGUuc3JjPWcpfSx0aGlzKSksdGhpcy5fbG9hZGVkLnB1c2goZC5nZXQoMCkpKX0sZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3ZhciBhLGI7Zm9yKGEgaW4gdGhpcy5oYW5kbGVycyl0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihhLHRoaXMuaGFuZGxlcnNbYV0pO2ZvcihiIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbYl0mJih0aGlzW2JdPW51bGwpfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuTGF6eT1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1mdW5jdGlvbihiKXt0aGlzLl9jb3JlPWIsdGhpcy5faGFuZGxlcnM9e1wiaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsIHJlZnJlc2hlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHQmJnRoaXMudXBkYXRlKCl9LHRoaXMpLFwiY2hhbmdlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHQmJlwicG9zaXRpb25cIj09YS5wcm9wZXJ0eS5uYW1lJiZ0aGlzLnVwZGF0ZSgpfSx0aGlzKSxcImxvYWRlZC5vd2wubGF6eVwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCYmYS5lbGVtZW50LmNsb3Nlc3QoXCIuXCIrdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtQ2xhc3MpLmluZGV4KCk9PT10aGlzLl9jb3JlLmN1cnJlbnQoKSYmdGhpcy51cGRhdGUoKX0sdGhpcyl9LHRoaXMuX2NvcmUub3B0aW9ucz1hLmV4dGVuZCh7fSxlLkRlZmF1bHRzLHRoaXMuX2NvcmUub3B0aW9ucyksdGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyl9O2UuRGVmYXVsdHM9e2F1dG9IZWlnaHQ6ITEsYXV0b0hlaWdodENsYXNzOlwib3dsLWhlaWdodFwifSxlLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYj10aGlzLl9jb3JlLl9jdXJyZW50LGM9Yit0aGlzLl9jb3JlLnNldHRpbmdzLml0ZW1zLGQ9dGhpcy5fY29yZS4kc3RhZ2UuY2hpbGRyZW4oKS50b0FycmF5KCkuc2xpY2UoYixjKSxlPVtdLGY9MDthLmVhY2goZCxmdW5jdGlvbihiLGMpe2UucHVzaChhKGMpLmhlaWdodCgpKX0pLGY9TWF0aC5tYXguYXBwbHkobnVsbCxlKSx0aGlzLl9jb3JlLiRzdGFnZS5wYXJlbnQoKS5oZWlnaHQoZikuYWRkQ2xhc3ModGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0Q2xhc3MpfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGEsYjtmb3IoYSBpbiB0aGlzLl9oYW5kbGVycyl0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihhLHRoaXMuX2hhbmRsZXJzW2FdKTtmb3IoYiBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSlcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzW2JdJiYodGhpc1tiXT1udWxsKX0sYS5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkF1dG9IZWlnaHQ9ZX0od2luZG93LlplcHRvfHx3aW5kb3cualF1ZXJ5LHdpbmRvdyxkb2N1bWVudCksZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZnVuY3Rpb24oYil7dGhpcy5fY29yZT1iLHRoaXMuX3ZpZGVvcz17fSx0aGlzLl9wbGF5aW5nPW51bGwsdGhpcy5faGFuZGxlcnM9e1wiaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5yZWdpc3Rlcih7dHlwZTpcInN0YXRlXCIsbmFtZTpcInBsYXlpbmdcIix0YWdzOltcImludGVyYWN0aW5nXCJdfSl9LHRoaXMpLFwicmVzaXplLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MudmlkZW8mJnRoaXMuaXNJbkZ1bGxTY3JlZW4oKSYmYS5wcmV2ZW50RGVmYXVsdCgpfSx0aGlzKSxcInJlZnJlc2hlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLl9jb3JlLmlzKFwicmVzaXppbmdcIikmJnRoaXMuX2NvcmUuJHN0YWdlLmZpbmQoXCIuY2xvbmVkIC5vd2wtdmlkZW8tZnJhbWVcIikucmVtb3ZlKCl9LHRoaXMpLFwiY2hhbmdlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZcInBvc2l0aW9uXCI9PT1hLnByb3BlcnR5Lm5hbWUmJnRoaXMuX3BsYXlpbmcmJnRoaXMuc3RvcCgpfSx0aGlzKSxcInByZXBhcmVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYil7aWYoYi5uYW1lc3BhY2Upe3ZhciBjPWEoYi5jb250ZW50KS5maW5kKFwiLm93bC12aWRlb1wiKTtjLmxlbmd0aCYmKGMuY3NzKFwiZGlzcGxheVwiLFwibm9uZVwiKSx0aGlzLmZldGNoKGMsYShiLmNvbnRlbnQpKSl9fSx0aGlzKX0sdGhpcy5fY29yZS5vcHRpb25zPWEuZXh0ZW5kKHt9LGUuRGVmYXVsdHMsdGhpcy5fY29yZS5vcHRpb25zKSx0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKSx0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKFwiY2xpY2sub3dsLnZpZGVvXCIsXCIub3dsLXZpZGVvLXBsYXktaWNvblwiLGEucHJveHkoZnVuY3Rpb24oYSl7dGhpcy5wbGF5KGEpfSx0aGlzKSl9O2UuRGVmYXVsdHM9e3ZpZGVvOiExLHZpZGVvSGVpZ2h0OiExLHZpZGVvV2lkdGg6ITF9LGUucHJvdG90eXBlLmZldGNoPWZ1bmN0aW9uKGEsYil7dmFyIGM9ZnVuY3Rpb24oKXtyZXR1cm4gYS5hdHRyKFwiZGF0YS12aW1lby1pZFwiKT9cInZpbWVvXCI6YS5hdHRyKFwiZGF0YS12emFhci1pZFwiKT9cInZ6YWFyXCI6XCJ5b3V0dWJlXCJ9KCksZD1hLmF0dHIoXCJkYXRhLXZpbWVvLWlkXCIpfHxhLmF0dHIoXCJkYXRhLXlvdXR1YmUtaWRcIil8fGEuYXR0cihcImRhdGEtdnphYXItaWRcIiksZT1hLmF0dHIoXCJkYXRhLXdpZHRoXCIpfHx0aGlzLl9jb3JlLnNldHRpbmdzLnZpZGVvV2lkdGgsZj1hLmF0dHIoXCJkYXRhLWhlaWdodFwiKXx8dGhpcy5fY29yZS5zZXR0aW5ncy52aWRlb0hlaWdodCxnPWEuYXR0cihcImhyZWZcIik7aWYoIWcpdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB2aWRlbyBVUkwuXCIpO2lmKGQ9Zy5tYXRjaCgvKGh0dHA6fGh0dHBzOnwpXFwvXFwvKHBsYXllci58d3d3LnxhcHAuKT8odmltZW9cXC5jb218eW91dHUoYmVcXC5jb218XFwuYmV8YmVcXC5nb29nbGVhcGlzXFwuY29tKXx2emFhclxcLmNvbSlcXC8odmlkZW9cXC98dmlkZW9zXFwvfGVtYmVkXFwvfGNoYW5uZWxzXFwvLitcXC98Z3JvdXBzXFwvLitcXC98d2F0Y2hcXD92PXx2XFwvKT8oW0EtWmEtejAtOS5fJS1dKikoXFwmXFxTKyk/LyksZFszXS5pbmRleE9mKFwieW91dHVcIik+LTEpYz1cInlvdXR1YmVcIjtlbHNlIGlmKGRbM10uaW5kZXhPZihcInZpbWVvXCIpPi0xKWM9XCJ2aW1lb1wiO2Vsc2V7aWYoIShkWzNdLmluZGV4T2YoXCJ2emFhclwiKT4tMSkpdGhyb3cgbmV3IEVycm9yKFwiVmlkZW8gVVJMIG5vdCBzdXBwb3J0ZWQuXCIpO2M9XCJ2emFhclwifWQ9ZFs2XSx0aGlzLl92aWRlb3NbZ109e3R5cGU6YyxpZDpkLHdpZHRoOmUsaGVpZ2h0OmZ9LGIuYXR0cihcImRhdGEtdmlkZW9cIixnKSx0aGlzLnRodW1ibmFpbChhLHRoaXMuX3ZpZGVvc1tnXSl9LGUucHJvdG90eXBlLnRodW1ibmFpbD1mdW5jdGlvbihiLGMpe3ZhciBkLGUsZixnPWMud2lkdGgmJmMuaGVpZ2h0PydzdHlsZT1cIndpZHRoOicrYy53aWR0aCtcInB4O2hlaWdodDpcIitjLmhlaWdodCsncHg7XCInOlwiXCIsaD1iLmZpbmQoXCJpbWdcIiksaT1cInNyY1wiLGo9XCJcIixrPXRoaXMuX2NvcmUuc2V0dGluZ3MsbD1mdW5jdGlvbihhKXtlPSc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXBsYXktaWNvblwiPjwvZGl2PicsZD1rLmxhenlMb2FkPyc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXRuICcraisnXCIgJytpKyc9XCInK2ErJ1wiPjwvZGl2Pic6JzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tdG5cIiBzdHlsZT1cIm9wYWNpdHk6MTtiYWNrZ3JvdW5kLWltYWdlOnVybCgnK2ErJylcIj48L2Rpdj4nLGIuYWZ0ZXIoZCksYi5hZnRlcihlKX07aWYoYi53cmFwKCc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXdyYXBwZXJcIicrZytcIj48L2Rpdj5cIiksdGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCYmKGk9XCJkYXRhLXNyY1wiLGo9XCJvd2wtbGF6eVwiKSxoLmxlbmd0aClyZXR1cm4gbChoLmF0dHIoaSkpLGgucmVtb3ZlKCksITE7XCJ5b3V0dWJlXCI9PT1jLnR5cGU/KGY9XCIvL2ltZy55b3V0dWJlLmNvbS92aS9cIitjLmlkK1wiL2hxZGVmYXVsdC5qcGdcIixsKGYpKTpcInZpbWVvXCI9PT1jLnR5cGU/YS5hamF4KHt0eXBlOlwiR0VUXCIsdXJsOlwiLy92aW1lby5jb20vYXBpL3YyL3ZpZGVvL1wiK2MuaWQrXCIuanNvblwiLGpzb25wOlwiY2FsbGJhY2tcIixkYXRhVHlwZTpcImpzb25wXCIsc3VjY2VzczpmdW5jdGlvbihhKXtmPWFbMF0udGh1bWJuYWlsX2xhcmdlLGwoZil9fSk6XCJ2emFhclwiPT09Yy50eXBlJiZhLmFqYXgoe3R5cGU6XCJHRVRcIix1cmw6XCIvL3Z6YWFyLmNvbS9hcGkvdmlkZW9zL1wiK2MuaWQrXCIuanNvblwiLGpzb25wOlwiY2FsbGJhY2tcIixkYXRhVHlwZTpcImpzb25wXCIsc3VjY2VzczpmdW5jdGlvbihhKXtmPWEuZnJhbWVncmFiX3VybCxsKGYpfX0pfSxlLnByb3RvdHlwZS5zdG9wPWZ1bmN0aW9uKCl7dGhpcy5fY29yZS50cmlnZ2VyKFwic3RvcFwiLG51bGwsXCJ2aWRlb1wiKSx0aGlzLl9wbGF5aW5nLmZpbmQoXCIub3dsLXZpZGVvLWZyYW1lXCIpLnJlbW92ZSgpLHRoaXMuX3BsYXlpbmcucmVtb3ZlQ2xhc3MoXCJvd2wtdmlkZW8tcGxheWluZ1wiKSx0aGlzLl9wbGF5aW5nPW51bGwsdGhpcy5fY29yZS5sZWF2ZShcInBsYXlpbmdcIiksdGhpcy5fY29yZS50cmlnZ2VyKFwic3RvcHBlZFwiLG51bGwsXCJ2aWRlb1wiKX0sZS5wcm90b3R5cGUucGxheT1mdW5jdGlvbihiKXt2YXIgYyxkPWEoYi50YXJnZXQpLGU9ZC5jbG9zZXN0KFwiLlwiK3RoaXMuX2NvcmUuc2V0dGluZ3MuaXRlbUNsYXNzKSxmPXRoaXMuX3ZpZGVvc1tlLmF0dHIoXCJkYXRhLXZpZGVvXCIpXSxnPWYud2lkdGh8fFwiMTAwJVwiLGg9Zi5oZWlnaHR8fHRoaXMuX2NvcmUuJHN0YWdlLmhlaWdodCgpO3RoaXMuX3BsYXlpbmd8fCh0aGlzLl9jb3JlLmVudGVyKFwicGxheWluZ1wiKSx0aGlzLl9jb3JlLnRyaWdnZXIoXCJwbGF5XCIsbnVsbCxcInZpZGVvXCIpLGU9dGhpcy5fY29yZS5pdGVtcyh0aGlzLl9jb3JlLnJlbGF0aXZlKGUuaW5kZXgoKSkpLHRoaXMuX2NvcmUucmVzZXQoZS5pbmRleCgpKSxcInlvdXR1YmVcIj09PWYudHlwZT9jPSc8aWZyYW1lIHdpZHRoPVwiJytnKydcIiBoZWlnaHQ9XCInK2grJ1wiIHNyYz1cIi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLycrZi5pZCtcIj9hdXRvcGxheT0xJnJlbD0wJnY9XCIrZi5pZCsnXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPic6XCJ2aW1lb1wiPT09Zi50eXBlP2M9JzxpZnJhbWUgc3JjPVwiLy9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLycrZi5pZCsnP2F1dG9wbGF5PTFcIiB3aWR0aD1cIicrZysnXCIgaGVpZ2h0PVwiJytoKydcIiBmcmFtZWJvcmRlcj1cIjBcIiB3ZWJraXRhbGxvd2Z1bGxzY3JlZW4gbW96YWxsb3dmdWxsc2NyZWVuIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4nOlwidnphYXJcIj09PWYudHlwZSYmKGM9JzxpZnJhbWUgZnJhbWVib3JkZXI9XCIwXCJoZWlnaHQ9XCInK2grJ1wid2lkdGg9XCInK2crJ1wiIGFsbG93ZnVsbHNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gd2Via2l0QWxsb3dGdWxsU2NyZWVuIHNyYz1cIi8vdmlldy52emFhci5jb20vJytmLmlkKycvcGxheWVyP2F1dG9wbGF5PXRydWVcIj48L2lmcmFtZT4nKSxhKCc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLWZyYW1lXCI+JytjK1wiPC9kaXY+XCIpLmluc2VydEFmdGVyKGUuZmluZChcIi5vd2wtdmlkZW9cIikpLHRoaXMuX3BsYXlpbmc9ZS5hZGRDbGFzcyhcIm93bC12aWRlby1wbGF5aW5nXCIpKX0sZS5wcm90b3R5cGUuaXNJbkZ1bGxTY3JlZW49ZnVuY3Rpb24oKXt2YXIgYj1jLmZ1bGxzY3JlZW5FbGVtZW50fHxjLm1vekZ1bGxTY3JlZW5FbGVtZW50fHxjLndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50O3JldHVybiBiJiZhKGIpLnBhcmVudCgpLmhhc0NsYXNzKFwib3dsLXZpZGVvLWZyYW1lXCIpfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGEsYjt0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihcImNsaWNrLm93bC52aWRlb1wiKTtmb3IoYSBpbiB0aGlzLl9oYW5kbGVycyl0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihhLHRoaXMuX2hhbmRsZXJzW2FdKTtmb3IoYiBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSlcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzW2JdJiYodGhpc1tiXT1udWxsKX0sYS5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLlZpZGVvPWV9KHdpbmRvdy5aZXB0b3x8d2luZG93LmpRdWVyeSx3aW5kb3csZG9jdW1lbnQpLGZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWZ1bmN0aW9uKGIpe3RoaXMuY29yZT1iLHRoaXMuY29yZS5vcHRpb25zPWEuZXh0ZW5kKHt9LGUuRGVmYXVsdHMsdGhpcy5jb3JlLm9wdGlvbnMpLHRoaXMuc3dhcHBpbmc9ITAsdGhpcy5wcmV2aW91cz1kLHRoaXMubmV4dD1kLHRoaXMuaGFuZGxlcnM9e1wiY2hhbmdlLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJlwicG9zaXRpb25cIj09YS5wcm9wZXJ0eS5uYW1lJiYodGhpcy5wcmV2aW91cz10aGlzLmNvcmUuY3VycmVudCgpLHRoaXMubmV4dD1hLnByb3BlcnR5LnZhbHVlKX0sdGhpcyksXCJkcmFnLm93bC5jYXJvdXNlbCBkcmFnZ2VkLm93bC5jYXJvdXNlbCB0cmFuc2xhdGVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJih0aGlzLnN3YXBwaW5nPVwidHJhbnNsYXRlZFwiPT1hLnR5cGUpfSx0aGlzKSxcInRyYW5zbGF0ZS5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLnN3YXBwaW5nJiYodGhpcy5jb3JlLm9wdGlvbnMuYW5pbWF0ZU91dHx8dGhpcy5jb3JlLm9wdGlvbnMuYW5pbWF0ZUluKSYmdGhpcy5zd2FwKCl9LHRoaXMpfSx0aGlzLmNvcmUuJGVsZW1lbnQub24odGhpcy5oYW5kbGVycyl9O2UuRGVmYXVsdHM9e2FuaW1hdGVPdXQ6ITEsYW5pbWF0ZUluOiExfSxlLnByb3RvdHlwZS5zd2FwPWZ1bmN0aW9uKCl7aWYoMT09PXRoaXMuY29yZS5zZXR0aW5ncy5pdGVtcyYmYS5zdXBwb3J0LmFuaW1hdGlvbiYmYS5zdXBwb3J0LnRyYW5zaXRpb24pe3RoaXMuY29yZS5zcGVlZCgwKTt2YXIgYixjPWEucHJveHkodGhpcy5jbGVhcix0aGlzKSxkPXRoaXMuY29yZS4kc3RhZ2UuY2hpbGRyZW4oKS5lcSh0aGlzLnByZXZpb3VzKSxlPXRoaXMuY29yZS4kc3RhZ2UuY2hpbGRyZW4oKS5lcSh0aGlzLm5leHQpLGY9dGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVJbixnPXRoaXMuY29yZS5zZXR0aW5ncy5hbmltYXRlT3V0O3RoaXMuY29yZS5jdXJyZW50KCkhPT10aGlzLnByZXZpb3VzJiYoZyYmKGI9dGhpcy5jb3JlLmNvb3JkaW5hdGVzKHRoaXMucHJldmlvdXMpLXRoaXMuY29yZS5jb29yZGluYXRlcyh0aGlzLm5leHQpLGQub25lKGEuc3VwcG9ydC5hbmltYXRpb24uZW5kLGMpLmNzcyh7bGVmdDpiK1wicHhcIn0pLmFkZENsYXNzKFwiYW5pbWF0ZWQgb3dsLWFuaW1hdGVkLW91dFwiKS5hZGRDbGFzcyhnKSksZiYmZS5vbmUoYS5zdXBwb3J0LmFuaW1hdGlvbi5lbmQsYykuYWRkQ2xhc3MoXCJhbmltYXRlZCBvd2wtYW5pbWF0ZWQtaW5cIikuYWRkQ2xhc3MoZikpfX0sZS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oYil7YShiLnRhcmdldCkuY3NzKHtsZWZ0OlwiXCJ9KS5yZW1vdmVDbGFzcyhcImFuaW1hdGVkIG93bC1hbmltYXRlZC1vdXQgb3dsLWFuaW1hdGVkLWluXCIpLnJlbW92ZUNsYXNzKHRoaXMuY29yZS5zZXR0aW5ncy5hbmltYXRlSW4pLnJlbW92ZUNsYXNzKHRoaXMuY29yZS5zZXR0aW5ncy5hbmltYXRlT3V0KSx0aGlzLmNvcmUub25UcmFuc2l0aW9uRW5kKCl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgYSxiO2ZvcihhIGluIHRoaXMuaGFuZGxlcnMpdGhpcy5jb3JlLiRlbGVtZW50Lm9mZihhLHRoaXMuaGFuZGxlcnNbYV0pO2ZvcihiIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbYl0mJih0aGlzW2JdPW51bGwpfSxcbmEuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5BbmltYXRlPWV9KHdpbmRvdy5aZXB0b3x8d2luZG93LmpRdWVyeSx3aW5kb3csZG9jdW1lbnQpLGZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWZ1bmN0aW9uKGIpe3RoaXMuX2NvcmU9Yix0aGlzLl90aW1lb3V0PW51bGwsdGhpcy5fcGF1c2VkPSExLHRoaXMuX2hhbmRsZXJzPXtcImNoYW5nZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmXCJzZXR0aW5nc1wiPT09YS5wcm9wZXJ0eS5uYW1lP3RoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXk/dGhpcy5wbGF5KCk6dGhpcy5zdG9wKCk6YS5uYW1lc3BhY2UmJlwicG9zaXRpb25cIj09PWEucHJvcGVydHkubmFtZSYmdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheSYmdGhpcy5fc2V0QXV0b1BsYXlJbnRlcnZhbCgpfSx0aGlzKSxcImluaXRpYWxpemVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXkmJnRoaXMucGxheSgpfSx0aGlzKSxcInBsYXkub3dsLmF1dG9wbGF5XCI6YS5wcm94eShmdW5jdGlvbihhLGIsYyl7YS5uYW1lc3BhY2UmJnRoaXMucGxheShiLGMpfSx0aGlzKSxcInN0b3Aub3dsLmF1dG9wbGF5XCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5zdG9wKCl9LHRoaXMpLFwibW91c2VvdmVyLm93bC5hdXRvcGxheVwiOmEucHJveHkoZnVuY3Rpb24oKXt0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSYmdGhpcy5fY29yZS5pcyhcInJvdGF0aW5nXCIpJiZ0aGlzLnBhdXNlKCl9LHRoaXMpLFwibW91c2VsZWF2ZS5vd2wuYXV0b3BsYXlcIjphLnByb3h5KGZ1bmN0aW9uKCl7dGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheUhvdmVyUGF1c2UmJnRoaXMuX2NvcmUuaXMoXCJyb3RhdGluZ1wiKSYmdGhpcy5wbGF5KCl9LHRoaXMpLFwidG91Y2hzdGFydC5vd2wuY29yZVwiOmEucHJveHkoZnVuY3Rpb24oKXt0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSYmdGhpcy5fY29yZS5pcyhcInJvdGF0aW5nXCIpJiZ0aGlzLnBhdXNlKCl9LHRoaXMpLFwidG91Y2hlbmQub3dsLmNvcmVcIjphLnByb3h5KGZ1bmN0aW9uKCl7dGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheUhvdmVyUGF1c2UmJnRoaXMucGxheSgpfSx0aGlzKX0sdGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyksdGhpcy5fY29yZS5vcHRpb25zPWEuZXh0ZW5kKHt9LGUuRGVmYXVsdHMsdGhpcy5fY29yZS5vcHRpb25zKX07ZS5EZWZhdWx0cz17YXV0b3BsYXk6ITEsYXV0b3BsYXlUaW1lb3V0OjVlMyxhdXRvcGxheUhvdmVyUGF1c2U6ITEsYXV0b3BsYXlTcGVlZDohMX0sZS5wcm90b3R5cGUucGxheT1mdW5jdGlvbihhLGIpe3RoaXMuX3BhdXNlZD0hMSx0aGlzLl9jb3JlLmlzKFwicm90YXRpbmdcIil8fCh0aGlzLl9jb3JlLmVudGVyKFwicm90YXRpbmdcIiksdGhpcy5fc2V0QXV0b1BsYXlJbnRlcnZhbCgpKX0sZS5wcm90b3R5cGUuX2dldE5leHRUaW1lb3V0PWZ1bmN0aW9uKGQsZSl7cmV0dXJuIHRoaXMuX3RpbWVvdXQmJmIuY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpLGIuc2V0VGltZW91dChhLnByb3h5KGZ1bmN0aW9uKCl7dGhpcy5fcGF1c2VkfHx0aGlzLl9jb3JlLmlzKFwiYnVzeVwiKXx8dGhpcy5fY29yZS5pcyhcImludGVyYWN0aW5nXCIpfHxjLmhpZGRlbnx8dGhpcy5fY29yZS5uZXh0KGV8fHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlTcGVlZCl9LHRoaXMpLGR8fHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlUaW1lb3V0KX0sZS5wcm90b3R5cGUuX3NldEF1dG9QbGF5SW50ZXJ2YWw9ZnVuY3Rpb24oKXt0aGlzLl90aW1lb3V0PXRoaXMuX2dldE5leHRUaW1lb3V0KCl9LGUucHJvdG90eXBlLnN0b3A9ZnVuY3Rpb24oKXt0aGlzLl9jb3JlLmlzKFwicm90YXRpbmdcIikmJihiLmNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KSx0aGlzLl9jb3JlLmxlYXZlKFwicm90YXRpbmdcIikpfSxlLnByb3RvdHlwZS5wYXVzZT1mdW5jdGlvbigpe3RoaXMuX2NvcmUuaXMoXCJyb3RhdGluZ1wiKSYmKHRoaXMuX3BhdXNlZD0hMCl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgYSxiO3RoaXMuc3RvcCgpO2ZvcihhIGluIHRoaXMuX2hhbmRsZXJzKXRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGEsdGhpcy5faGFuZGxlcnNbYV0pO2ZvcihiIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbYl0mJih0aGlzW2JdPW51bGwpfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuYXV0b3BsYXk9ZX0od2luZG93LlplcHRvfHx3aW5kb3cualF1ZXJ5LHdpbmRvdyxkb2N1bWVudCksZnVuY3Rpb24oYSxiLGMsZCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ZnVuY3Rpb24oYil7dGhpcy5fY29yZT1iLHRoaXMuX2luaXRpYWxpemVkPSExLHRoaXMuX3BhZ2VzPVtdLHRoaXMuX2NvbnRyb2xzPXt9LHRoaXMuX3RlbXBsYXRlcz1bXSx0aGlzLiRlbGVtZW50PXRoaXMuX2NvcmUuJGVsZW1lbnQsdGhpcy5fb3ZlcnJpZGVzPXtuZXh0OnRoaXMuX2NvcmUubmV4dCxwcmV2OnRoaXMuX2NvcmUucHJldix0bzp0aGlzLl9jb3JlLnRvfSx0aGlzLl9oYW5kbGVycz17XCJwcmVwYXJlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGIpe2IubmFtZXNwYWNlJiZ0aGlzLl9jb3JlLnNldHRpbmdzLmRvdHNEYXRhJiZ0aGlzLl90ZW1wbGF0ZXMucHVzaCgnPGRpdiBjbGFzcz1cIicrdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RDbGFzcysnXCI+JythKGIuY29udGVudCkuZmluZChcIltkYXRhLWRvdF1cIikuYWRkQmFjayhcIltkYXRhLWRvdF1cIikuYXR0cihcImRhdGEtZG90XCIpK1wiPC9kaXY+XCIpfSx0aGlzKSxcImFkZGVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuZG90c0RhdGEmJnRoaXMuX3RlbXBsYXRlcy5zcGxpY2UoYS5wb3NpdGlvbiwwLHRoaXMuX3RlbXBsYXRlcy5wb3AoKSl9LHRoaXMpLFwicmVtb3ZlLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuZG90c0RhdGEmJnRoaXMuX3RlbXBsYXRlcy5zcGxpY2UoYS5wb3NpdGlvbiwxKX0sdGhpcyksXCJjaGFuZ2VkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJlwicG9zaXRpb25cIj09YS5wcm9wZXJ0eS5uYW1lJiZ0aGlzLmRyYXcoKX0sdGhpcyksXCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiYhdGhpcy5faW5pdGlhbGl6ZWQmJih0aGlzLl9jb3JlLnRyaWdnZXIoXCJpbml0aWFsaXplXCIsbnVsbCxcIm5hdmlnYXRpb25cIiksdGhpcy5pbml0aWFsaXplKCksdGhpcy51cGRhdGUoKSx0aGlzLmRyYXcoKSx0aGlzLl9pbml0aWFsaXplZD0hMCx0aGlzLl9jb3JlLnRyaWdnZXIoXCJpbml0aWFsaXplZFwiLG51bGwsXCJuYXZpZ2F0aW9uXCIpKX0sdGhpcyksXCJyZWZyZXNoZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5faW5pdGlhbGl6ZWQmJih0aGlzLl9jb3JlLnRyaWdnZXIoXCJyZWZyZXNoXCIsbnVsbCxcIm5hdmlnYXRpb25cIiksdGhpcy51cGRhdGUoKSx0aGlzLmRyYXcoKSx0aGlzLl9jb3JlLnRyaWdnZXIoXCJyZWZyZXNoZWRcIixudWxsLFwibmF2aWdhdGlvblwiKSl9LHRoaXMpfSx0aGlzLl9jb3JlLm9wdGlvbnM9YS5leHRlbmQoe30sZS5EZWZhdWx0cyx0aGlzLl9jb3JlLm9wdGlvbnMpLHRoaXMuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpfTtlLkRlZmF1bHRzPXtuYXY6ITEsbmF2VGV4dDpbXCJwcmV2XCIsXCJuZXh0XCJdLG5hdlNwZWVkOiExLG5hdkVsZW1lbnQ6XCJkaXZcIixuYXZDb250YWluZXI6ITEsbmF2Q29udGFpbmVyQ2xhc3M6XCJvd2wtbmF2XCIsbmF2Q2xhc3M6W1wib3dsLXByZXZcIixcIm93bC1uZXh0XCJdLHNsaWRlQnk6MSxkb3RDbGFzczpcIm93bC1kb3RcIixkb3RzQ2xhc3M6XCJvd2wtZG90c1wiLGRvdHM6ITAsZG90c0VhY2g6ITEsZG90c0RhdGE6ITEsZG90c1NwZWVkOiExLGRvdHNDb250YWluZXI6ITF9LGUucHJvdG90eXBlLmluaXRpYWxpemU9ZnVuY3Rpb24oKXt2YXIgYixjPXRoaXMuX2NvcmUuc2V0dGluZ3M7dGhpcy5fY29udHJvbHMuJHJlbGF0aXZlPShjLm5hdkNvbnRhaW5lcj9hKGMubmF2Q29udGFpbmVyKTphKFwiPGRpdj5cIikuYWRkQ2xhc3MoYy5uYXZDb250YWluZXJDbGFzcykuYXBwZW5kVG8odGhpcy4kZWxlbWVudCkpLmFkZENsYXNzKFwiZGlzYWJsZWRcIiksdGhpcy5fY29udHJvbHMuJHByZXZpb3VzPWEoXCI8XCIrYy5uYXZFbGVtZW50K1wiPlwiKS5hZGRDbGFzcyhjLm5hdkNsYXNzWzBdKS5odG1sKGMubmF2VGV4dFswXSkucHJlcGVuZFRvKHRoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZSkub24oXCJjbGlja1wiLGEucHJveHkoZnVuY3Rpb24oYSl7dGhpcy5wcmV2KGMubmF2U3BlZWQpfSx0aGlzKSksdGhpcy5fY29udHJvbHMuJG5leHQ9YShcIjxcIitjLm5hdkVsZW1lbnQrXCI+XCIpLmFkZENsYXNzKGMubmF2Q2xhc3NbMV0pLmh0bWwoYy5uYXZUZXh0WzFdKS5hcHBlbmRUbyh0aGlzLl9jb250cm9scy4kcmVsYXRpdmUpLm9uKFwiY2xpY2tcIixhLnByb3h5KGZ1bmN0aW9uKGEpe3RoaXMubmV4dChjLm5hdlNwZWVkKX0sdGhpcykpLGMuZG90c0RhdGF8fCh0aGlzLl90ZW1wbGF0ZXM9W2EoXCI8ZGl2PlwiKS5hZGRDbGFzcyhjLmRvdENsYXNzKS5hcHBlbmQoYShcIjxzcGFuPlwiKSkucHJvcChcIm91dGVySFRNTFwiKV0pLHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZT0oYy5kb3RzQ29udGFpbmVyP2EoYy5kb3RzQ29udGFpbmVyKTphKFwiPGRpdj5cIikuYWRkQ2xhc3MoYy5kb3RzQ2xhc3MpLmFwcGVuZFRvKHRoaXMuJGVsZW1lbnQpKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpLHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5vbihcImNsaWNrXCIsXCJkaXZcIixhLnByb3h5KGZ1bmN0aW9uKGIpe3ZhciBkPWEoYi50YXJnZXQpLnBhcmVudCgpLmlzKHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZSk/YShiLnRhcmdldCkuaW5kZXgoKTphKGIudGFyZ2V0KS5wYXJlbnQoKS5pbmRleCgpO2IucHJldmVudERlZmF1bHQoKSx0aGlzLnRvKGQsYy5kb3RzU3BlZWQpfSx0aGlzKSk7Zm9yKGIgaW4gdGhpcy5fb3ZlcnJpZGVzKXRoaXMuX2NvcmVbYl09YS5wcm94eSh0aGlzW2JdLHRoaXMpfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGEsYixjLGQ7Zm9yKGEgaW4gdGhpcy5faGFuZGxlcnMpdGhpcy4kZWxlbWVudC5vZmYoYSx0aGlzLl9oYW5kbGVyc1thXSk7Zm9yKGIgaW4gdGhpcy5fY29udHJvbHMpdGhpcy5fY29udHJvbHNbYl0ucmVtb3ZlKCk7Zm9yKGQgaW4gdGhpcy5vdmVyaWRlcyl0aGlzLl9jb3JlW2RdPXRoaXMuX292ZXJyaWRlc1tkXTtmb3IoYyBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSlcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzW2NdJiYodGhpc1tjXT1udWxsKX0sZS5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGEsYixjLGQ9dGhpcy5fY29yZS5jbG9uZXMoKS5sZW5ndGgvMixlPWQrdGhpcy5fY29yZS5pdGVtcygpLmxlbmd0aCxmPXRoaXMuX2NvcmUubWF4aW11bSghMCksZz10aGlzLl9jb3JlLnNldHRpbmdzLGg9Zy5jZW50ZXJ8fGcuYXV0b1dpZHRofHxnLmRvdHNEYXRhPzE6Zy5kb3RzRWFjaHx8Zy5pdGVtcztpZihcInBhZ2VcIiE9PWcuc2xpZGVCeSYmKGcuc2xpZGVCeT1NYXRoLm1pbihnLnNsaWRlQnksZy5pdGVtcykpLGcuZG90c3x8XCJwYWdlXCI9PWcuc2xpZGVCeSlmb3IodGhpcy5fcGFnZXM9W10sYT1kLGI9MCxjPTA7YTxlO2ErKyl7aWYoYj49aHx8MD09PWIpe2lmKHRoaXMuX3BhZ2VzLnB1c2goe3N0YXJ0Ok1hdGgubWluKGYsYS1kKSxlbmQ6YS1kK2gtMX0pLE1hdGgubWluKGYsYS1kKT09PWYpYnJlYWs7Yj0wLCsrY31iKz10aGlzLl9jb3JlLm1lcmdlcnModGhpcy5fY29yZS5yZWxhdGl2ZShhKSl9fSxlLnByb3RvdHlwZS5kcmF3PWZ1bmN0aW9uKCl7dmFyIGIsYz10aGlzLl9jb3JlLnNldHRpbmdzLGQ9dGhpcy5fY29yZS5pdGVtcygpLmxlbmd0aDw9Yy5pdGVtcyxlPXRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpLGY9Yy5sb29wfHxjLnJld2luZDt0aGlzLl9jb250cm9scy4kcmVsYXRpdmUudG9nZ2xlQ2xhc3MoXCJkaXNhYmxlZFwiLCFjLm5hdnx8ZCksYy5uYXYmJih0aGlzLl9jb250cm9scy4kcHJldmlvdXMudG9nZ2xlQ2xhc3MoXCJkaXNhYmxlZFwiLCFmJiZlPD10aGlzLl9jb3JlLm1pbmltdW0oITApKSx0aGlzLl9jb250cm9scy4kbmV4dC50b2dnbGVDbGFzcyhcImRpc2FibGVkXCIsIWYmJmU+PXRoaXMuX2NvcmUubWF4aW11bSghMCkpKSx0aGlzLl9jb250cm9scy4kYWJzb2x1dGUudG9nZ2xlQ2xhc3MoXCJkaXNhYmxlZFwiLCFjLmRvdHN8fGQpLGMuZG90cyYmKGI9dGhpcy5fcGFnZXMubGVuZ3RoLXRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLmxlbmd0aCxjLmRvdHNEYXRhJiYwIT09Yj90aGlzLl9jb250cm9scy4kYWJzb2x1dGUuaHRtbCh0aGlzLl90ZW1wbGF0ZXMuam9pbihcIlwiKSk6Yj4wP3RoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5hcHBlbmQobmV3IEFycmF5KGIrMSkuam9pbih0aGlzLl90ZW1wbGF0ZXNbMF0pKTpiPDAmJnRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLnNsaWNlKGIpLnJlbW92ZSgpLHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5maW5kKFwiLmFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKSx0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuY2hpbGRyZW4oKS5lcShhLmluQXJyYXkodGhpcy5jdXJyZW50KCksdGhpcy5fcGFnZXMpKS5hZGRDbGFzcyhcImFjdGl2ZVwiKSl9LGUucHJvdG90eXBlLm9uVHJpZ2dlcj1mdW5jdGlvbihiKXt2YXIgYz10aGlzLl9jb3JlLnNldHRpbmdzO2IucGFnZT17aW5kZXg6YS5pbkFycmF5KHRoaXMuY3VycmVudCgpLHRoaXMuX3BhZ2VzKSxjb3VudDp0aGlzLl9wYWdlcy5sZW5ndGgsc2l6ZTpjJiYoYy5jZW50ZXJ8fGMuYXV0b1dpZHRofHxjLmRvdHNEYXRhPzE6Yy5kb3RzRWFjaHx8Yy5pdGVtcyl9fSxlLnByb3RvdHlwZS5jdXJyZW50PWZ1bmN0aW9uKCl7dmFyIGI9dGhpcy5fY29yZS5yZWxhdGl2ZSh0aGlzLl9jb3JlLmN1cnJlbnQoKSk7cmV0dXJuIGEuZ3JlcCh0aGlzLl9wYWdlcyxhLnByb3h5KGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGEuc3RhcnQ8PWImJmEuZW5kPj1ifSx0aGlzKSkucG9wKCl9LGUucHJvdG90eXBlLmdldFBvc2l0aW9uPWZ1bmN0aW9uKGIpe3ZhciBjLGQsZT10aGlzLl9jb3JlLnNldHRpbmdzO3JldHVyblwicGFnZVwiPT1lLnNsaWRlQnk/KGM9YS5pbkFycmF5KHRoaXMuY3VycmVudCgpLHRoaXMuX3BhZ2VzKSxkPXRoaXMuX3BhZ2VzLmxlbmd0aCxiPysrYzotLWMsYz10aGlzLl9wYWdlc1soYyVkK2QpJWRdLnN0YXJ0KTooYz10aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKSxkPXRoaXMuX2NvcmUuaXRlbXMoKS5sZW5ndGgsYj9jKz1lLnNsaWRlQnk6Yy09ZS5zbGlkZUJ5KSxjfSxlLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKGIpe2EucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLHRoaXMuX2NvcmUpKHRoaXMuZ2V0UG9zaXRpb24oITApLGIpfSxlLnByb3RvdHlwZS5wcmV2PWZ1bmN0aW9uKGIpe2EucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLHRoaXMuX2NvcmUpKHRoaXMuZ2V0UG9zaXRpb24oITEpLGIpfSxlLnByb3RvdHlwZS50bz1mdW5jdGlvbihiLGMsZCl7dmFyIGU7IWQmJnRoaXMuX3BhZ2VzLmxlbmd0aD8oZT10aGlzLl9wYWdlcy5sZW5ndGgsYS5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sdGhpcy5fY29yZSkodGhpcy5fcGFnZXNbKGIlZStlKSVlXS5zdGFydCxjKSk6YS5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sdGhpcy5fY29yZSkoYixjKX0sYS5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLk5hdmlnYXRpb249ZX0od2luZG93LlplcHRvfHx3aW5kb3cualF1ZXJ5LHdpbmRvdyxkb2N1bWVudCksZnVuY3Rpb24oYSxiLGMsZCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ZnVuY3Rpb24oYyl7dGhpcy5fY29yZT1jLHRoaXMuX2hhc2hlcz17fSx0aGlzLiRlbGVtZW50PXRoaXMuX2NvcmUuJGVsZW1lbnQsdGhpcy5faGFuZGxlcnM9e1wiaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihjKXtjLm5hbWVzcGFjZSYmXCJVUkxIYXNoXCI9PT10aGlzLl9jb3JlLnNldHRpbmdzLnN0YXJ0UG9zaXRpb24mJmEoYikudHJpZ2dlcihcImhhc2hjaGFuZ2Uub3dsLm5hdmlnYXRpb25cIil9LHRoaXMpLFwicHJlcGFyZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihiKXtpZihiLm5hbWVzcGFjZSl7dmFyIGM9YShiLmNvbnRlbnQpLmZpbmQoXCJbZGF0YS1oYXNoXVwiKS5hZGRCYWNrKFwiW2RhdGEtaGFzaF1cIikuYXR0cihcImRhdGEtaGFzaFwiKTtpZighYylyZXR1cm47dGhpcy5faGFzaGVzW2NdPWIuY29udGVudH19LHRoaXMpLFwiY2hhbmdlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGMpe2lmKGMubmFtZXNwYWNlJiZcInBvc2l0aW9uXCI9PT1jLnByb3BlcnR5Lm5hbWUpe3ZhciBkPXRoaXMuX2NvcmUuaXRlbXModGhpcy5fY29yZS5yZWxhdGl2ZSh0aGlzLl9jb3JlLmN1cnJlbnQoKSkpLGU9YS5tYXAodGhpcy5faGFzaGVzLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9PT1kP2I6bnVsbH0pLmpvaW4oKTtpZighZXx8Yi5sb2NhdGlvbi5oYXNoLnNsaWNlKDEpPT09ZSlyZXR1cm47Yi5sb2NhdGlvbi5oYXNoPWV9fSx0aGlzKX0sdGhpcy5fY29yZS5vcHRpb25zPWEuZXh0ZW5kKHt9LGUuRGVmYXVsdHMsdGhpcy5fY29yZS5vcHRpb25zKSx0aGlzLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKSxhKGIpLm9uKFwiaGFzaGNoYW5nZS5vd2wubmF2aWdhdGlvblwiLGEucHJveHkoZnVuY3Rpb24oYSl7dmFyIGM9Yi5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKSxlPXRoaXMuX2NvcmUuJHN0YWdlLmNoaWxkcmVuKCksZj10aGlzLl9oYXNoZXNbY10mJmUuaW5kZXgodGhpcy5faGFzaGVzW2NdKTtmIT09ZCYmZiE9PXRoaXMuX2NvcmUuY3VycmVudCgpJiZ0aGlzLl9jb3JlLnRvKHRoaXMuX2NvcmUucmVsYXRpdmUoZiksITEsITApfSx0aGlzKSl9O2UuRGVmYXVsdHM9e1VSTGhhc2hMaXN0ZW5lcjohMX0sZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3ZhciBjLGQ7YShiKS5vZmYoXCJoYXNoY2hhbmdlLm93bC5uYXZpZ2F0aW9uXCIpO2ZvcihjIGluIHRoaXMuX2hhbmRsZXJzKXRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGMsdGhpcy5faGFuZGxlcnNbY10pO2ZvcihkIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbZF0mJih0aGlzW2RdPW51bGwpfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuSGFzaD1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXtmdW5jdGlvbiBlKGIsYyl7dmFyIGU9ITEsZj1iLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Iuc2xpY2UoMSk7cmV0dXJuIGEuZWFjaCgoYitcIiBcIitoLmpvaW4oZitcIiBcIikrZikuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEsYil7aWYoZ1tiXSE9PWQpcmV0dXJuIGU9IWN8fGIsITF9KSxlfWZ1bmN0aW9uIGYoYSl7cmV0dXJuIGUoYSwhMCl9dmFyIGc9YShcIjxzdXBwb3J0PlwiKS5nZXQoMCkuc3R5bGUsaD1cIldlYmtpdCBNb3ogTyBtc1wiLnNwbGl0KFwiIFwiKSxpPXt0cmFuc2l0aW9uOntlbmQ6e1dlYmtpdFRyYW5zaXRpb246XCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIsTW96VHJhbnNpdGlvbjpcInRyYW5zaXRpb25lbmRcIixPVHJhbnNpdGlvbjpcIm9UcmFuc2l0aW9uRW5kXCIsdHJhbnNpdGlvbjpcInRyYW5zaXRpb25lbmRcIn19LGFuaW1hdGlvbjp7ZW5kOntXZWJraXRBbmltYXRpb246XCJ3ZWJraXRBbmltYXRpb25FbmRcIixNb3pBbmltYXRpb246XCJhbmltYXRpb25lbmRcIixPQW5pbWF0aW9uOlwib0FuaW1hdGlvbkVuZFwiLGFuaW1hdGlvbjpcImFuaW1hdGlvbmVuZFwifX19LGo9e2Nzc3RyYW5zZm9ybXM6ZnVuY3Rpb24oKXtyZXR1cm4hIWUoXCJ0cmFuc2Zvcm1cIil9LGNzc3RyYW5zZm9ybXMzZDpmdW5jdGlvbigpe3JldHVybiEhZShcInBlcnNwZWN0aXZlXCIpfSxjc3N0cmFuc2l0aW9uczpmdW5jdGlvbigpe3JldHVybiEhZShcInRyYW5zaXRpb25cIil9LGNzc2FuaW1hdGlvbnM6ZnVuY3Rpb24oKXtyZXR1cm4hIWUoXCJhbmltYXRpb25cIil9fTtqLmNzc3RyYW5zaXRpb25zKCkmJihhLnN1cHBvcnQudHJhbnNpdGlvbj1uZXcgU3RyaW5nKGYoXCJ0cmFuc2l0aW9uXCIpKSxhLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQ9aS50cmFuc2l0aW9uLmVuZFthLnN1cHBvcnQudHJhbnNpdGlvbl0pLGouY3NzYW5pbWF0aW9ucygpJiYoYS5zdXBwb3J0LmFuaW1hdGlvbj1uZXcgU3RyaW5nKGYoXCJhbmltYXRpb25cIikpLGEuc3VwcG9ydC5hbmltYXRpb24uZW5kPWkuYW5pbWF0aW9uLmVuZFthLnN1cHBvcnQuYW5pbWF0aW9uXSksai5jc3N0cmFuc2Zvcm1zKCkmJihhLnN1cHBvcnQudHJhbnNmb3JtPW5ldyBTdHJpbmcoZihcInRyYW5zZm9ybVwiKSksYS5zdXBwb3J0LnRyYW5zZm9ybTNkPWouY3NzdHJhbnNmb3JtczNkKCkpfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KTtcbjsgYnJvd3NlcmlmeV9zaGltX19kZWZpbmVfX21vZHVsZV9fZXhwb3J0X18odHlwZW9mIG93bENhcm91c2VsICE9IFwidW5kZWZpbmVkXCIgPyBvd2xDYXJvdXNlbCA6IHdpbmRvdy5vd2xDYXJvdXNlbCk7XG5cbn0pLmNhbGwoZ2xvYmFsLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uIGRlZmluZUV4cG9ydChleCkgeyBtb2R1bGUuZXhwb3J0cyA9IGV4OyB9KTtcbiIsbnVsbCxudWxsXX0=
